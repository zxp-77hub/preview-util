{
  "collections": [
    {
      "id": "DynamicRules",
      "items": [
        {
          "id": "3f92da82-cdf0-4044-8a0a-d557d12e60c3",
          "description": "有来源时，表单project字段不可修改",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "$current.srcObject"
                },
                "field": "project"
              }
            }
          ]
        },
        {
          "id": "c1565ed9-2f9c-4620-80a8-0c5f91434639",
          "description": "有来源时，表单projectOrg字段不可修改",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "$current.srcObject"
                },
                "field": "projectOrg"
              }
            }
          ]
        },
        {
          "id": "dbc8aa3a-4a09-4105-9f45-a14a99c2c005",
          "description": "有来源时，表单projectStage字段不可修改",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "$current.srcObject"
                },
                "field": "projectStage"
              }
            }
          ]
        },
        {
          "id": "2611d9f3-2658-4ac3-afc8-162289e19d28",
          "description": "有来源时，表单product字段不可修改",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "$current.srcObject"
                },
                "field": "product"
              }
            }
          ]
        },
        {
          "id": "213f94cb-1de1-41dc-bab9-b60005501c1a",
          "description": "有来源时，表单settleOrg字段不可修改",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "$current.srcObject"
                },
                "field": "settleOrg"
              }
            }
          ]
        },
        {
          "id": "74b49703-ff47-4373-8a74-f968597d46a9",
          "description": "有来源时，表单receiptOrg字段不可修改",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "$current.srcObject"
                },
                "field": "receiptOrg"
              }
            }
          ]
        },
        {
          "id": "e43fec1f-ab55-4f82-b3e5-14e33fed0afd",
          "description": "有来源时，表单createdOrg字段不可修改",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "$current.srcObject"
                },
                "field": "createdOrg"
              }
            }
          ]
        },
        {
          "id": "39317807-354e-4316-8b2c-ffc81174a857",
          "description": "有来源时，表单demandOrg字段不可修改",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "$current.srcObject"
                },
                "field": "demandOrg"
              }
            }
          ]
        },
        {
          "id": "TaxRatePrecisionControl-purOrderItems-taxRate",
          "description": "",
          "triggers": [
            {
              "event": "Automation"
            }
          ],
          "actions": [
            {
              "name": "FieldComponentProps",
              "params": {
                "field": "purOrderItems.taxRate",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": 2
                  },
                  "isDestruct": true
                }
              }
            }
          ]
        },
        {
          "id": "detail-required-purOrderItems",
          "description": "子表必有一行",
          "actions": [
            {
              "name": "ReactiveFieldValidator",
              "params": {
                "field": "purOrderItems",
                "effect": {
                  "name": "required",
                  "isStruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "OrgRoleTypeIds-6ceda901-527b-463b-836b-56f671544dd1",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "createdOrg",
                "effect": {
                  "props": {
                    "orgRoleTypeIds": [
                      "PurchaseOrg"
                    ]
                  },
                  "isDestruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "QueryContext-bba16015-1141-419e-8a90-31d5ecaa460f",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "description": "field: 供应商",
              "params": {
                "field": "vendor",
                "effects": [
                  {
                    "props": {
                      "contextOrgIds": "[$root.createdOrg.id]"
                    },
                    "isDestruct": false,
                    "when": "$root.createdOrg.id",
                    "fireImmediately": true
                  },
                  {
                    "props": {
                      "contextRoleOrgIds.PurchaseOrg": "$root.createdOrg.id"
                    },
                    "isDestruct": true,
                    "when": "$root.createdOrg.id",
                    "fireImmediately": true
                  },
                  {
                    "props": {
                      "contextRoleOrgIds.FinancialOrg": "$root.settleOrg.id"
                    },
                    "isDestruct": true,
                    "when": "$root.settleOrg.id",
                    "fireImmediately": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": "QueryContext-476582b6-e48f-4dff-aa23-6f543a4295be",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "description": "field: 结算供应商",
              "params": {
                "field": "settleVendor",
                "effects": [
                  {
                    "props": {
                      "contextOrgIds": "[$root.createdOrg.id]"
                    },
                    "isDestruct": false,
                    "when": "$root.createdOrg.id",
                    "fireImmediately": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": "QueryContext-12407cf8-be45-4d3d-bbaa-86ea10195f14",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "description": "field: 联系人",
              "params": {
                "field": "contact",
                "effects": [
                  {
                    "props": {
                      "contextOrgIds": "[$root.createdOrg.id]"
                    },
                    "isDestruct": false,
                    "when": "$root.createdOrg.id",
                    "fireImmediately": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": "QueryContext-6d611187-6ec9-455c-8f2c-db50d9824c31",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "description": "field: 项目",
              "params": {
                "field": "project",
                "effects": [
                  {
                    "props": {
                      "contextOrgIds": "[$root.createdOrg.id]"
                    },
                    "isDestruct": false,
                    "when": "$root.createdOrg.id",
                    "fireImmediately": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": "OrgRoleTypeIds-c12e669b-7c6b-44e1-90df-0f5d37c2b0ff",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "projectOrg",
                "effect": {
                  "props": {
                    "orgRoleTypeIds": [
                      "ProjectOrg"
                    ]
                  },
                  "isDestruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "QueryContext-e4098a8c-ae9c-4c4e-a19e-6926dd67fa6c",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "description": "field: 结算方式",
              "params": {
                "field": "settlementMethod",
                "effects": [
                  {
                    "props": {
                      "contextOrgIds": "[$root.createdOrg.id]"
                    },
                    "isDestruct": false,
                    "when": "$root.createdOrg.id",
                    "fireImmediately": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": "QueryContext-197a443c-641d-4855-999e-b6d8e0fa6021",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "description": "field: 变更原因",
              "params": {
                "field": "changeBizReason",
                "effects": [
                  {
                    "props": {
                      "contextOrgIds": "[$root.createdOrg.id]"
                    },
                    "isDestruct": false,
                    "when": "$root.createdOrg.id",
                    "fireImmediately": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": "QueryContext-0afef09d-d066-4e0f-b9d6-5bd5012486bf",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "description": "field: 关闭原因",
              "params": {
                "field": "closedBizReason",
                "effects": [
                  {
                    "props": {
                      "contextOrgIds": "[$root.createdOrg.id]"
                    },
                    "isDestruct": false,
                    "when": "$root.createdOrg.id",
                    "fireImmediately": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": "QueryContext-39b2523d-7149-4011-9afe-07bcfc9599cb",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "description": "field: 挂起原因",
              "params": {
                "field": "suspendedBizReason",
                "effects": [
                  {
                    "props": {
                      "contextOrgIds": "[$root.createdOrg.id]"
                    },
                    "isDestruct": false,
                    "when": "$root.createdOrg.id",
                    "fireImmediately": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": "OrgRoleTypeIds-edaaf151-aad7-4b81-9f79-02da0bdf9da4",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "receiptOrg",
                "effect": {
                  "props": {
                    "orgRoleTypeIds": [
                      "InventoryOrg"
                    ]
                  },
                  "isDestruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "OrgRoleTypeIds-8d7d0622-71af-49d0-901a-a8c05feb6b2e",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "settleOrg",
                "effect": {
                  "props": {
                    "orgRoleTypeIds": [
                      "FinancialOrg"
                    ]
                  },
                  "isDestruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "QueryContext-v2-f137da8c-374c-416d-92a9-4134d1cf39ac",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "description": "field: 项目",
              "params": {
                "field": "purOrderItems.project",
                "effects": [
                  {
                    "props": {
                      "contextOrgIds": "[$root.createdOrg.id]"
                    },
                    "isDestruct": false,
                    "when": "$root.createdOrg.id",
                    "fireImmediately": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": "OrgRoleTypeIds-10b11d79-2598-4749-ab07-8a66a0760bed",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "purOrderItems.projectOrg",
                "effect": {
                  "props": {
                    "orgRoleTypeIds": [
                      "ProjectOrg"
                    ]
                  },
                  "isDestruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "QueryContext-v2-7f5ef7e2-7af4-4199-837f-1bf0e08e2e05",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "description": "field: 存货",
              "params": {
                "field": "purOrderItems.product",
                "effects": [
                  {
                    "props": {
                      "contextOrgIds": "[$root.createdOrg.id]"
                    },
                    "isDestruct": false,
                    "when": "$root.createdOrg.id",
                    "fireImmediately": true
                  },
                  {
                    "props": {
                      "contextRoleOrgIds.PurchaseOrg": "$root.createdOrg.id"
                    },
                    "isDestruct": true,
                    "when": "$root.createdOrg.id",
                    "fireImmediately": true
                  },
                  {
                    "props": {
                      "contextRoleOrgIds.FinancialOrg": "$root.settleOrg.id"
                    },
                    "isDestruct": true,
                    "when": "$root.settleOrg.id",
                    "fireImmediately": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": "OrgRoleTypeIds-67c4f67c-411a-408c-85eb-003e0357048b",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "purOrderItems.demandOrg",
                "effect": {
                  "props": {
                    "orgRoleTypeIds": [
                      "InventoryOrg"
                    ]
                  },
                  "isDestruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "OrgRoleTypeIds-b969ae2b-cff7-4805-97ce-e8e1aefc0be3",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "purOrderItems.receiptOrg",
                "effect": {
                  "props": {
                    "orgRoleTypeIds": [
                      "InventoryOrg"
                    ]
                  },
                  "isDestruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "OrgRoleTypeIds-6f0bf49e-cf4e-4795-b8fb-745b8e93cdd3",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "purOrderItems.settleOrg",
                "effect": {
                  "props": {
                    "orgRoleTypeIds": [
                      "FinancialOrg"
                    ]
                  },
                  "isDestruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "QueryContext-v2-60dbb42c-d1f3-4088-bacd-7a0eaf58117f",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "description": "field: 关闭原因",
              "params": {
                "field": "purOrderItems.closedBizReason",
                "effects": [
                  {
                    "props": {
                      "contextOrgIds": "[$root.createdOrg.id]"
                    },
                    "isDestruct": false,
                    "when": "$root.createdOrg.id",
                    "fireImmediately": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": "OrgRoleTypeIds-1cb922b4-32fa-4665-8859-32e21d506962",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "purOrderItems.invAccountingOrg",
                "effect": {
                  "props": {
                    "orgRoleTypeIds": [
                      "FinancialOrg"
                    ]
                  },
                  "isDestruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "QueryContext-v2-4c82bf6f-d2a0-43ef-9410-2e51f0281970",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "description": "field: 糖粮级别",
              "params": {
                "field": "purOrderItems.csTljbccl6q81j6902Cccl6q81j6903",
                "effects": [
                  {
                    "props": {
                      "contextOrgIds": "[$root.createdOrg.id]"
                    },
                    "isDestruct": false,
                    "when": "$root.createdOrg.id",
                    "fireImmediately": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": "QueryContext-v2-2476189e-7059-461e-bbe2-a67c2f95827d",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "description": "field: 声音甜度C",
              "params": {
                "field": "purOrderItems.csSytdcccl6qe1j6901Cccl6qe1j6902",
                "effects": [
                  {
                    "props": {
                      "contextOrgIds": "[$root.createdOrg.id]"
                    },
                    "isDestruct": false,
                    "when": "$root.createdOrg.id",
                    "fireImmediately": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": "QueryContext-v2-8a6d148c-2113-45cd-b310-16a181cd4d50",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "description": "field: 颜色",
              "params": {
                "field": "purOrderItems.csYsccmutk1j5001Cccmutk1j5002",
                "effects": [
                  {
                    "props": {
                      "contextOrgIds": "[$root.createdOrg.id]"
                    },
                    "isDestruct": false,
                    "when": "$root.createdOrg.id",
                    "fireImmediately": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": "QueryContext-v2-09dfcffa-f742-4f9f-b5bb-0fbad285fcab",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "description": "field: 尺码",
              "params": {
                "field": "purOrderItems.csCmccmuu21j5002Cccmuu21j5003",
                "effects": [
                  {
                    "props": {
                      "contextOrgIds": "[$root.createdOrg.id]"
                    },
                    "isDestruct": false,
                    "when": "$root.createdOrg.id",
                    "fireImmediately": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": "QueryContext-v2-763d7794-89eb-437b-ac89-7e723dd8f6b8",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "description": "field: 材质",
              "params": {
                "field": "purOrderItems.csCzccraah1jp002Cccraah1jp003",
                "effects": [
                  {
                    "props": {
                      "contextOrgIds": "[$root.createdOrg.id]"
                    },
                    "isDestruct": false,
                    "when": "$root.createdOrg.id",
                    "fireImmediately": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": "OrgRoleTypeIds-943d1ec3-aab2-4220-bf4e-23ad1fb60196",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "purOrderSettlementItems.settleOrg",
                "effect": {
                  "props": {
                    "orgRoleTypeIds": [
                      "FinancialOrg"
                    ]
                  },
                  "isDestruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "QueryContext-v2-57a6e8a0-533f-4df7-9901-9f9c470354cf",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "description": "field: 项目",
              "params": {
                "field": "purOrderSettlementItems.project",
                "effects": [
                  {
                    "props": {
                      "contextOrgIds": "[$root.createdOrg.id]"
                    },
                    "isDestruct": false,
                    "when": "$root.createdOrg.id",
                    "fireImmediately": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": "OrgRoleTypeIds-79178f11-0bd3-44b5-b59f-9bcf7aa373f5",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "purOrderSettlementItems.projectOrg",
                "effect": {
                  "props": {
                    "orgRoleTypeIds": [
                      "ProjectOrg"
                    ]
                  },
                  "isDestruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "QueryContext-v2-69b817a0-8a2e-4aa3-a6bf-ca2e1b9914b8",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "description": "field: 关闭原因",
              "params": {
                "field": "purOrderSettlementItems.closedBizReason",
                "effects": [
                  {
                    "props": {
                      "contextOrgIds": "[$root.createdOrg.id]"
                    },
                    "isDestruct": false,
                    "when": "$root.createdOrg.id",
                    "fireImmediately": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": "QueryContext-v2-6906b402-c147-4c41-aaf6-0c2107ac4e80",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "description": "field: 付款类型",
              "params": {
                "field": "purOrderSettlementItems.settlementType",
                "effects": [
                  {
                    "props": {
                      "contextOrgIds": "[$root.createdOrg.id]"
                    },
                    "isDestruct": false,
                    "when": "$root.createdOrg.id",
                    "fireImmediately": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": "ContextRoleOrgDepartmentRelationship_department_0",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "department",
                "effect": {
                  "props": {
                    "contextOrgIds": "[$current.createdOrg.id]"
                  },
                  "isDestruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "ContextRoleOrgPersonRelationship_ownerUser_1",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "ownerUser",
                "effect": {
                  "props": {
                    "contextOrgIds": "[$current.createdOrg.id]"
                  },
                  "isDestruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "CreatedOrg-Status-Control",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "field": "createdOrg",
                "effect": {
                  "status": "Readonly",
                  "expr": true,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "BusinessModuleIds",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "createdOrg",
                "effect": {
                  "props": {
                    "businessModuleIds": "$context.businessModuleIds"
                  },
                  "isDestruct": false,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "sc-add-created-org-rule-6a7bf703-8962-49ab-9511-d9eb5ed95040",
          "description": "采购单据组织加模块启用属性过滤",
          "actions": [
            {
              "name": "ReactiveCriteria",
              "params": {
                "field": "createdOrg",
                "fragment": {
                  "criteriaStr": "id in (select orgId from BusinessModuleOrgEnable where businessModuleId in ('BusinessModule_purchase') and isEnabled = 'true')",
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "sc-master-to-detail-sync-b8e2e5e7-741b-4783-9501-53fe5bc88d1d",
          "description": "表头同步到表体-currency-exchangeRate",
          "actions": [
            {
              "name": "ReactiveMasterToTables",
              "params": {
                "sourceValue": "$current.currency",
                "targets": [
                  {
                    "dataTable": "purOrderItems",
                    "field": "currency",
                    "viewName": "Initialized"
                  }
                ],
                "when": "$root.currency"
              }
            },
            {
              "name": "ReactiveMasterToTables",
              "params": {
                "sourceValue": "$current.exchangeRate",
                "targets": [
                  {
                    "dataTable": "purOrderItems",
                    "field": "exchangeRate",
                    "viewName": "Initialized"
                  }
                ],
                "when": "$root.exchangeRate"
              }
            }
          ]
        },
        {
          "id": "currency-初始化默认值5c0dd2c0-6ba7-4ed1-8b15-0019603e0a77",
          "description": "currency-初始化默认值",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "field": "currency",
                "expr": "$root.currency",
                "when": "!$current.currency"
              }
            }
          ]
        },
        {
          "id": "exchangeRate-初始化默认值521e0a56-d25b-45db-9f49-fb52a7dfe5f8",
          "description": "exchangeRate-初始化默认值",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "field": "exchangeRate",
                "expr": "$root.exchangeRate",
                "when": "!$current.exchangeRate"
              }
            }
          ]
        },
        {
          "id": "sc-add-product-context-org-ids-65f85e36-516e-42ea-afca-ab0045c76195",
          "description": "给存货添加组织上下文",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "product",
                "effect": {
                  "props": {
                    "contextOrgIds": "[$root.createdOrg.id]"
                  },
                  "isDestruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "sc-add-vendor-context-org-ids-6d9dcfb1-7897-4b5d-8af0-1c0791b4fe94",
          "description": "给供应商添加组织上下文",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "vendor",
                "effect": {
                  "props": {
                    "contextOrgIds": "[$root.createdOrg.id]"
                  },
                  "isDestruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "sc-add-productCode-context-org-ids-bbe5aa36-7474-447a-a9d7-839890db1552",
          "description": "给存货编码添加组织上下文",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "productCode",
                "effect": {
                  "props": {
                    "contextOrgIds": "[$root.createdOrg.id]"
                  },
                  "isDestruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "sc-add-change-product-default-refer-name-rule-88e379b4-2ff2-430d-95c0-559e99380f6f",
          "description": "修改存货的默认参照",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "product",
                "effect": {
                  "props": {
                    "referName": "inventory-product"
                  },
                  "isDestruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "sc-add-change-productCode-default-refer-name-rule-47c82f41-2635-4c42-94ba-6063fd7d88d2",
          "description": "修改存货编码的默认参照",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "productCode",
                "effect": {
                  "props": {
                    "referName": "inventory-product"
                  },
                  "isDestruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "sc-add-charac-context-org-id-f73d571a-874c-425e-b37e-30ecfa498beb",
          "description": "给存货添加组织上下文",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "csSytdcccl6qe1j6901Cccl6qe1j6902",
                "effect": {
                  "props": {
                    "contextOrgIds": "[$root.createdOrg.id]"
                  },
                  "isDestruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "sc-add-charac-context-org-id-fff134e6-82e3-455a-9b01-b915b3f60305",
          "description": "给存货添加组织上下文",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "csYsccmutk1j5001Cccmutk1j5002",
                "effect": {
                  "props": {
                    "contextOrgIds": "[$root.createdOrg.id]"
                  },
                  "isDestruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "sc-add-charac-context-org-id-1dc9d106-d77e-481c-8a4a-eb2609da3264",
          "description": "给存货添加组织上下文",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "csCzccraah1jp002Cccraah1jp003",
                "effect": {
                  "props": {
                    "contextOrgIds": "[$root.createdOrg.id]"
                  },
                  "isDestruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "sc-add-charac-context-org-id-80a41d70-8dda-44dc-b57c-94f4f2079a84",
          "description": "给存货添加组织上下文",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "csTljbccl6q81j6902Cccl6q81j6903",
                "effect": {
                  "props": {
                    "contextOrgIds": "[$root.createdOrg.id]"
                  },
                  "isDestruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "sc-add-charac-context-org-id-3d66f8b7-3c93-4ac0-84db-739c727054c6",
          "description": "给存货添加组织上下文",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "csCmccmuu21j5002Cccmuu21j5003",
                "effect": {
                  "props": {
                    "contextOrgIds": "[$root.createdOrg.id]"
                  },
                  "isDestruct": false,
                  "when": "true",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "sc-add-product-charac-clear-when-product-change-eca-rules-26030248-543c-4d0d-ad51-2be6417fdac5",
          "description": "存货切换的时候, 清空存货特征相关内容",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.product"
            }
          ],
          "conditions": [
            {
              "if": "true"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "autoClear": true,
                "expr": "undefined",
                "field": "csSytdcccl6qe1j6901Cccl6qe1j6902",
                "override": true,
                "when": "$current.product.$focused"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "autoClear": true,
                "expr": "undefined",
                "field": "csYsccmutk1j5001Cccmutk1j5002",
                "override": true,
                "when": "$current.product.$focused"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "autoClear": true,
                "expr": "undefined",
                "field": "csCzccraah1jp002Cccraah1jp003",
                "override": true,
                "when": "$current.product.$focused"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "autoClear": true,
                "expr": "undefined",
                "field": "csTljbccl6q81j6902Cccl6q81j6903",
                "override": true,
                "when": "$current.product.$focused"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "autoClear": true,
                "expr": "undefined",
                "field": "csCmccmuu21j5002Cccmuu21j5003",
                "override": true,
                "when": "$current.product.$focused"
              }
            }
          ]
        },
        {
          "id": "sc-add-product-spec-clear-eca-22010d61-3e06-4c7d-9079-3f67427fe343",
          "description": "存货特征csSytdcccl6qe1j6901Cccl6qe1j6902变更的时候, 清空 ProductSpec",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.csSytdcccl6qe1j6901Cccl6qe1j6902"
            }
          ],
          "conditions": [
            {
              "if": "true"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "undefined",
                "field": "productSpec",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "undefined",
                "field": "purProductSpec",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "undefined",
                "field": "invCtrlObject",
                "when": "true"
              }
            }
          ]
        },
        {
          "id": "sc-add-product-spec-clear-eca-a759b00a-b0a9-4478-a08f-c9dc2e4449f6",
          "description": "存货特征csYsccmutk1j5001Cccmutk1j5002变更的时候, 清空 ProductSpec",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.csYsccmutk1j5001Cccmutk1j5002"
            }
          ],
          "conditions": [
            {
              "if": "true"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "undefined",
                "field": "productSpec",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "undefined",
                "field": "purProductSpec",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "undefined",
                "field": "invCtrlObject",
                "when": "true"
              }
            }
          ]
        },
        {
          "id": "sc-add-product-spec-clear-eca-ade5ec79-6280-45e1-8ea6-c71393571ccb",
          "description": "存货特征csCzccraah1jp002Cccraah1jp003变更的时候, 清空 ProductSpec",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.csCzccraah1jp002Cccraah1jp003"
            }
          ],
          "conditions": [
            {
              "if": "true"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "undefined",
                "field": "productSpec",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "undefined",
                "field": "purProductSpec",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "undefined",
                "field": "invCtrlObject",
                "when": "true"
              }
            }
          ]
        },
        {
          "id": "sc-add-product-spec-clear-eca-20163c5e-d4a1-445e-97fa-0e66ba57c947",
          "description": "存货特征csTljbccl6q81j6902Cccl6q81j6903变更的时候, 清空 ProductSpec",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.csTljbccl6q81j6902Cccl6q81j6903"
            }
          ],
          "conditions": [
            {
              "if": "true"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "undefined",
                "field": "productSpec",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "undefined",
                "field": "purProductSpec",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "undefined",
                "field": "invCtrlObject",
                "when": "true"
              }
            }
          ]
        },
        {
          "id": "sc-add-product-spec-clear-eca-2c910941-5462-4173-9711-a19f03dc911f",
          "description": "存货特征csCmccmuu21j5002Cccmuu21j5003变更的时候, 清空 ProductSpec",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.csCmccmuu21j5002Cccmuu21j5003"
            }
          ],
          "conditions": [
            {
              "if": "true"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "undefined",
                "field": "productSpec",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "undefined",
                "field": "purProductSpec",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "undefined",
                "field": "invCtrlObject",
                "when": "true"
              }
            }
          ]
        },
        {
          "id": "src-character-status-csYsccmutk1j5001Cccmutk1j50023695bc44-60ac-4ea5-a37c-a4f836d5b5c3",
          "description": "来源单据存货特征禁用状态设置",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "field": "csYsccmutk1j5001Cccmutk1j5002",
                "effect": {
                  "status": "Readonly",
                  "expr": "true",
                  "when": "$current.srcItemObjectPurReqItem.csYsccmutk1j5001Cccmutk1j5002&& $current.srcObjectTypeObject && $current.srcObjectTypeObject.id=='PurReq'",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "src-character-status-csCzccraah1jp002Cccraah1jp0037841771e-ae14-46c2-9156-06ef8e66f4e1",
          "description": "来源单据存货特征禁用状态设置",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "field": "csCzccraah1jp002Cccraah1jp003",
                "effect": {
                  "status": "Readonly",
                  "expr": "true",
                  "when": "$current.srcItemObjectPurReqItem.csCzccraah1jp002Cccraah1jp003&& $current.srcObjectTypeObject && $current.srcObjectTypeObject.id=='PurReq'",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "src-character-status-csTljbccl6q81j6902Cccl6q81j6903584e1ecf-3a90-4273-95d1-a00abb6499a8",
          "description": "来源单据存货特征禁用状态设置",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "field": "csTljbccl6q81j6902Cccl6q81j6903",
                "effect": {
                  "status": "Readonly",
                  "expr": "true",
                  "when": "$current.srcItemObjectPurReqItem.csTljbccl6q81j6902Cccl6q81j6903&& $current.srcObjectTypeObject && $current.srcObjectTypeObject.id=='PurReq'",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "src-character-status-csCmccmuu21j5002Cccmuu21j5003a2c7aa42-65be-441f-af4b-5949f3f31a5e",
          "description": "来源单据存货特征禁用状态设置",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "field": "csCmccmuu21j5002Cccmuu21j5003",
                "effect": {
                  "status": "Readonly",
                  "expr": "true",
                  "when": "$current.srcItemObjectPurReqItem.csCmccmuu21j5002Cccmuu21j5003&& $current.srcObjectTypeObject && $current.srcObjectTypeObject.id=='PurReq'",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "src-character-status-csSytdcccl6qe1j6901Cccl6qe1j6902dbec9627-8d4f-4934-8cb0-5e54e1d046cc",
          "description": "来源单据存货特征禁用状态设置",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "field": "csSytdcccl6qe1j6901Cccl6qe1j6902",
                "effect": {
                  "status": "Readonly",
                  "expr": "true",
                  "when": "$current.srcItemObjectPurReqItem.csSytdcccl6qe1j6901Cccl6qe1j6902&& $current.srcObjectTypeObject && $current.srcObjectTypeObject.id=='PurReq'",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Old-ImmutableCriteria-703f0d6e-2c19-442c-af14-5f79e9cd610e",
          "description": "",
          "actions": [
            {
              "name": "ReactiveCriteria",
              "params": {
                "field": "createdOrg",
                "fragment": {
                  "criteriaStr": "id in (select orgId from BusinessModuleOrgEnableView where businessModuleId in ('BusinessModule_purchase') and isEnabled = 'true')",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Old-Status-280c38ef-17a6-4684-9dfc-0ca17a294290",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "field": "originPayedAmount",
                "effect": {
                  "status": "Readonly",
                  "expr": true,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Old-Status-6ffb46af-3f17-4ed5-8ad2-4e5a9d618973",
          "description": "",
          "reference": "purOrderSettlementItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "field": "paymentAmount",
                "effect": {
                  "status": "Readonly",
                  "expr": true,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Old-Status-4c8f6f65-ef39-4471-a8f8-977e6cf98e22",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "field": "isClosed",
                "effect": {
                  "status": "Readonly",
                  "expr": true,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Old-Status-425ac331-9163-4620-bc7d-38b1d5129a10",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "field": "unReceiptTransQty",
                "effect": {
                  "status": "Readonly",
                  "expr": true,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Old-Status-a737e160-f94e-4c9b-a30b-81b22c16a95d",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "field": "originPaymentAppAmount",
                "effect": {
                  "status": "Readonly",
                  "expr": true,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Old-Status-a4223427-aabb-4fb1-9e4b-a30922d72bf3",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "field": "paymentAppAmount",
                "effect": {
                  "status": "Readonly",
                  "expr": true,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Old-Status-200cc2e5-6098-4259-86f5-6e6e4b68723d",
          "description": "",
          "reference": "purOrderSettlementItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "field": "originPaymentAmount",
                "effect": {
                  "status": "Readonly",
                  "expr": true,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Old-Status-ed86f145-70c9-48dd-ad34-6264851889f0",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "field": "billType",
                "effect": {
                  "status": "Readonly",
                  "expr": true,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Old-Status-64ea98a3-d240-4b24-8a8a-9be7bdfd7af9",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "field": "businessType",
                "effect": {
                  "status": "Readonly",
                  "expr": true,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Old-Status-e137f966-3620-4e8d-b26c-0479397a5f45",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "field": "unInvoiceTransQty",
                "effect": {
                  "status": "Readonly",
                  "expr": true,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Old-Status-4138f018-1aa4-404a-956d-8d5c29bb4991",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "field": "payedAmount",
                "effect": {
                  "status": "Readonly",
                  "expr": true,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Old-Status-5804178c-b963-4651-9a2c-02462fdc13fb",
          "description": "",
          "reference": "purOrderSettlementItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "field": "originPaymentAppAmount",
                "effect": {
                  "status": "Readonly",
                  "expr": true,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Old-Status-55b46778-8db4-4d02-8712-da1cf664b331",
          "description": "",
          "reference": "purOrderSettlementItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "field": "paymentAppAmount",
                "effect": {
                  "status": "Readonly",
                  "expr": true,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Old-Validator-e848cd64-cc16-45b9-9945-21e09eb90447",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldValidator",
              "params": {
                "field": "purOrderItems.taxRate",
                "effect": {
                  "name": "min",
                  "params": {
                    "includeEquals": true,
                    "message": "税率 不能小于0",
                    "min": 0
                  },
                  "isStruct": true,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Old-Validator-ac48f3b6-b60c-4a6d-b0c2-672375871306",
          "description": "",
          "actions": [
            {
              "name": "ReactiveFieldValidator",
              "params": {
                "field": "purOrderItems.taxRate",
                "effect": {
                  "name": "max",
                  "params": {
                    "includeEquals": false,
                    "max": 1,
                    "message": "税率 不能大于等于1"
                  },
                  "isStruct": true,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "ImmutableCriteria-",
          "description": "",
          "actions": [
            {
              "name": "ReactiveCriteria",
              "params": {
                "field": "webEditTemplate",
                "fragment": {
                  "criteriaStr": "id in ('020ca74d-b638-48ab-b4f8-bc884b3f11d5')",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Carry-",
          "description": "",
          "actions": [
            {
              "name": "ReactiveAssignment",
              "params": {
                "field": "$context.businessDate",
                "effect": {
                  "expr": "$current.businessDate",
                  "override": false,
                  "autoClear": false,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Criteria-ContextRoleRelationShip-2",
          "description": "",
          "actions": [
            {
              "name": "ReactiveCriteria",
              "params": {
                "field": "receiptOrg",
                "fragment": {
                  "criteriaStr": "(m.id=:createdOrgId or exists (select 1 from PartyDelegateRelationship relationship left join PartyDelegateFactor factor on relationship.id = factor.relationshipId left join Product product on product.id=:productId where relationshipTypeId in ('InventoryPurchaseDelegateRelationship')and fromPartyId=m.id and toPartyId=:createdOrgId  and relationship.isDisabled=false and coalesce(factor.isDisabled,false)=false and (factorTypeId='PartyDelegateFactorType.none' or product.id is null or (factorTypeId='PartyDelegateFactorType.product' and factor.objectId=product.id) or (factorTypeId='PartyDelegateFactorType.productCategory' and strpos(product.category.idPath,factor.objectId)>0) or (factorTypeId='PartyDelegateFactorType.productLine' and factor.objectId=product.productLineId))))",
                  "bindVars": {
                    "createdOrgId": "$current.createdOrg.id",
                    "productId": ""
                  },
                  "when": "!!$current.createdOrg.id",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Criteria-ContextRoleRelationShip-3",
          "description": "",
          "actions": [
            {
              "name": "ReactiveCriteria",
              "params": {
                "field": "settleOrg",
                "fragment": {
                  "criteriaStr": "(m.id=:createdOrgId or exists (select 1 from PartyDelegateRelationship where relationshipTypeId in ('PurchaseAccountingDelegateRelationship')and toPartyId=m.id and fromPartyId=:createdOrgId  and isDisabled=false))",
                  "bindVars": {
                    "createdOrgId": "$current.createdOrg.id"
                  },
                  "when": "!!$current.createdOrg.id",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Criteria-ContextRoleRelationShip-4",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveCriteria",
              "params": {
                "field": "receiptOrg",
                "fragment": {
                  "criteriaStr": "(m.id=:createdOrgId or exists (select 1 from PartyDelegateRelationship relationship left join PartyDelegateFactor factor on relationship.id = factor.relationshipId left join Product product on product.id=:productId where relationshipTypeId in ('InventoryPurchaseDelegateRelationship')and fromPartyId=m.id and toPartyId=:createdOrgId  and relationship.isDisabled=false and coalesce(factor.isDisabled,false)=false and (factorTypeId='PartyDelegateFactorType.none' or product.id is null or (factorTypeId='PartyDelegateFactorType.product' and factor.objectId=product.id) or (factorTypeId='PartyDelegateFactorType.productCategory' and strpos(product.category.idPath,factor.objectId)>0) or (factorTypeId='PartyDelegateFactorType.productLine' and factor.objectId=product.productLineId))))",
                  "bindVars": {
                    "createdOrgId": "$root.createdOrg.id",
                    "productId": "$current.product.id"
                  },
                  "when": "!!$root.createdOrg.id",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Criteria-ContextRoleRelationShip-5",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveCriteria",
              "params": {
                "field": "demandOrg",
                "fragment": {
                  "criteriaStr": "(m.id=:createdOrgId or exists (select 1 from PartyDelegateRelationship relationship left join PartyDelegateFactor factor on relationship.id = factor.relationshipId left join Product product on product.id=:productId where relationshipTypeId in ('InventoryPurchaseDelegateRelationship')and fromPartyId=m.id and toPartyId=:createdOrgId  and relationship.isDisabled=false and coalesce(factor.isDisabled,false)=false and (factorTypeId='PartyDelegateFactorType.none' or product.id is null or (factorTypeId='PartyDelegateFactorType.product' and factor.objectId=product.id) or (factorTypeId='PartyDelegateFactorType.productCategory' and strpos(product.category.idPath,factor.objectId)>0) or (factorTypeId='PartyDelegateFactorType.productLine' and factor.objectId=product.productLineId))))",
                  "bindVars": {
                    "createdOrgId": "$root.createdOrg.id",
                    "productId": ""
                  },
                  "when": "!!$root.createdOrg.id",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Criteria-ContextRoleRelationShip-6",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveCriteria",
              "params": {
                "field": "settleOrg",
                "fragment": {
                  "criteriaStr": "(m.id=:createdOrgId or exists (select 1 from PartyDelegateRelationship where relationshipTypeId in ('PurchaseAccountingDelegateRelationship')and toPartyId=m.id and fromPartyId=:createdOrgId  and isDisabled=false))",
                  "bindVars": {
                    "createdOrgId": "$root.createdOrg.id"
                  },
                  "when": "!!$root.createdOrg.id",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Criteria-ContextRoleRelationShip-7",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveCriteria",
              "params": {
                "field": "invAccountingOrg",
                "fragment": {
                  "criteriaStr": "exists(select 1 from ProjectOrg where partyId=:projectOrgId and ownerFinancialOrgId=m.id and (disabledTime is null or disabledTime>to_timestamp(:businessDate)))",
                  "bindVars": {
                    "businessDate": "$context.businessDate",
                    "projectOrgId": "$current.projectOrg.id"
                  },
                  "when": "($current.receiptOrg.id === null || $current.receiptOrg.id === undefined) && (!!$current.projectOrg.id)",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Criteria-ContextRoleRelationShip-8",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveCriteria",
              "params": {
                "field": "invAccountingOrg",
                "fragment": {
                  "criteriaStr": "exists(select 1 from InventoryOrg where partyId=:receiptOrgId and ownerFinancialOrgId=m.id and (disabledTime is null or disabledTime>to_timestamp(:businessDate)))",
                  "bindVars": {
                    "businessDate": "$context.businessDate",
                    "receiptOrgId": "$current.receiptOrg.id"
                  },
                  "when": "!!$current.receiptOrg.id",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Metadata-Field-Precision-purOrderItems.originAmount",
          "description": "",
          "actions": [
            {
              "name": "FieldComponentProps",
              "params": {
                "field": "purOrderItems.originAmount",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "2"
                  },
                  "isDestruct": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Domain-Field-Precision-purOrderItems.unReceiptTransQty",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "unReceiptTransQty",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "$current.transUnit.scale === undefined ? 2 : $current.transUnit.scale"
                  },
                  "isDestruct": true,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Metadata-Field-Precision-purOrderItems.paymentAppAmount",
          "description": "",
          "actions": [
            {
              "name": "FieldComponentProps",
              "params": {
                "field": "purOrderItems.paymentAppAmount",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "2"
                  },
                  "isDestruct": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Metadata-Field-Precision-purOrderItems.payedAmount",
          "description": "",
          "actions": [
            {
              "name": "FieldComponentProps",
              "params": {
                "field": "purOrderItems.payedAmount",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "2"
                  },
                  "isDestruct": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Metadata-Field-Precision-purOrderSettlementItems.rowNo",
          "description": "",
          "actions": [
            {
              "name": "FieldComponentProps",
              "params": {
                "field": "purOrderSettlementItems.rowNo",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "0"
                  },
                  "isDestruct": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Metadata-Field-Precision-amountWithoutTax",
          "description": "",
          "actions": [
            {
              "name": "FieldComponentProps",
              "params": {
                "field": "amountWithoutTax",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "2"
                  },
                  "isDestruct": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Metadata-Field-Precision-purOrderItems.originPrice",
          "description": "",
          "actions": [
            {
              "name": "FieldComponentProps",
              "params": {
                "field": "purOrderItems.originPrice",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "2"
                  },
                  "isDestruct": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Metadata-Field-Precision-purOrderItems.originAmountWithoutTax",
          "description": "",
          "actions": [
            {
              "name": "FieldComponentProps",
              "params": {
                "field": "purOrderItems.originAmountWithoutTax",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "2"
                  },
                  "isDestruct": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Metadata-Field-Precision-purOrderSettlementItems.originPaymentAmount",
          "description": "",
          "actions": [
            {
              "name": "FieldComponentProps",
              "params": {
                "field": "purOrderSettlementItems.originPaymentAmount",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "2"
                  },
                  "isDestruct": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Metadata-Field-Precision-purOrderSettlementItems.originAmount",
          "description": "",
          "actions": [
            {
              "name": "FieldComponentProps",
              "params": {
                "field": "purOrderSettlementItems.originAmount",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "2"
                  },
                  "isDestruct": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Metadata-Field-Precision-purOrderSettlementItems.paymentAmount",
          "description": "",
          "actions": [
            {
              "name": "FieldComponentProps",
              "params": {
                "field": "purOrderSettlementItems.paymentAmount",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "2"
                  },
                  "isDestruct": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Metadata-Field-Precision-originAmount",
          "description": "",
          "actions": [
            {
              "name": "FieldComponentProps",
              "params": {
                "field": "originAmount",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "2"
                  },
                  "isDestruct": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Domain-Field-Precision-purOrderItems.transQty",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "transQty",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "$current.transUnit.scale === undefined ? 2 : $current.transUnit.scale"
                  },
                  "isDestruct": true,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Domain-Field-Precision-purOrderItems.onHandBaseQty",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "onHandBaseQty",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "$current.baseUnit.scale === undefined ? 2 : $current.baseUnit.scale"
                  },
                  "isDestruct": true,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Domain-Field-Precision-purOrderItems.availBaseQty",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "availBaseQty",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "$current.baseUnit.scale === undefined ? 2 : $current.baseUnit.scale"
                  },
                  "isDestruct": true,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Metadata-Field-Precision-purOrderItems.originPaymentAppAmount",
          "description": "",
          "actions": [
            {
              "name": "FieldComponentProps",
              "params": {
                "field": "purOrderItems.originPaymentAppAmount",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "2"
                  },
                  "isDestruct": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Metadata-Field-Precision-purOrderSettlementItems.originPaymentAppAmount",
          "description": "",
          "actions": [
            {
              "name": "FieldComponentProps",
              "params": {
                "field": "purOrderSettlementItems.originPaymentAppAmount",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "2"
                  },
                  "isDestruct": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Metadata-Field-Precision-purOrderSettlementItems.paymentAppAmount",
          "description": "",
          "actions": [
            {
              "name": "FieldComponentProps",
              "params": {
                "field": "purOrderSettlementItems.paymentAppAmount",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "2"
                  },
                  "isDestruct": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Metadata-Field-Precision-purOrderItems.rowNo",
          "description": "",
          "actions": [
            {
              "name": "FieldComponentProps",
              "params": {
                "field": "purOrderItems.rowNo",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "0"
                  },
                  "isDestruct": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Metadata-Field-Precision-purOrderItems.originPriceWithoutTax",
          "description": "",
          "actions": [
            {
              "name": "FieldComponentProps",
              "params": {
                "field": "purOrderItems.originPriceWithoutTax",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "2"
                  },
                  "isDestruct": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Domain-Field-Precision-purOrderItems.baseQty",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "baseQty",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "$current.baseUnit.scale === undefined ? 2 : $current.baseUnit.scale"
                  },
                  "isDestruct": true,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Metadata-Field-Precision-purOrderSettlementItems.amount",
          "description": "",
          "actions": [
            {
              "name": "FieldComponentProps",
              "params": {
                "field": "purOrderSettlementItems.amount",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "2"
                  },
                  "isDestruct": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Metadata-Field-Precision-purOrderItems.originTaxAmount",
          "description": "",
          "actions": [
            {
              "name": "FieldComponentProps",
              "params": {
                "field": "purOrderItems.originTaxAmount",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "2"
                  },
                  "isDestruct": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Domain-Field-Precision-purOrderItems.unInvoiceTransQty",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "field": "unInvoiceTransQty",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "$current.transUnit.scale === undefined ? 2 : $current.transUnit.scale"
                  },
                  "isDestruct": true,
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "Completion-Metadata-Field-Precision-purOrderItems.originPayedAmount",
          "description": "",
          "actions": [
            {
              "name": "FieldComponentProps",
              "params": {
                "field": "purOrderItems.originPayedAmount",
                "effect": {
                  "props": {
                    "numericProps.decimalPlaces": "2"
                  },
                  "isDestruct": true
                }
              }
            }
          ]
        }
      ]
    },
    {
      "id": "SrcEcaRules",
      "items": []
    },
    {
      "id": "sc-disable-master-srcObject-rule-7ded310a-cb76-418e-be1b-8048afb55d86/0c63aeed-c80e-4de7-a200-5ec040cda356",
      "items": [
        {
          "id": "d5a101d1-ecd7-44eb-8a2b-4462f7d46dbf",
          "description": "有来源单据时控制表头字段不可编辑",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "$fn.judgeDetailsHasSrcObject('purOrderItems', 'Initialized')"
                },
                "field": "project"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "judgeDetailsHasSrcObject",
          "description": "判断明细行是否有来源单据",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (detailName, viewName = \"NotEmpty\", fieldName) {\n    const dataList = api.getView(detailName, viewName);\n    return detailsHasSrcObject(dataList);\n  }\n}\n\nfunction detailsHasSrcObject(dataList) {\n  if(!Array.isArray(dataList)) return false;\n  const srcObjectArr = dataList.map(item => item.srcObject).filter(item => !!item);\n  if(srcObjectArr.length) return true;\n  return false;\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "sc-disable-master-srcObject-rule-ee729bea-a0fb-4f6d-9a80-d2eecf2cbe0a/0c63aeed-c80e-4de7-a200-5ec040cda356",
      "items": [
        {
          "id": "d5a101d1-ecd7-44eb-8a2b-4462f7d46dbf",
          "description": "有来源单据时控制表头字段不可编辑",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "$fn.judgeDetailsHasSrcObject('purOrderItems', 'Initialized')"
                },
                "field": "projectOrg"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "judgeDetailsHasSrcObject",
          "description": "判断明细行是否有来源单据",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (detailName, viewName = \"NotEmpty\", fieldName) {\n    const dataList = api.getView(detailName, viewName);\n    return detailsHasSrcObject(dataList);\n  }\n}\n\nfunction detailsHasSrcObject(dataList) {\n  if(!Array.isArray(dataList)) return false;\n  const srcObjectArr = dataList.map(item => item.srcObject).filter(item => !!item);\n  if(srcObjectArr.length) return true;\n  return false;\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "sc-disable-master-srcObject-rule-f3192b0c-64d1-4c41-8469-bb2165f004c0/0c63aeed-c80e-4de7-a200-5ec040cda356",
      "items": [
        {
          "id": "d5a101d1-ecd7-44eb-8a2b-4462f7d46dbf",
          "description": "有来源单据时控制表头字段不可编辑",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "$fn.judgeDetailsHasSrcObject('purOrderItems', 'Initialized')"
                },
                "field": "projectStage"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "judgeDetailsHasSrcObject",
          "description": "判断明细行是否有来源单据",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (detailName, viewName = \"NotEmpty\", fieldName) {\n    const dataList = api.getView(detailName, viewName);\n    return detailsHasSrcObject(dataList);\n  }\n}\n\nfunction detailsHasSrcObject(dataList) {\n  if(!Array.isArray(dataList)) return false;\n  const srcObjectArr = dataList.map(item => item.srcObject).filter(item => !!item);\n  if(srcObjectArr.length) return true;\n  return false;\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "sc-disable-master-srcObject-rule-1f7b97c5-d1f6-46a0-8ea5-c24629f0a6ac/0c63aeed-c80e-4de7-a200-5ec040cda356",
      "items": [
        {
          "id": "d5a101d1-ecd7-44eb-8a2b-4462f7d46dbf",
          "description": "有来源单据时控制表头字段不可编辑",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "$fn.judgeDetailsHasSrcObject('purOrderItems', 'Initialized')"
                },
                "field": "receiptOrg"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "judgeDetailsHasSrcObject",
          "description": "判断明细行是否有来源单据",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (detailName, viewName = \"NotEmpty\", fieldName) {\n    const dataList = api.getView(detailName, viewName);\n    return detailsHasSrcObject(dataList);\n  }\n}\n\nfunction detailsHasSrcObject(dataList) {\n  if(!Array.isArray(dataList)) return false;\n  const srcObjectArr = dataList.map(item => item.srcObject).filter(item => !!item);\n  if(srcObjectArr.length) return true;\n  return false;\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "sc-disable-master-srcObject-rule-9ae37d89-af2a-40ad-a391-20e8240f7027/0c63aeed-c80e-4de7-a200-5ec040cda356",
      "items": [
        {
          "id": "d5a101d1-ecd7-44eb-8a2b-4462f7d46dbf",
          "description": "有来源单据时控制表头字段不可编辑",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "$fn.judgeDetailsHasSrcObject('purOrderItems', 'Initialized')"
                },
                "field": "settleOrg"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "judgeDetailsHasSrcObject",
          "description": "判断明细行是否有来源单据",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (detailName, viewName = \"NotEmpty\", fieldName) {\n    const dataList = api.getView(detailName, viewName);\n    return detailsHasSrcObject(dataList);\n  }\n}\n\nfunction detailsHasSrcObject(dataList) {\n  if(!Array.isArray(dataList)) return false;\n  const srcObjectArr = dataList.map(item => item.srcObject).filter(item => !!item);\n  if(srcObjectArr.length) return true;\n  return false;\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8",
      "items": [
        {
          "id": "e491aee0-45f1-4409-90a8-1306ae14b5f7",
          "description": "付款计划明细数据过滤规则",
          "reference": "purOrderSettlementItems",
          "actions": [
            {
              "name": "ReactiveCriteria",
              "description": "付款计划-结算组织-筛选范围为订单明细已选结算组织",
              "params": {
                "field": "settleOrg",
                "fragments": [
                  {
                    "bindVars": {
                      "settleOrgIds": "$fn.getPurOrderItemsSettleOrgs()"
                    },
                    "criteriaStr": "id in (:settleOrgIds)",
                    "fireImmediately": true,
                    "when": "$context.isEnabledMultiOrg"
                  }
                ]
              }
            },
            {
              "name": "ReactiveCriteria",
              "description": "付款计划-项目-筛选范围为订单明细已选项目",
              "params": {
                "field": "project",
                "fragments": [
                  {
                    "bindVars": {
                      "projectIds": "$fn.getPurOrderItemsProjectData($context.isEnabledMultiOrg,$current.settleOrg).projectIds"
                    },
                    "criteriaStr": "id in (:projectIds)",
                    "fireImmediately": true,
                    "when": "true"
                  }
                ]
              }
            },
            {
              "name": "ReactiveCriteria",
              "description": "付款计划-项目组织-筛选范围为订单明细已选项目组织",
              "params": {
                "field": "projectOrg",
                "fragments": [
                  {
                    "bindVars": {
                      "projectOrgIds": "$fn.getPurOrderItemsProjectData($context.isEnabledMultiOrg,$current.settleOrg).projectOrgIds"
                    },
                    "criteriaStr": "id in (:projectOrgIds)",
                    "fireImmediately": true,
                    "when": "$context.isEnabledMultiOrg"
                  }
                ]
              }
            },
            {
              "name": "ReactiveCriteria",
              "description": "付款计划-项目阶段-筛选范围为订单明细已选项目阶段",
              "params": {
                "field": "projectStage",
                "fragments": [
                  {
                    "bindVars": {
                      "projectStageIds": "$fn.getPurOrderItemsProjectData($context.isEnabledMultiOrg,$current.settleOrg).projectStageIds"
                    },
                    "criteriaStr": "id in (:projectStageIds)",
                    "fireImmediately": true,
                    "when": "true"
                  }
                ]
              }
            },
            {
              "name": "ReactiveCriteria",
              "description": "付款计划-付款类型-只为付款",
              "params": {
                "field": "settlementType",
                "fragments": [
                  {
                    "criteriaStr": "isPayment=true",
                    "fireImmediately": true
                  }
                ]
              }
            }
          ],
          "forbiddenImperativeTransform": true
        },
        {
          "id": "892887b1-3838-4e98-8205-4f0a2152e549",
          "description": "订单明细字段校验-过滤规则",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "Assignment",
              "description": "供应商带出币种",
              "params": {
                "autoClear": "false",
                "expr": "$root.vendor&&$root.vendor.currency? $root.vendor.currency : $fn.getLocalCurrency()",
                "field": "currency",
                "override": "true",
                "when": "$context.mode == 'Generate'"
              }
            },
            {
              "name": "ReactiveFieldValidator",
              "description": "订单明细-税率-税率需小于100%",
              "params": {
                "effect": {
                  "fireImmediately": true,
                  "isStruct": true,
                  "name": "max",
                  "params": {
                    "includeEquals": false,
                    "max": 1,
                    "message": "税率需小于100%"
                  }
                },
                "field": "taxRate"
              }
            },
            {
              "name": "ReactiveCriteria",
              "description": "存货过滤-供应商供货控制",
              "params": {
                "field": "product",
                "fragments": [
                  {
                    "bindVars": {
                      "createdOrgId": "$root.createdOrg.id",
                      "vendorId": "$root.vendor.id"
                    },
                    "criteriaStr": "(isOrgEnforcedVenProduct=false or isOrgEnforcedVenProduct is null)  or id in (select productId from VenProduct where vendorId = :vendorId and createdOrgId=:createdOrgId)",
                    "fireImmediately": true,
                    "join": "And",
                    "when": "$root.vendor"
                  },
                  {
                    "criteriaStr": "isPurchase=true and isFixedAsset!=true and isIntangibleAsset!=true",
                    "fireImmediately": true,
                    "join": "And",
                    "when": "true"
                  }
                ]
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getInvOrgOwnerFinancialOrg($root.receiptOrg&&$root.receiptOrg.id)",
                "field": "invAccountingOrg",
                "override": "true",
                "when": "!$current.srcObject&&$context.scenario!=='BatchInsert'&&!$current.invAccountingOrg&&(!$current.product|| $current.product.productStandardType.id === 'ProductStandardType.quantity'&&!$current.product.isCost &&!$current.product.isService)"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getProOrgOwnerFinancialOrg($root.projectOrg&&$root.projectOrg.id)",
                "field": "invAccountingOrg",
                "override": "true",
                "when": "!$current.srcObject&&($context.scenario!=='BatchInsert'&&$root.projectOrg&&!$current.invAccountingOrg)&&(!$current.product&&!$root.receiptOrg|| $current.product.isCost || $current.product.isService ||$current.product.productStandardType.id === 'ProductStandardType.amount')"
              }
            }
          ]
        },
        {
          "id": "141d6d72-d85c-46d2-b398-c8f1e6865448",
          "description": "标的为赠品时单价金额只读",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "description": "数量型存货赠品行才允许编辑",
              "params": {
                "effects": [
                  {
                    "expr": "true",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "!$current.product || !$current.product.productStandardType ||  $current.product.productStandardType.id !== 'ProductStandardType.quantity'"
                  }
                ],
                "field": "isFreeGift"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.isFreeGift==true",
                    "fireImmediately": true,
                    "status": "Readonly"
                  }
                ],
                "field": "originPriceWithoutTax"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.isFreeGift==true",
                    "fireImmediately": true,
                    "status": "Readonly"
                  }
                ],
                "field": "originPrice"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.isFreeGift==true",
                    "fireImmediately": true,
                    "status": "Readonly"
                  }
                ],
                "field": "originTaxAmount"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.isFreeGift==true",
                    "fireImmediately": true,
                    "status": "Readonly"
                  }
                ],
                "field": "originAmountWithoutTax"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.isFreeGift==true",
                    "fireImmediately": true,
                    "status": "Readonly"
                  }
                ],
                "field": "originAmount"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.isFreeGift==true",
                    "fireImmediately": true,
                    "status": "Readonly"
                  }
                ],
                "field": "taxAmount"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.isFreeGift==true",
                    "fireImmediately": true,
                    "status": "Readonly"
                  }
                ],
                "field": "priceWithoutTax"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.isFreeGift==true",
                    "fireImmediately": true,
                    "status": "Readonly"
                  }
                ],
                "field": "price"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.isFreeGift==true",
                    "fireImmediately": true,
                    "status": "Readonly"
                  }
                ],
                "field": "amountWithoutTax"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.isFreeGift==true",
                    "fireImmediately": true,
                    "status": "Readonly"
                  }
                ],
                "field": "amount"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.isFreeGift==true",
                    "fireImmediately": true,
                    "status": "Readonly"
                  }
                ],
                "field": "originBasePrice"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.isFreeGift==true",
                    "fireImmediately": true,
                    "status": "Readonly"
                  }
                ],
                "field": "basePriceWithoutTax"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.isFreeGift==true",
                    "fireImmediately": true,
                    "status": "Readonly"
                  }
                ],
                "field": "basePrice"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.isFreeGift==true",
                    "fireImmediately": true,
                    "status": "Readonly"
                  }
                ],
                "field": "originBasePriceWithoutTax"
              }
            }
          ]
        },
        {
          "id": "0a4fed3e-04a5-48f8-9308-9e00113aa034",
          "description": "变更原因过滤",
          "actions": [
            {
              "name": "ReactiveCriteria",
              "params": {
                "field": "changeBizReason",
                "fragments": [
                  {
                    "criteriaStr": "objectBizActions.objectBizAction.objectType='PurOrder' and objectBizActions.objectBizAction.actionId='change'",
                    "fireImmediately": true,
                    "when": "$root.isChangeBill"
                  }
                ]
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "变更日期在变更单中必填，非变更单中只读",
              "params": {
                "effects": [
                  {
                    "expr": "true",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "!$root.isChangeBill"
                  },
                  {
                    "expr": "true",
                    "fireImmediately": true,
                    "status": "Required",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "changeDate"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "变更原因在变更单中必填，非变更单中只读",
              "params": {
                "effects": [
                  {
                    "expr": "true",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "!$root.isChangeBill"
                  },
                  {
                    "expr": "true",
                    "fireImmediately": true,
                    "status": "Required",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "changeBizReason"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "变更描述在非变更单中只读",
              "params": {
                "effects": [
                  {
                    "expr": "true",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "!$root.isChangeBill"
                  }
                ],
                "field": "changeDescription"
              }
            }
          ]
        },
        {
          "id": "7ad9b87b-0f5e-4b50-b63a-96d110228874",
          "description": "变更单变更日期默认等于业务日期",
          "actions": [
            {
              "name": "ReactiveAssignment",
              "description": "变更日期默认等于业务日期",
              "params": {
                "effects": [
                  {
                    "expr": "$fn.getSystemBusinessDateTime()",
                    "fireImmediately": true,
                    "when": "$context.mode ==='Create' && $root.isChangeBill"
                  }
                ],
                "field": "changeDate"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        },
        {
          "id": "d9e2f42e-961a-4b53-945a-3f71be596ee0",
          "description": "单位存货过滤规则存货",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveCriteria",
              "params": {
                "field": "baseUnit",
                "fragments": [
                  {
                    "autoClear": true,
                    "bindVars": {
                      "productId": "$current.product.id"
                    },
                    "criteriaStr": "id in (select unitId from UnitGroupItem where unitGroupId in(select baseUnitGroup from Product where id=:productId ))",
                    "fireImmediately": true,
                    "when": "$current.product"
                  }
                ]
              }
            },
            {
              "name": "ReactiveCriteria",
              "params": {
                "field": "transUnit",
                "fragments": [
                  {
                    "autoClear": true,
                    "bindVars": {
                      "productId": "$current.product.id"
                    },
                    "criteriaStr": "id in (select unitId from UnitGroupItem where unitGroupId in(select baseUnitGroup from Product where id=:productId union select auxUnitGroup from Product where id=:productId ))",
                    "fireImmediately": true,
                    "when": "$current.product"
                  }
                ]
              }
            },
            {
              "name": "ReactiveCriteria",
              "params": {
                "field": "auxUnit",
                "fragments": [
                  {
                    "autoClear": true,
                    "bindVars": {
                      "productId": "$current.product.id"
                    },
                    "criteriaStr": "id in (select unitId from UnitGroupItem where unitGroupId in(select auxUnitGroup from Product where id=:productId ))",
                    "fireImmediately": true,
                    "when": "$current.product"
                  }
                ]
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "未启用多计量主单位换算率只读",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "!$current.product.isMultiUnit"
                },
                "field": "baseAuxToBaseRate"
              }
            }
          ]
        },
        {
          "id": "be3a9342-7ea5-458e-a203-a915a36d3a3b",
          "description": "金额型存货字段控制",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.product && $current.product.productStandardType.id === 'ProductStandardType.amount'",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$context.mode !=='View'"
                  }
                ],
                "field": "priceWithoutTax"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.product && $current.product.productStandardType.id === 'ProductStandardType.amount'",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$context.mode !=='View'"
                  }
                ],
                "field": "price"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.product && $current.product.productStandardType.id === 'ProductStandardType.amount'",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$context.mode !=='View'"
                  }
                ],
                "field": "originPriceWithoutTax"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.product && $current.product.productStandardType.id === 'ProductStandardType.amount'",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$context.mode !=='View'"
                  }
                ],
                "field": "originBasePrice"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.product && $current.product.productStandardType.id === 'ProductStandardType.amount'",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$context.mode !=='View'"
                  }
                ],
                "field": "basePriceWithoutTax"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.product && $current.product.productStandardType.id === 'ProductStandardType.amount'",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$context.mode !=='View'"
                  }
                ],
                "field": "basePrice"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.product && $current.product.productStandardType.id === 'ProductStandardType.amount'",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$context.mode !=='View'"
                  }
                ],
                "field": "originPrice"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.product && $current.product.productStandardType.id === 'ProductStandardType.amount'",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$context.mode !=='View'"
                  }
                ],
                "field": "originBasePriceWithoutTax"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.product && $current.product.productStandardType.id === 'ProductStandardType.amount'",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$context.mode !=='View'"
                  }
                ],
                "field": "receiptOrg"
              }
            },
            {
              "name": "ReactiveFieldValidator",
              "description": "订单明细-金额型存货-原币价税合计必须大于0",
              "params": {
                "effect": {
                  "fireImmediately": true,
                  "name": "min",
                  "params": {
                    "includeEquals": false,
                    "message": "金额型存货原币价税合计应大于0",
                    "min": 0
                  },
                  "when": "$current.product && $current.product.productStandardType.id === 'ProductStandardType.amount'"
                },
                "field": "originAmount"
              }
            }
          ]
        },
        {
          "id": "13528c80-3fc9-4b7a-8096-3bdccfdba08f",
          "description": "结算供应商变更带入银行信息",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.settleVendor"
            }
          ],
          "conditions": [
            {
              "if": "true"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "autoClear": "true",
                "expr": "$current.settleVendor&&$current.settleVendor.defaultBankAccount",
                "field": "settlePartyBankAccount",
                "override": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "autoClear": "true",
                "expr": "$current.settleVendor&&$current.settleVendor.settlementMethod",
                "field": "settlementMethod",
                "override": "true",
                "when": "!$current.settlementMethod.$disabled"
              }
            }
          ]
        },
        {
          "id": "38b20ce9-15d0-4d08-b744-a8feeada05b0",
          "description": "存货严格执行价表时，明细行单价金额禁用",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "description": "存货严格执行供应商价表禁用：原币无税单价(采购单位) ",
              "params": {
                "effects": [
                  {
                    "expr": "$current.product &&($current.product.isGlobalEnforcedVenPrice||$current.product.isOrgEnforcedVenPrice)",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "true"
                  }
                ],
                "field": "originPriceWithoutTax"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "存货严格执行供应商价表禁用：原币含税单价(主单位)",
              "params": {
                "effects": [
                  {
                    "expr": "$current.product &&($current.product.isGlobalEnforcedVenPrice||$current.product.isOrgEnforcedVenPrice)",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "true"
                  }
                ],
                "field": "originBasePrice"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "存货严格执行供应商价表禁用：原币含税单价(采购单位) ",
              "params": {
                "effects": [
                  {
                    "expr": "$current.product &&($current.product.isGlobalEnforcedVenPrice||$current.product.isOrgEnforcedVenPrice)",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "true"
                  }
                ],
                "field": "originPrice"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "存货严格执行供应商价表禁用：原币单价(主单位)",
              "params": {
                "effects": [
                  {
                    "expr": "$current.product &&($current.product.isGlobalEnforcedVenPrice||$current.product.isOrgEnforcedVenPrice)",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "true"
                  }
                ],
                "field": "originBasePriceWithoutTax"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "存货严格执行供应商价表禁用：原币无税金额 ",
              "params": {
                "effects": [
                  {
                    "expr": "$current.product &&($current.product.isGlobalEnforcedVenPrice||$current.product.isOrgEnforcedVenPrice)",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "true"
                  }
                ],
                "field": "originAmountWithoutTax"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "存货严格执行供应商价表禁用：原币价税合计 ",
              "params": {
                "effects": [
                  {
                    "expr": "$current.product &&($current.product.isGlobalEnforcedVenPrice||$current.product.isOrgEnforcedVenPrice)",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "true"
                  }
                ],
                "field": "originAmount"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "存货严格执行供应商价表禁用：原币税额 ",
              "params": {
                "effects": [
                  {
                    "expr": "$current.product &&($current.product.isGlobalEnforcedVenPrice||$current.product.isOrgEnforcedVenPrice)",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "true"
                  }
                ],
                "field": "originTaxAmount"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "存货严格执行供应商价表禁用：原币税额 ",
              "params": {
                "effects": [
                  {
                    "expr": "$current.product &&($current.product.isGlobalEnforcedVenPrice||$current.product.isOrgEnforcedVenPrice)",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "true"
                  }
                ],
                "field": "taxRate"
              }
            }
          ]
        },
        {
          "id": "f44d07ac-9685-496c-a30e-6d092c421a07",
          "description": "数量型存货且为非费用型存货收货组织必填",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "$current.product && $current.product.productStandardType.id === 'ProductStandardType.quantity'&&!$current.product.isCost &&!$current.product.isService",
                    "fireImmediately": true,
                    "status": "Required",
                    "when": "$context.isEnabledMultiOrg"
                  }
                ],
                "field": "receiptOrg"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effects": [
                  {
                    "expr": "!$current.product||$current.product.isCost||$current.product.isService",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$context.isEnabledMultiOrg"
                  }
                ],
                "field": "receiptOrg"
              }
            }
          ]
        },
        {
          "id": "a38146c4-8c80-4f4e-874f-a2808758fcbc",
          "description": "需求组织控制规则处理",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "Assignment",
              "description": "无来源单据，手动新增时需求组织带入有库存职能的采购组织",
              "params": {
                "autoClear": false,
                "expr": "$root.createdOrg",
                "field": "demandOrg",
                "override": false,
                "when": "!$current.srcObject&&$root.createdOrg&&$root.createdOrg.isInventoryOrg"
              }
            }
          ]
        },
        {
          "id": "397226d3-11a4-4904-9ff4-b0fa7b384d58",
          "description": "生单时结算供应商代入供应商默认结算供应商",
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$root.vendor&&$root.vendor.settleVendor? $root.vendor.settleVendor: $root.vendor",
                "field": "settleVendor",
                "override": true,
                "when": "$context.mode == 'Generate'"
              }
            },
            {
              "name": "Assignment",
              "description": "供应商带出币种",
              "params": {
                "autoClear": "false",
                "expr": "$root.vendor&&$root.vendor.currency? $root.vendor.currency : $fn.getLocalCurrency()",
                "field": "currency",
                "override": "true",
                "when": "$context.mode == 'Generate'"
              }
            }
          ]
        },
        {
          "id": "be40fe0b-cccd-44c7-be7c-081226c7e653",
          "description": "主单位单价计算-锁定金额数量",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Automation"
            }
          ],
          "conditions": [
            {
              "if": "!$current.coCalcBaseHigh"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.setBitFlagConst($fn.setBitFlagConst($current.coCalcBaseHigh, 'LOCK_HIGH_AMOUNT', 'LOCK_HIGH_SEG_OFFSET'), 'LOCK_HIGH_QTY', 'LOCK_HIGH_SEG_OFFSET')",
                "field": "coCalcBaseHigh"
              }
            }
          ]
        },
        {
          "id": "860c6a00-5d28-4783-8a56-9f30d51e0b36",
          "description": "变更单付款计划行有执行数处理禁用逻辑",
          "reference": "purOrderSettlementItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "description": "计划行有执行量禁用项目",
              "params": {
                "effects": [
                  {
                    "expr": "$current.execPaymentItemCount || $current.execPaymentAppItemCount",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "project"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "计划行有执行量禁用项目组织",
              "params": {
                "effects": [
                  {
                    "expr": "$current.execPaymentItemCount || $current.execPaymentAppItemCount",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "projectOrg"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "计划行有执行量禁用项目组阶段",
              "params": {
                "effects": [
                  {
                    "expr": "$current.execPaymentItemCount || $current.execPaymentAppItemCount",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "projectStage"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "计划行有执行量禁用结算组织",
              "params": {
                "effects": [
                  {
                    "expr": "$current.execPaymentItemCount || $current.execPaymentAppItemCount",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "settleOrg"
              }
            }
          ]
        },
        {
          "id": "2b556f9e-6126-4ab3-991b-b7d07e5330f9",
          "description": "变更单订单整单有执行数时禁用相关字段",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "description": "计划行有执行量禁用项目组阶段",
              "params": {
                "effects": [
                  {
                    "expr": "$root.orderItemExecCount || $root.orderSettlementItemExecCount",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "projectStage"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "计划行有执行量禁用项目组织",
              "params": {
                "effects": [
                  {
                    "expr": "$root.orderItemExecCount || $root.orderSettlementItemExecCount",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "projectOrg"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "计划行有执行量禁用项目",
              "params": {
                "effects": [
                  {
                    "expr": "$root.orderItemExecCount || $root.orderSettlementItemExecCount",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "project"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "计划行有执行量禁用供应商",
              "params": {
                "effects": [
                  {
                    "expr": "true",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "vendor"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "计划行有执行量禁用结算供应商",
              "params": {
                "effects": [
                  {
                    "expr": "$root.orderItemExecCount || $root.orderSettlementItemExecCount",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "settleVendor"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "计划行有执行量禁用币种",
              "params": {
                "effects": [
                  {
                    "expr": "true",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "currency"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "计划行有执行量禁用结算组织",
              "params": {
                "effects": [
                  {
                    "expr": "$root.orderItemExecCount || $root.orderSettlementItemExecCount",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "settleOrg"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "计划行有执行量禁用收货组织",
              "params": {
                "effects": [
                  {
                    "expr": "$root.orderItemExecCount || $root.orderSettlementItemExecCount",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "receiptOrg"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "计划行有执行量禁用计划到货日期",
              "params": {
                "effects": [
                  {
                    "expr": "$root.orderItemExecCount || $root.orderSettlementItemExecCount",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "planArrivalDate"
              }
            }
          ]
        },
        {
          "id": "aca5e472-fb7b-4380-b5f4-390412934370",
          "description": "变更单订单标的有执行数时禁用字段",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "description": "计划行有执行量禁用税率",
              "params": {
                "effects": [
                  {
                    "expr": "$current.execReceiptItemCount || $current.execInvoiceItemCount",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "taxRate"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "计划行有执行量禁用辅单位",
              "params": {
                "effects": [
                  {
                    "expr": "$current.execReceiptItemCount || $current.execInvoiceItemCount",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "auxUnit"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "计划行有执行量禁用采购单位",
              "params": {
                "effects": [
                  {
                    "expr": "$current.execReceiptItemCount || $current.execInvoiceItemCount",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "transUnit"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "计划行有执行量禁用采购单位",
              "params": {
                "effects": [
                  {
                    "expr": "$current.execReceiptItemCount || $current.execInvoiceItemCount",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "product"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "计划行有执行量禁用收货组织",
              "params": {
                "effects": [
                  {
                    "expr": "$current.execReceiptItemCount || $current.execInvoiceItemCount",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "receiptOrg"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "计划行有执行量禁用结算组织",
              "params": {
                "effects": [
                  {
                    "expr": "$current.execReceiptItemCount || $current.execInvoiceItemCount",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "settleOrg"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "计划行有执行量禁用赠品",
              "params": {
                "effects": [
                  {
                    "expr": "$current.execReceiptItemCount || $current.execInvoiceItemCount",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "isFreeGift"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "计划行有执行量禁用项目",
              "params": {
                "effects": [
                  {
                    "expr": "$current.execReceiptItemCount || $current.execInvoiceItemCount",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "project"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "计划行有执行量禁用项目组织",
              "params": {
                "effects": [
                  {
                    "expr": "$current.execReceiptItemCount || $current.execInvoiceItemCount",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "projectOrg"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "计划行有执行量禁用项目阶段",
              "params": {
                "effects": [
                  {
                    "expr": "$current.execReceiptItemCount || $current.execInvoiceItemCount",
                    "fireImmediately": true,
                    "status": "Readonly",
                    "when": "$root.isChangeBill"
                  }
                ],
                "field": "projectStage"
              }
            }
          ]
        },
        {
          "id": "cc2d58d0-7c9a-4051-a256-3ea1f15403b6",
          "description": "存货为金额型,服务或者费用型存货时清空核算组织和收货组织",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.product"
            }
          ],
          "conditions": [
            {
              "if": "$context.scenario!=='BatchInsert'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getInvOrgOwnerFinancialOrg($current.receiptOrg&&$current.receiptOrg.id)",
                "field": "invAccountingOrg",
                "fireImmediately": true,
                "override": true,
                "when": "!$current.srcObject&&$context.isEnabledMultiOrg === true&&$current.product &&  ($current.product.productStandardType.id === 'ProductStandardType.quantity'&& !$current.product.isCost &&!$current.product.isService)"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getProOrgOwnerFinancialOrg($current.projectOrg.id)",
                "field": "invAccountingOrg",
                "fireImmediately": true,
                "override": true,
                "when": "!$current.srcObject&&$context.isEnabledMultiOrg === true &&$current.product &&  ($current.product.productStandardType.id === 'ProductStandardType.amount'|| $current.product.isCost ||$current.product.isService)"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "undefined",
                "field": "receiptOrg",
                "fireImmediately": true,
                "override": true,
                "when": "!$current.srcObject&&$context.isEnabledMultiOrg === true&&$current.product &&  ($current.product.productStandardType.id === 'ProductStandardType.amount'||$current.product.isCost ||$current.product.isService)"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        },
        {
          "id": "a7c72dbd-d0ee-40d2-9491-7f0d9e5d2295",
          "description": "主表受结算供应商过滤控制的字段",
          "actions": [
            {
              "name": "ReactiveCriteria",
              "params": {
                "field": "settlePartyBankAccount",
                "fragment": {
                  "bindVars": {
                    "settleVendorId": "$current.settleVendor&&$current.settleVendor.id"
                  },
                  "criteriaStr": "objectVendor.id= :settleVendorId",
                  "fireImmediately": true,
                  "when": "$current.settleVendor"
                }
              }
            },
            {
              "name": "ReactiveCriteria",
              "description": "联系人按供应商过滤",
              "params": {
                "field": "contact",
                "fragment": {
                  "bindVars": {
                    "vendorId": "$current.vendor&&$current.vendor.id"
                  },
                  "criteriaStr": "objectVendor.id= :vendorId",
                  "fireImmediately": true,
                  "when": "$current.vendor"
                }
              }
            }
          ]
        },
        {
          "id": "e993b75b-75c3-4eba-8bfe-86fcbb30e734",
          "description": "供应商变更带入其他字段默认值",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.vendor"
            }
          ],
          "conditions": [
            {
              "if": "true"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "供应商变更带出地址",
              "params": {
                "autoClear": "true",
                "expr": "$current.vendor&&$current.vendor.address",
                "field": "address",
                "override": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "供应商变更带出联系方式",
              "params": {
                "autoClear": "true",
                "expr": "$current.vendor&&$current.vendor.primaryContact",
                "field": "contact",
                "override": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "供应商变更带出部门",
              "params": {
                "autoClear": "true",
                "expr": "$root.vendor&&$root.vendor.ownerDept",
                "field": "department",
                "override": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "供应商变更带出业务员",
              "params": {
                "autoClear": "true",
                "expr": "$root.vendor&&$root.vendor.ownerUser",
                "field": "ownerUser",
                "override": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "供应商变更带出结算供应商",
              "params": {
                "autoClear": "true",
                "expr": "$root.vendor&&$root.vendor.settleVendor ? $root.vendor.settleVendor : $root.vendor",
                "field": "settleVendor",
                "override": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "供应商变更带出币种",
              "params": {
                "autoClear": "false",
                "expr": "$root.vendor&&$root.vendor.currency? $root.vendor.currency : $fn.getLocalCurrency()",
                "field": "currency",
                "override": "true"
              }
            }
          ]
        },
        {
          "id": "d0302554-ea5d-45dd-8268-83d6119f5087",
          "description": "订单明细-收货组织变更带出核算组织-结算组织",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.receiptOrg"
            }
          ],
          "conditions": [
            {
              "if": "($current.receiptOrg.$focused||$current.settleOrg.$focused)&&$context.scenario!='BatchInsert'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "autoClear": "true",
                "expr": "$fn.hasPartyDelegateRelationship($root.createdOrg,$fn.getInvOrgOwnerFinancialOrg($current.receiptOrg&&$current.receiptOrg.id),'PurchaseAccountingDelegateRelationship')",
                "field": "settleOrg",
                "override": "true",
                "when": "!$current.settleOrg.$disabled&&!$current.settleOrg.$focused"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "autoClear": "true",
                "expr": "$fn.getInvOrgOwnerFinancialOrg($current.receiptOrg&&$current.receiptOrg.id)",
                "field": "invAccountingOrg",
                "override": "true",
                "when": "!$current.srcObject&&(!$current.product&&!$current.receiptOrg||$current.product.productStandardType.id === 'ProductStandardType.quantity'&&!$current.product.isCost&&!$current.product.isService)"
              }
            }
          ]
        },
        {
          "id": "f5edbfe7-eed2-4f99-8933-fc5d7facc4e8",
          "description": "订单明细-结算组织变更带出收货组织-核算组织",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.settleOrg"
            }
          ],
          "conditions": [
            {
              "if": "$current.settleOrg.$focused &&$context.isEnabledMultiOrg === true"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "autoClear": "true",
                "expr": "$fn.hasPartyDelegateRelationship($root.createdOrg,$current.settleOrg&&$current.settleOrg.isInventoryOrg&&$current.settleOrg,'InventoryPurchaseDelegateRelationship')",
                "field": "receiptOrg",
                "override": "true",
                "when": " (!$current.product||!$current.receiptOrg.$disabled && $current.product && ($current.product.productStandardType.id === 'ProductStandardType.quantity' &&!$current.product.isCost &&!$current.product.isService))"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "autoClear": "true",
                "expr": "undefined",
                "field": "receiptOrg",
                "override": "true",
                "when": "!$current.settleOrg"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "undefined",
                "field": "invAccountingOrg",
                "fireImmediately": true,
                "override": true,
                "when": "!$current.srcObject&&!$current.receiptOrg &&!$current.projectOrg"
              }
            }
          ]
        },
        {
          "id": "217c6ef9-5c54-474a-b2a9-f78ed37f9074",
          "description": "订单明细-项目组织变更带入项目组织录属财务组织到结算组织-核算组织",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.projectOrg"
            }
          ],
          "conditions": [
            {
              "if": "$current.projectOrg.$focused || $current.project.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "autoClear": "true",
                "expr": "$fn.getProOrgOwnerFinancialOrg($current.projectOrg&&$current.projectOrg.id)",
                "field": "invAccountingOrg",
                "override": "true",
                "when": "!$current.srcObject&&(!current.product&&!$current.receiptOrg||$current.product.productStandardType.id === 'ProductStandardType.amount'|| $current.product.isCost ||$current.product.isService)"
              }
            }
          ]
        },
        {
          "id": "11c81c69-c422-44d7-8758-581848430b1d",
          "description": "供应商按存货供应商供货控制过滤",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "effects": [
                  {
                    "fireImmediately": true,
                    "props": {
                      "criteriaStr": "$fn.getVendorsFromVenProduct($root.createdOrg&&$root.createdOrg.id,$context.isEnabledMultiOrg)"
                    },
                    "when": "$current.vendor.$focused"
                  }
                ],
                "field": "vendor"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "getPurOrderItemsSettleOrgs",
          "description": "获取采购订单明细中的结算组织集合",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return  function (params) {\n    const purOrderItemsList =  api.getView('purOrderItems', 'Initialized').filter(item => item.settleOrg && !item.isFreeGift && item.product)\n    const purOrderItemsSettleOrgs = {}\n    purOrderItemsList.map(item=>{\n      const settleOrgId = item.settleOrg.id\n      if(!purOrderItemsSettleOrgs[settleOrgId]){\n        purOrderItemsSettleOrgs[settleOrgId] = settleOrgId\n      }\n    })\n   return Object.keys(purOrderItemsSettleOrgs).length ? Object.keys(purOrderItemsSettleOrgs):  ['undefined']\n  }\n}",
          "declare": "(params: any) => any"
        },
        {
          "name": "getPurOrderItemsProjectData",
          "description": "获取订单明细项目相关信息",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (isEnabledMultiOrg, settleOrg) {\n    const purOrderItemsList =  api.getView('purOrderItems', 'Initialized').filter(item => item.project )\n    const projectObj = {}\n    const projectOrgObj  = {}\n    const projectStageObj = {}\n    purOrderItemsList.map(item=>{\n      const projectId =item.project? item.project.id: ''\n      const projectOrgId =isEnabledMultiOrg&& item.projectOrg ? item.projectOrg.id : ''\n      const projectStageId=item.projectStage ? item.projectStage.id: ''\n      const ItemsSettleOrgId = isEnabledMultiOrg&&item.settleOrg ? item.settleOrg.id: ''\n      const settlementSettleOrgId = isEnabledMultiOrg&&settleOrg ? settleOrg.id : ''\n      if(projectId && !projectObj[projectId] && ItemsSettleOrgId===settlementSettleOrgId){\n        projectObj[projectId] = projectId\n      }\n      if( projectOrgId&&isEnabledMultiOrg&&!projectOrgObj[projectOrgId] && ItemsSettleOrgId===settlementSettleOrgId ){\n        projectOrgObj[projectOrgId] = projectOrgId\n      }\n      if(projectStageId&&!projectStageObj[projectStageId] && ItemsSettleOrgId===settlementSettleOrgId){\n        projectStageObj[projectStageId] = projectStageId\n      }\n    })\n    const projectIds=Object.keys(projectObj).length ? Object.keys(projectObj):  ['undefined']\n    const projectOrgIds=Object.keys(projectOrgObj).length ? Object.keys(projectOrgObj):  ['undefined']\n    const projectStageIds=Object.keys(projectStageObj).length ? Object.keys(projectStageObj):  ['undefined']\n   return {\n     projectIds,\n     projectOrgIds,\n     projectStageIds\n   }\n  }\n}",
          "declare": "(params: any) => any"
        },
        {
          "name": "getVendorsFromVenProduct",
          "description": "获取供应商集从供应商供货清单中",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (createdOrgId, isEnabledMultiOrg) {\n    const productList =  api.getView('purOrderItems', 'Initialized').filter(item => item.product && item.product.isOrgEnforcedVenProduct ).map(item=>item.product.id)\n    const productIdList = [...new Set(productList)] \n  if(productIdList.length){\n      const strs=  productIdList.map(id=>\"(select vendorId from VenProduct where productId='\"+id+\"' )\").join(\" intersect \")\n      const strsOrg=  productIdList.map(id=>\"(select vendorId from VenProduct where productId='\"+id+\"'  and createdOrgId='\"+createdOrgId+\"')\").join(\" intersect \")\n\n      if(isEnabledMultiOrg&&!createdOrgId) return '';\n      return   isEnabledMultiOrg ? \" id in (\" + strsOrg + \")\": \" id in (\" + strs + \")\";\n    }\n    return ''\n  }\n}",
          "declare": "(params: any) => any"
        },
        {
          "name": "needClearProjectStage",
          "description": "项目跟项目阶段的项目是否匹配",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (projectStage, project) {\n    if(!projectStage){\n      return false;\n    }\n    if(!project){\n      return true;\n    }\n    return projectStage.project.id !== project.id\n  }\n}",
          "declare": "(params: any) => any"
        },
        {
          "name": "queryProjectOrgDefault",
          "description": "项目组织默认值",
          "value": "/**\n * @export\n * @param {API} api\n * @return {(params: any) => any}\n */\nexport default function (api) {\n  return async function (project, createdOrg, projectOrg, scenario, detailItemsName) {\n    const orgPromise = new Promise(res => {\n      setTimeout(async () => {\n        if(!project) {\n          res(undefined);\n        }\n        // if(scenario =='ChangeProjectAlert' ){\n        //   return projectOrg\n        // }\n\n        // 根据交付信息查询所有可用组织集合\n        const orgs = await api.queryFieldValue('projectOrg', ``);\n\n        // 单据的财务组织=项目的财务组织且项目的项目组织在交付子表中，取项目的项目组织\n        if(project.projectOrg && createdOrg.id === project.financialOrg.id){\n          if(orgs.some(org => org.id === project.projectOrg.id)) {\n            res(project.projectOrg);\n          }\n        }\n        // 项目的项目组织可选范围为一个项目组织时，携带这个项目组织\n        if(orgs.length === 1) {\n          res(orgs[0]);\n        }\n        // 如果场景值是ChangeProjectAlert\n        // 如果orgs是一个数组的话，那么就判断我还原的值是不是在orgs里\n        // 如果在就返回这个项目组织\n        if(projectOrg && scenario =='ChangeProjectAlert' ){\n          if(orgs.some(org => org.id === projectOrg.id)) {\n            res(projectOrg)\n          }\n        }\n\n        res(undefined);\n      }, 0)\n    })\n\n    orgPromise.then(res => {\n        if (detailItemsName && !res) {\n            const itemsName = detailItemsName.split(',');\n            itemsName.map(itemsName=> {\n                bizFormPresenter.api.formController.getView(itemsName).filter(item=>item.project && item.projectOrg).map(item=>item.projectOrg=res)\n            })\n        }\n    })\n    return orgPromise;\n  }\n}",
          "declare": "(params: any) => any"
        },
        {
          "name": "getDate",
          "description": "获取日期函数（参数缺省代表不做限制）",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (date) {\n    const dateTime = getDate(date)\n    return new Date(dateTime.setHours(0,0,0,0))\n  }\n}\n\nfunction getDate(date) {\n if (!date) {\n      return new Date('1970')\n    }\n    if (date instanceof Date) {\n      return date\n    }\n\n    // 根据输入值转换为日期\n    if (date === \"now()\") {\n      date = Date.now()\n    }\n    // 根据输入值转换为日期\n    const dateObj = new Date(date)\n    // 若日期格式合法则返回转化的日期对象\n    if (dateObj.getDate() > 0) {\n      return dateObj\n    }\n    return new Date()\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/0c974e6c-0830-4294-a4d5-397f2964011a/0717fc91-043f-48b5-8add-fb1dfc185569",
      "items": [
        {
          "id": "f03c2356-709c-48f3-800a-90c8f3e5599e",
          "description": "项目过滤项目阶段",
          "actions": [
            {
              "name": "ReactiveCriteria",
              "params": {
                "field": "projectStage",
                "fragment": {
                  "bindVars": {
                    "projectId": "$current.project.id"
                  },
                  "criteriaStr": "projectId = :projectId",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "9993a8e2-46f5-437a-96c9-a7faab36ce90",
          "description": "选择项目才可以选择项目阶段",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "!$current.project"
                },
                "field": "projectStage"
              }
            }
          ]
        },
        {
          "id": "d0d5c529-d27b-4aed-8394-a84b2634a81e",
          "description": "清空项目时，同时清空阶段",
          "actions": [
            {
              "name": "ReactiveAssignment",
              "params": {
                "effect": {
                  "autoClear": true,
                  "expr": "undefined",
                  "fireImmediately": true,
                  "when": "$fn.needClearProjectStage($current.projectStage,$current.project) || !$current.project"
                },
                "field": "projectStage"
              }
            }
          ]
        },
        {
          "id": "de95ee5d-2f51-4d0e-86e7-343b0972898f",
          "description": "【项目】改变清空【项目阶段】",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.project"
            }
          ],
          "conditions": [
            {
              "if": "$fn.needClearProjectStage($current.projectStage,$current.project)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "undefined",
                "field": "projectStage"
              }
            }
          ]
        }
      ],
      "fns": [
        {
          "name": "needClearProjectStage",
          "description": "项目跟项目阶段的项目是否匹配",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (projectStage, project) {\n    if(!projectStage){\n      return false;\n    }\n    if(!project){\n      return true;\n    }\n    return projectStage.project.id !== project.id\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/d303e8bc-a549-438b-9dc2-48c5a284c638/0717fc91-043f-48b5-8add-fb1dfc185569",
      "items": [
        {
          "id": "f03c2356-709c-48f3-800a-90c8f3e5599e",
          "description": "项目过滤项目阶段",
          "reference": "purOrderSettlementItems",
          "actions": [
            {
              "name": "ReactiveCriteria",
              "params": {
                "field": "projectStage",
                "fragment": {
                  "bindVars": {
                    "projectId": "$current.project.id"
                  },
                  "criteriaStr": "projectId = :projectId",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "9993a8e2-46f5-437a-96c9-a7faab36ce90",
          "description": "选择项目才可以选择项目阶段",
          "reference": "purOrderSettlementItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "!$current.project"
                },
                "field": "projectStage"
              }
            }
          ]
        },
        {
          "id": "d0d5c529-d27b-4aed-8394-a84b2634a81e",
          "description": "清空项目时，同时清空阶段",
          "reference": "purOrderSettlementItems",
          "actions": [
            {
              "name": "ReactiveAssignment",
              "params": {
                "effect": {
                  "autoClear": true,
                  "expr": "undefined",
                  "fireImmediately": true,
                  "when": "$fn.needClearProjectStage($current.projectStage,$current.project) || !$current.project"
                },
                "field": "projectStage"
              }
            }
          ]
        },
        {
          "id": "de95ee5d-2f51-4d0e-86e7-343b0972898f",
          "description": "【项目】改变清空【项目阶段】",
          "reference": "purOrderSettlementItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.project"
            }
          ],
          "conditions": [
            {
              "if": "$fn.needClearProjectStage($current.projectStage,$current.project)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "undefined",
                "field": "projectStage"
              }
            }
          ]
        }
      ],
      "fns": [
        {
          "name": "needClearProjectStage",
          "description": "项目跟项目阶段的项目是否匹配",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (projectStage, project) {\n    if(!projectStage){\n      return false;\n    }\n    if(!project){\n      return true;\n    }\n    return projectStage.project.id !== project.id\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/a3ae9297-289d-4f82-b93a-1866d8305ebc/0717fc91-043f-48b5-8add-fb1dfc185569",
      "items": [
        {
          "id": "f03c2356-709c-48f3-800a-90c8f3e5599e",
          "description": "项目过滤项目阶段",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveCriteria",
              "params": {
                "field": "projectStage",
                "fragment": {
                  "bindVars": {
                    "projectId": "$current.project.id"
                  },
                  "criteriaStr": "projectId = :projectId",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "9993a8e2-46f5-437a-96c9-a7faab36ce90",
          "description": "选择项目才可以选择项目阶段",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "!$current.project"
                },
                "field": "projectStage"
              }
            }
          ]
        },
        {
          "id": "d0d5c529-d27b-4aed-8394-a84b2634a81e",
          "description": "清空项目时，同时清空阶段",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveAssignment",
              "params": {
                "effect": {
                  "autoClear": true,
                  "expr": "undefined",
                  "fireImmediately": true,
                  "when": "$fn.needClearProjectStage($current.projectStage,$current.project) || !$current.project"
                },
                "field": "projectStage"
              }
            }
          ]
        },
        {
          "id": "de95ee5d-2f51-4d0e-86e7-343b0972898f",
          "description": "【项目】改变清空【项目阶段】",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.project"
            }
          ],
          "conditions": [
            {
              "if": "$fn.needClearProjectStage($current.projectStage,$current.project)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "undefined",
                "field": "projectStage"
              }
            }
          ]
        }
      ],
      "fns": [
        {
          "name": "needClearProjectStage",
          "description": "项目跟项目阶段的项目是否匹配",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (projectStage, project) {\n    if(!projectStage){\n      return false;\n    }\n    if(!project){\n      return true;\n    }\n    return projectStage.project.id !== project.id\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/c57f900c-9b82-43e6-9f0a-2276a9a7e99e/f0d9e3be-1e3a-45cb-b28e-4d3e90cc52b7",
      "items": [
        {
          "id": "3d68a76f-149e-415e-ac70-9fc4ac469b91",
          "description": "无【项目】时，【项目组织】不可选。",
          "conditions": [
            {
              "if": "$context.isEnabledMultiOrg === true"
            }
          ],
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "!$current.project"
                },
                "field": "projectOrg"
              }
            },
            {
              "name": "ReactiveAssignment",
              "params": {
                "effects": [
                  {
                    "autoClear": true,
                    "expr": "undefined",
                    "fireImmediately": true,
                    "when": "!$current.project"
                  }
                ],
                "field": "projectOrg"
              }
            }
          ]
        },
        {
          "id": "5d66dc4a-de65-401b-8374-7d9326166a2a",
          "description": "去掉这个携带，携带不正确；创建组织具有项目属性，并且创建组织等于项目的财务组织，携带创建组织到项目组织上",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.project"
            }
          ],
          "conditions": [
            {
              "if": "$context.isEnabledMultiOrg === true && $current.project.$focused && $context.scenario !=='ChangeProjectAlert'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.queryProjectOrgDefault($current.project, $root.createdOrg,$current.projectOrg,$context.scenario, 'purOrderItems,purOrderSettlementItems')",
                "field": "projectOrg"
              }
            }
          ]
        },
        {
          "id": "f6d456be-a3e0-48dd-ada6-9cf8b9fd9261",
          "description": "【项目组织】可选范围为，项目-交付组织",
          "conditions": [
            {
              "if": "$context.isEnabledMultiOrg === true"
            }
          ],
          "actions": [
            {
              "name": "ReactiveCriteria",
              "params": {
                "field": "projectOrg",
                "fragment": {
                  "autoClear": true,
                  "bindVars": {
                    "pid": "$current.project.id"
                  },
                  "criteriaStr": "m.id in (select jsonb_array_elements_text(usedProjectOrgIds) from Project where id=:pid)",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "df929428-66ec-475a-821b-091ca999ddbf",
          "description": "项目组织默认携带",
          "conditions": [
            {
              "if": "false && $context.isEnabledMultiOrg === true"
            }
          ],
          "actions": [
            {
              "name": "ReactiveAssignment",
              "params": {
                "effect": {
                  "autoClear": true,
                  "expr": "$fn.queryProjectOrgDefault($current.project, $root.createdOrg)",
                  "fireImmediately": false,
                  "override": true,
                  "when": "$current.project.$focused"
                },
                "field": "projectOrg"
              }
            }
          ]
        }
      ],
      "fns": [
        {
          "name": "queryProjectOrgDefault",
          "description": "项目组织默认值",
          "value": "/**\n * @export\n * @param {API} api\n * @return {(params: any) => any}\n */\nexport default function (api) {\n  return async function (project, createdOrg, projectOrg, scenario, detailItemsName) {\n    const orgPromise = new Promise(res => {\n      setTimeout(async () => {\n        if(!project) {\n          res(undefined);\n        }\n        // if(scenario =='ChangeProjectAlert' ){\n        //   return projectOrg\n        // }\n\n        // 根据交付信息查询所有可用组织集合\n        const orgs = await api.queryFieldValue('projectOrg', ``);\n\n        // 单据的财务组织=项目的财务组织且项目的项目组织在交付子表中，取项目的项目组织\n        if(project.projectOrg && createdOrg.id === project.financialOrg.id){\n          if(orgs.some(org => org.id === project.projectOrg.id)) {\n            res(project.projectOrg);\n          }\n        }\n        // 项目的项目组织可选范围为一个项目组织时，携带这个项目组织\n        if(orgs.length === 1) {\n          res(orgs[0]);\n        }\n        // 如果场景值是ChangeProjectAlert\n        // 如果orgs是一个数组的话，那么就判断我还原的值是不是在orgs里\n        // 如果在就返回这个项目组织\n        if(projectOrg && scenario =='ChangeProjectAlert' ){\n          if(orgs.some(org => org.id === projectOrg.id)) {\n            res(projectOrg)\n          }\n        }\n\n        res(undefined);\n      }, 0)\n    })\n\n    orgPromise.then(res => {\n        if (detailItemsName && !res) {\n            const itemsName = detailItemsName.split(',');\n            itemsName.map(itemsName=> {\n                bizFormPresenter.api.formController.getView(itemsName).filter(item=>item.project && item.projectOrg).map(item=>item.projectOrg=res)\n            })\n        }\n    })\n    return orgPromise;\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/cb9910e7-1c69-4b5b-afb6-a76d68e15f9f/f0d9e3be-1e3a-45cb-b28e-4d3e90cc52b7",
      "items": [
        {
          "id": "3d68a76f-149e-415e-ac70-9fc4ac469b91",
          "description": "无【项目】时，【项目组织】不可选。",
          "reference": "purOrderItems",
          "conditions": [
            {
              "if": "$context.isEnabledMultiOrg === true"
            }
          ],
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "!$current.project"
                },
                "field": "projectOrg"
              }
            },
            {
              "name": "ReactiveAssignment",
              "params": {
                "effects": [
                  {
                    "autoClear": true,
                    "expr": "undefined",
                    "fireImmediately": true,
                    "when": "!$current.project"
                  }
                ],
                "field": "projectOrg"
              }
            }
          ]
        },
        {
          "id": "5d66dc4a-de65-401b-8374-7d9326166a2a",
          "description": "去掉这个携带，携带不正确；创建组织具有项目属性，并且创建组织等于项目的财务组织，携带创建组织到项目组织上",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.project"
            }
          ],
          "conditions": [
            {
              "if": "$context.isEnabledMultiOrg === true && $current.project.$focused && $context.scenario !=='ChangeProjectAlert'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.queryProjectOrgDefault($current.project, $root.createdOrg,$current.projectOrg,$context.scenario, '')",
                "field": "projectOrg"
              }
            }
          ]
        },
        {
          "id": "f6d456be-a3e0-48dd-ada6-9cf8b9fd9261",
          "description": "【项目组织】可选范围为，项目-交付组织",
          "reference": "purOrderItems",
          "conditions": [
            {
              "if": "$context.isEnabledMultiOrg === true"
            }
          ],
          "actions": [
            {
              "name": "ReactiveCriteria",
              "params": {
                "field": "projectOrg",
                "fragment": {
                  "autoClear": true,
                  "bindVars": {
                    "pid": "$current.project.id"
                  },
                  "criteriaStr": "m.id in (select jsonb_array_elements_text(usedProjectOrgIds) from Project where id=:pid)",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "df929428-66ec-475a-821b-091ca999ddbf",
          "description": "项目组织默认携带",
          "reference": "purOrderItems",
          "conditions": [
            {
              "if": "false && $context.isEnabledMultiOrg === true"
            }
          ],
          "actions": [
            {
              "name": "ReactiveAssignment",
              "params": {
                "effect": {
                  "autoClear": true,
                  "expr": "$fn.queryProjectOrgDefault($current.project, $root.createdOrg)",
                  "fireImmediately": false,
                  "override": true,
                  "when": "$current.project.$focused"
                },
                "field": "projectOrg"
              }
            }
          ]
        }
      ],
      "fns": [
        {
          "name": "queryProjectOrgDefault",
          "description": "项目组织默认值",
          "value": "/**\n * @export\n * @param {API} api\n * @return {(params: any) => any}\n */\nexport default function (api) {\n  return async function (project, createdOrg, projectOrg, scenario, detailItemsName) {\n    const orgPromise = new Promise(res => {\n      setTimeout(async () => {\n        if(!project) {\n          res(undefined);\n        }\n        // if(scenario =='ChangeProjectAlert' ){\n        //   return projectOrg\n        // }\n\n        // 根据交付信息查询所有可用组织集合\n        const orgs = await api.queryFieldValue('projectOrg', ``);\n\n        // 单据的财务组织=项目的财务组织且项目的项目组织在交付子表中，取项目的项目组织\n        if(project.projectOrg && createdOrg.id === project.financialOrg.id){\n          if(orgs.some(org => org.id === project.projectOrg.id)) {\n            res(project.projectOrg);\n          }\n        }\n        // 项目的项目组织可选范围为一个项目组织时，携带这个项目组织\n        if(orgs.length === 1) {\n          res(orgs[0]);\n        }\n        // 如果场景值是ChangeProjectAlert\n        // 如果orgs是一个数组的话，那么就判断我还原的值是不是在orgs里\n        // 如果在就返回这个项目组织\n        if(projectOrg && scenario =='ChangeProjectAlert' ){\n          if(orgs.some(org => org.id === projectOrg.id)) {\n            res(projectOrg)\n          }\n        }\n\n        res(undefined);\n      }, 0)\n    })\n\n    orgPromise.then(res => {\n        if (detailItemsName && !res) {\n            const itemsName = detailItemsName.split(',');\n            itemsName.map(itemsName=> {\n                bizFormPresenter.api.formController.getView(itemsName).filter(item=>item.project && item.projectOrg).map(item=>item.projectOrg=res)\n            })\n        }\n    })\n    return orgPromise;\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/ecbe7d11-9b39-4e25-9b4c-9562e50f0d88/f0d9e3be-1e3a-45cb-b28e-4d3e90cc52b7",
      "items": [
        {
          "id": "3d68a76f-149e-415e-ac70-9fc4ac469b91",
          "description": "无【项目】时，【项目组织】不可选。",
          "reference": "purOrderSettlementItems",
          "conditions": [
            {
              "if": "$context.isEnabledMultiOrg === true"
            }
          ],
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "!$current.project"
                },
                "field": "projectOrg"
              }
            },
            {
              "name": "ReactiveAssignment",
              "params": {
                "effects": [
                  {
                    "autoClear": true,
                    "expr": "undefined",
                    "fireImmediately": true,
                    "when": "!$current.project"
                  }
                ],
                "field": "projectOrg"
              }
            }
          ]
        },
        {
          "id": "5d66dc4a-de65-401b-8374-7d9326166a2a",
          "description": "去掉这个携带，携带不正确；创建组织具有项目属性，并且创建组织等于项目的财务组织，携带创建组织到项目组织上",
          "reference": "purOrderSettlementItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.project"
            }
          ],
          "conditions": [
            {
              "if": "$context.isEnabledMultiOrg === true && $current.project.$focused && $context.scenario !=='ChangeProjectAlert'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.queryProjectOrgDefault($current.project, $root.createdOrg,$current.projectOrg,$context.scenario, '')",
                "field": "projectOrg"
              }
            }
          ]
        },
        {
          "id": "f6d456be-a3e0-48dd-ada6-9cf8b9fd9261",
          "description": "【项目组织】可选范围为，项目-交付组织",
          "reference": "purOrderSettlementItems",
          "conditions": [
            {
              "if": "$context.isEnabledMultiOrg === true"
            }
          ],
          "actions": [
            {
              "name": "ReactiveCriteria",
              "params": {
                "field": "projectOrg",
                "fragment": {
                  "autoClear": true,
                  "bindVars": {
                    "pid": "$current.project.id"
                  },
                  "criteriaStr": "m.id in (select jsonb_array_elements_text(usedProjectOrgIds) from Project where id=:pid)",
                  "fireImmediately": true
                }
              }
            }
          ]
        },
        {
          "id": "df929428-66ec-475a-821b-091ca999ddbf",
          "description": "项目组织默认携带",
          "reference": "purOrderSettlementItems",
          "conditions": [
            {
              "if": "false && $context.isEnabledMultiOrg === true"
            }
          ],
          "actions": [
            {
              "name": "ReactiveAssignment",
              "params": {
                "effect": {
                  "autoClear": true,
                  "expr": "$fn.queryProjectOrgDefault($current.project, $root.createdOrg)",
                  "fireImmediately": false,
                  "override": true,
                  "when": "$current.project.$focused"
                },
                "field": "projectOrg"
              }
            }
          ]
        }
      ],
      "fns": [
        {
          "name": "queryProjectOrgDefault",
          "description": "项目组织默认值",
          "value": "/**\n * @export\n * @param {API} api\n * @return {(params: any) => any}\n */\nexport default function (api) {\n  return async function (project, createdOrg, projectOrg, scenario, detailItemsName) {\n    const orgPromise = new Promise(res => {\n      setTimeout(async () => {\n        if(!project) {\n          res(undefined);\n        }\n        // if(scenario =='ChangeProjectAlert' ){\n        //   return projectOrg\n        // }\n\n        // 根据交付信息查询所有可用组织集合\n        const orgs = await api.queryFieldValue('projectOrg', ``);\n\n        // 单据的财务组织=项目的财务组织且项目的项目组织在交付子表中，取项目的项目组织\n        if(project.projectOrg && createdOrg.id === project.financialOrg.id){\n          if(orgs.some(org => org.id === project.projectOrg.id)) {\n            res(project.projectOrg);\n          }\n        }\n        // 项目的项目组织可选范围为一个项目组织时，携带这个项目组织\n        if(orgs.length === 1) {\n          res(orgs[0]);\n        }\n        // 如果场景值是ChangeProjectAlert\n        // 如果orgs是一个数组的话，那么就判断我还原的值是不是在orgs里\n        // 如果在就返回这个项目组织\n        if(projectOrg && scenario =='ChangeProjectAlert' ){\n          if(orgs.some(org => org.id === projectOrg.id)) {\n            res(projectOrg)\n          }\n        }\n\n        res(undefined);\n      }, 0)\n    })\n\n    orgPromise.then(res => {\n        if (detailItemsName && !res) {\n            const itemsName = detailItemsName.split(',');\n            itemsName.map(itemsName=> {\n                bizFormPresenter.api.formController.getView(itemsName).filter(item=>item.project && item.projectOrg).map(item=>item.projectOrg=res)\n            })\n        }\n    })\n    return orgPromise;\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/142a227e-02d5-40dc-825c-e28f2269d2eb/5a79c094-91c3-40ae-8ce9-1fbab41d8d61",
      "items": [
        {
          "id": "bc14b88c-565b-4bd1-bb43-060f746a5933",
          "description": "头体双向同步",
          "actions": [
            {
              "name": "ReactiveMasterToTables",
              "description": "头体同步",
              "params": {
                "isWhenTracked": true,
                "sourceValue": "$current.settlementMethod",
                "targets": [
                  {
                    "dataTable": "purOrderSettlementItems",
                    "field": "settlementMethod",
                    "viewName": "Initialized"
                  }
                ],
                "when": "$current.settlementMethod.$focused && !$current.settlementMethod.$disabled"
              }
            },
            {
              "name": "ReactiveTablesToMaster",
              "description": "体头同步",
              "params": {
                "aggregationMethod": "Equal",
                "clearFieldWhenDifferent": true,
                "disableFieldWhenDifferent": true,
                "field": "settlementMethod",
                "sourceValues": [
                  {
                    "dataTable": "purOrderSettlementItems",
                    "expr": "$current.settlementMethod",
                    "viewName": "Initialized",
                    "when": "$current.settlementMethod"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": "7c17fdfc-a76e-4bd6-aa90-21d6ec1ef848",
          "description": "表体初始化默认值",
          "reference": "purOrderSettlementItems",
          "conditions": [
            {
              "if": "true"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$root.settlementMethod",
                "field": "settlementMethod",
                "when": "!$current.settlementMethod && !$current.srcObject"
              }
            }
          ]
        },
        {
          "id": "25f12e27-5797-4f2d-9aa1-1709ffb611fd",
          "description": "库存-头体同步-项目组织特殊处理",
          "conditions": [
            {
              "if": "false"
            }
          ],
          "actions": [
            {
              "name": "ReactiveMasterToTables",
              "description": "头体同步无焦点时，如果是项目聚焦, 也会进行改变",
              "params": {
                "sourceValue": "$current.settlementMethod",
                "targets": [
                  {
                    "dataTable": "purOrderSettlementItems",
                    "field": "settlementMethod",
                    "viewName": "Initialized"
                  }
                ],
                "when": "$current.project.$focused && !$current.settlementMethod.$focused"
              }
            },
            {
              "name": "ReactiveMasterToTables",
              "description": "头体同步无焦点时，暂时只同步空值的行",
              "params": {
                "sourceValue": "$current.settlementMethod",
                "targets": [
                  {
                    "dataTable": "purOrderSettlementItems",
                    "field": "settlementMethod",
                    "viewName": "ProjectOrgEmptyView"
                  }
                ],
                "when": "!$current.settlementMethod.$focused"
              }
            }
          ]
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/4347ab16-04f7-43ce-a225-6ac7306d5fed/8017694d-505d-4211-8856-2124c308f581",
      "items": [
        {
          "id": "2c4d0e17-5c70-4fe9-98dd-1c07879587e9",
          "description": "停用日期的值必须大于等于指定日期",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "effect": {
                  "fireImmediately": true,
                  "isDestruct": true,
                  "props": {
                    "minDate": "$fn.getDate($root.businessDate)"
                  }
                },
                "field": "planArrivalDate"
              }
            },
            {
              "name": "ReactiveFieldValidator",
              "description": "校验停用日期不能小于指定日期",
              "params": {
                "effect": {
                  "fireImmediately": true,
                  "name": "min",
                  "params": {
                    "includeEquals": "true",
                    "min": "$fn.getDate($root.businessDate)"
                  }
                },
                "field": "planArrivalDate"
              }
            }
          ]
        }
      ],
      "fns": [
        {
          "name": "getDate",
          "description": "获取日期函数（参数缺省代表不做限制）",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (date) {\n    const dateTime = getDate(date)\n    return new Date(dateTime.setHours(0,0,0,0))\n  }\n}\n\nfunction getDate(date) {\n if (!date) {\n      return new Date('1970')\n    }\n    if (date instanceof Date) {\n      return date\n    }\n\n    // 根据输入值转换为日期\n    if (date === \"now()\") {\n      date = Date.now()\n    }\n    // 根据输入值转换为日期\n    const dateObj = new Date(date)\n    // 若日期格式合法则返回转化的日期对象\n    if (dateObj.getDate() > 0) {\n      return dateObj\n    }\n    return new Date()\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/67784d5c-84ac-4571-9fd3-043184c63d41/8017694d-505d-4211-8856-2124c308f581",
      "items": [
        {
          "id": "2c4d0e17-5c70-4fe9-98dd-1c07879587e9",
          "description": "停用日期的值必须大于等于指定日期",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "effect": {
                  "fireImmediately": true,
                  "isDestruct": true,
                  "props": {
                    "minDate": "$fn.getDate($root.businessDate)"
                  }
                },
                "field": "planArrivalDate"
              }
            },
            {
              "name": "ReactiveFieldValidator",
              "description": "校验停用日期不能小于指定日期",
              "params": {
                "effect": {
                  "fireImmediately": true,
                  "name": "min",
                  "params": {
                    "includeEquals": "true",
                    "min": "$fn.getDate($root.businessDate)"
                  }
                },
                "field": "planArrivalDate"
              }
            }
          ]
        }
      ],
      "fns": [
        {
          "name": "getDate",
          "description": "获取日期函数（参数缺省代表不做限制）",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (date) {\n    const dateTime = getDate(date)\n    return new Date(dateTime.setHours(0,0,0,0))\n  }\n}\n\nfunction getDate(date) {\n if (!date) {\n      return new Date('1970')\n    }\n    if (date instanceof Date) {\n      return date\n    }\n\n    // 根据输入值转换为日期\n    if (date === \"now()\") {\n      date = Date.now()\n    }\n    // 根据输入值转换为日期\n    const dateObj = new Date(date)\n    // 若日期格式合法则返回转化的日期对象\n    if (dateObj.getDate() > 0) {\n      return dateObj\n    }\n    return new Date()\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/4bca3ea6-f7bd-4103-89dd-6772c0de0171/80e8560b-8250-4ebe-a2e0-132fe3f6c648",
      "items": [
        {
          "id": "17e9ddc2-e11f-4878-87b5-cdde0c6909cb",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveCriteria",
              "description": "表体供应商根据存货进行过滤",
              "params": {
                "field": "vendor",
                "fragments": [
                  {
                    "bindVars": {
                      "productId": "$current.product && $current.product.id"
                    },
                    "criteriaStr": "id in (select vendorId from VenProduct where vendorId=m.id and productId = :productId)",
                    "fireImmediately": true,
                    "join": "And",
                    "when": "$current.product && $current.product.id && $current.product.isOrgEnforcedVenProduct"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/9a337707-d8e1-4dc1-a7de-e8666912992e/8017694d-505d-4211-8856-2124c308f581",
      "items": [
        {
          "id": "2c4d0e17-5c70-4fe9-98dd-1c07879587e9",
          "description": "停用日期的值必须大于等于指定日期",
          "reference": "purOrderSettlementItems",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "effect": {
                  "fireImmediately": true,
                  "isDestruct": true,
                  "props": {
                    "minDate": "$fn.getDate($root.businessDate)"
                  }
                },
                "field": "paymentDate"
              }
            },
            {
              "name": "ReactiveFieldValidator",
              "description": "校验停用日期不能小于指定日期",
              "params": {
                "effect": {
                  "fireImmediately": true,
                  "name": "min",
                  "params": {
                    "includeEquals": "true",
                    "min": "$fn.getDate($root.businessDate)"
                  }
                },
                "field": "paymentDate"
              }
            }
          ]
        }
      ],
      "fns": [
        {
          "name": "getDate",
          "description": "获取日期函数（参数缺省代表不做限制）",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (date) {\n    const dateTime = getDate(date)\n    return new Date(dateTime.setHours(0,0,0,0))\n  }\n}\n\nfunction getDate(date) {\n if (!date) {\n      return new Date('1970')\n    }\n    if (date instanceof Date) {\n      return date\n    }\n\n    // 根据输入值转换为日期\n    if (date === \"now()\") {\n      date = Date.now()\n    }\n    // 根据输入值转换为日期\n    const dateObj = new Date(date)\n    // 若日期格式合法则返回转化的日期对象\n    if (dateObj.getDate() > 0) {\n      return dateObj\n    }\n    return new Date()\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/db9db128-5a88-4316-85cc-db6c0f64e89b/3cd0129f-1208-4b8e-9330-533296911795",
      "items": [
        {
          "id": "",
          "description": "明细金额字段同步主表并合计",
          "actions": [
            {
              "name": "ReactiveTablesToMaster",
              "params": {
                "aggregationMethod": "Sum",
                "field": "amountWithoutTax",
                "fireImmediately": true,
                "sourceValues": [
                  {
                    "dataTable": "purOrderItems",
                    "expr": "$current.amountWithoutTax"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/b2ca35fb-aa3b-48a2-88d8-427a3dbc8237/3cd0129f-1208-4b8e-9330-533296911795",
      "items": [
        {
          "id": "",
          "description": "明细金额字段同步主表并合计",
          "actions": [
            {
              "name": "ReactiveTablesToMaster",
              "params": {
                "aggregationMethod": "Sum",
                "field": "originAmount",
                "fireImmediately": true,
                "sourceValues": [
                  {
                    "dataTable": "purOrderItems",
                    "expr": "$current.originAmount"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/d38528e5-4f64-4e87-9f54-7dc6a39198ab/3cd0129f-1208-4b8e-9330-533296911795",
      "items": [
        {
          "id": "",
          "description": "明细金额字段同步主表并合计",
          "actions": [
            {
              "name": "ReactiveTablesToMaster",
              "params": {
                "aggregationMethod": "Sum",
                "field": "originAmountWithoutTax",
                "fireImmediately": true,
                "sourceValues": [
                  {
                    "dataTable": "purOrderItems",
                    "expr": "$current.originAmountWithoutTax"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/4e896351-5cf4-4d7d-8ae4-9b0c21506c37/3cd0129f-1208-4b8e-9330-533296911795",
      "items": [
        {
          "id": "",
          "description": "明细金额字段同步主表并合计",
          "actions": [
            {
              "name": "ReactiveTablesToMaster",
              "params": {
                "aggregationMethod": "Sum",
                "field": "amount",
                "fireImmediately": true,
                "sourceValues": [
                  {
                    "dataTable": "purOrderItems",
                    "expr": "$current.amount"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/74c6289f-f495-4e8d-8619-22a55d502eb5/3cd0129f-1208-4b8e-9330-533296911795",
      "items": [
        {
          "id": "",
          "description": "明细金额字段同步主表并合计",
          "actions": [
            {
              "name": "ReactiveTablesToMaster",
              "params": {
                "aggregationMethod": "Sum",
                "field": "originTaxAmount",
                "fireImmediately": true,
                "sourceValues": [
                  {
                    "dataTable": "purOrderItems",
                    "expr": "$current.originTaxAmount"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/c1e5332e-bf6b-43bf-a66d-03c5ece2041f/3cd0129f-1208-4b8e-9330-533296911795",
      "items": [
        {
          "id": "",
          "description": "明细金额字段同步主表并合计",
          "actions": [
            {
              "name": "ReactiveTablesToMaster",
              "params": {
                "aggregationMethod": "Sum",
                "field": "taxAmount",
                "fireImmediately": true,
                "sourceValues": [
                  {
                    "dataTable": "purOrderItems",
                    "expr": "$current.taxAmount"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/9f5265c0-6756-4f97-87e6-ba4fbf11a78c/6ecbb03f-7291-434d-be18-5bc60bfdbfd0",
      "items": [
        {
          "id": "6e05aa4e-9690-4083-8cad-6fc4923ba3f2",
          "description": "采购数量控制",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldValidator",
              "description": "存货类型为数量型时，采购数量大于0",
              "params": {
                "effect": {
                  "fireImmediately": true,
                  "name": "min",
                  "params": {
                    "includeEquals": false,
                    "min": 0
                  },
                  "when": "$current.product && $current.product.productStandardType.id === 'ProductStandardType.quantity' && $current.transQty && !$current.isFreeGift"
                },
                "field": "transQty"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "存货为金额型时，采购数量为只读",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "$current.product && $current.product.productStandardType.id === 'ProductStandardType.amount'"
                },
                "field": "transQty"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "存货为数量型时，采购数量为必填",
              "params": {
                "effect": {
                  "expr": "true",
                  "status": "Required",
                  "when": "$current.product && $current.product.productStandardType.id === 'ProductStandardType.quantity'&& !$current.isFreeGift"
                },
                "field": "transQty"
              }
            }
          ]
        },
        {
          "id": "17735fe0-7314-4e27-91d7-c0405c4b5113",
          "description": "切换存货为金额型时，清空数量",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.product"
            }
          ],
          "conditions": [
            {
              "if": "$current.product && $current.product.productStandardType.id === 'ProductStandardType.amount'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "清空采购数量",
              "params": {
                "expr": "undefined",
                "field": "transQty"
              }
            }
          ]
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/c43a267a-642e-4850-a3a0-e59a8a27b709/6ecbb03f-7291-434d-be18-5bc60bfdbfd0",
      "items": [
        {
          "id": "6e05aa4e-9690-4083-8cad-6fc4923ba3f2",
          "description": "采购数量控制",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldValidator",
              "description": "存货类型为数量型时，采购数量大于0",
              "params": {
                "effect": {
                  "fireImmediately": true,
                  "name": "min",
                  "params": {
                    "includeEquals": false,
                    "min": 0
                  },
                  "when": "$current.product && $current.product.productStandardType.id === 'ProductStandardType.quantity' && $current.baseQty && !$current.isFreeGift"
                },
                "field": "baseQty"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "存货为金额型时，采购数量为只读",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "$current.product && $current.product.productStandardType.id === 'ProductStandardType.amount'"
                },
                "field": "baseQty"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "存货为数量型时，采购数量为必填",
              "params": {
                "effect": {
                  "expr": "true",
                  "status": "Required",
                  "when": "$current.product && $current.product.productStandardType.id === 'ProductStandardType.quantity'&& !$current.isFreeGift"
                },
                "field": "baseQty"
              }
            }
          ]
        },
        {
          "id": "17735fe0-7314-4e27-91d7-c0405c4b5113",
          "description": "切换存货为金额型时，清空数量",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.product"
            }
          ],
          "conditions": [
            {
              "if": "$current.product && $current.product.productStandardType.id === 'ProductStandardType.amount'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "清空采购数量",
              "params": {
                "expr": "undefined",
                "field": "baseQty"
              }
            }
          ]
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/22313456-bce5-48d2-b3a7-13c62d7372ce/6ecbb03f-7291-434d-be18-5bc60bfdbfd0",
      "items": [
        {
          "id": "6e05aa4e-9690-4083-8cad-6fc4923ba3f2",
          "description": "采购数量控制",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldValidator",
              "description": "存货类型为数量型时，采购数量大于0",
              "params": {
                "effect": {
                  "fireImmediately": true,
                  "name": "min",
                  "params": {
                    "includeEquals": false,
                    "min": 0
                  },
                  "when": "$current.product && $current.product.productStandardType.id === 'ProductStandardType.quantity' && $current.auxQty && !$current.isFreeGift"
                },
                "field": "auxQty"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "存货为金额型时，采购数量为只读",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "$current.product && $current.product.productStandardType.id === 'ProductStandardType.amount'"
                },
                "field": "auxQty"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "存货为数量型时，采购数量为必填",
              "params": {
                "effect": {
                  "expr": "false",
                  "status": "Required",
                  "when": "$current.product && $current.product.productStandardType.id === 'ProductStandardType.quantity'&& !$current.isFreeGift"
                },
                "field": "auxQty"
              }
            }
          ]
        },
        {
          "id": "17735fe0-7314-4e27-91d7-c0405c4b5113",
          "description": "切换存货为金额型时，清空数量",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.product"
            }
          ],
          "conditions": [
            {
              "if": "$current.product && $current.product.productStandardType.id === 'ProductStandardType.amount'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "清空采购数量",
              "params": {
                "expr": "undefined",
                "field": "auxQty"
              }
            }
          ]
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/44f0103c-2a54-4b84-aad8-ba4f51cf3c29/8017694d-505d-4211-8856-2124c308f581",
      "items": [
        {
          "id": "2c4d0e17-5c70-4fe9-98dd-1c07879587e9",
          "description": "停用日期的值必须大于等于指定日期",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "effect": {
                  "fireImmediately": true,
                  "isDestruct": true,
                  "props": {
                    "minDate": "$fn.getDate($root.businessDate)"
                  }
                },
                "field": "changeDate"
              }
            },
            {
              "name": "ReactiveFieldValidator",
              "description": "校验停用日期不能小于指定日期",
              "params": {
                "effect": {
                  "fireImmediately": true,
                  "name": "min",
                  "params": {
                    "includeEquals": "true",
                    "min": "$fn.getDate($root.businessDate)"
                  }
                },
                "field": "changeDate"
              }
            }
          ]
        }
      ],
      "fns": [
        {
          "name": "getDate",
          "description": "获取日期函数（参数缺省代表不做限制）",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (date) {\n    const dateTime = getDate(date)\n    return new Date(dateTime.setHours(0,0,0,0))\n  }\n}\n\nfunction getDate(date) {\n if (!date) {\n      return new Date('1970')\n    }\n    if (date instanceof Date) {\n      return date\n    }\n\n    // 根据输入值转换为日期\n    if (date === \"now()\") {\n      date = Date.now()\n    }\n    // 根据输入值转换为日期\n    const dateObj = new Date(date)\n    // 若日期格式合法则返回转化的日期对象\n    if (dateObj.getDate() > 0) {\n      return dateObj\n    }\n    return new Date()\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/6c8976ec-27c2-4b9f-b075-bdc14506bed0/983338e6-2f51-4686-8a2f-568cc0d8e905",
      "items": [
        {
          "id": "74a7e1a0-e742-4eea-8271-56646db6f35d",
          "description": "字段变更时带入相关字段值",
          "triggers": [
            {
              "event": "Change",
              "target": "$root.receiptOrg"
            }
          ],
          "conditions": [
            {
              "if": "$root.receiptOrg.$focused&&!$root.settleOrg.$disabled"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "autoClear": "true",
                "expr": "$fn.hasPartyDelegateRelationship($root.createdOrg,$fn.getInvOrgOwnerFinancialOrg($root.receiptOrg&&$root.receiptOrg.id),'PurchaseAccountingDelegateRelationship')",
                "field": "settleOrg",
                "override": "true"
              }
            }
          ]
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/454464244c-27c2-7541-b075-78as465as/983338e6-2f51-4686-8a2f-568cc0d8e905",
      "items": [
        {
          "id": "74a7e1a0-e742-4eea-8271-56646db6f35d",
          "description": "字段变更时带入相关字段值",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.receiptOrg"
            }
          ],
          "conditions": [
            {
              "if": "$current.receiptOrg.$focused||$current.settleOrg.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "autoClear": "true",
                "expr": "$fn.getOrgDefaultAddress($current.receiptOrg&&$current.receiptOrg.id)",
                "field": "arrivalAddress",
                "override": "true"
              }
            }
          ]
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/4123123-1312-121-312-31331123/983338e6-2f51-4686-8a2f-568cc0d8e905",
      "items": [
        {
          "id": "74a7e1a0-e742-4eea-8271-56646db6f35d",
          "description": "字段变更时带入相关字段值",
          "triggers": [
            {
              "event": "Change",
              "target": "$root.settleOrg"
            }
          ],
          "conditions": [
            {
              "if": "$root.settleOrg.$focused&&!$root.receiptOrg.$disabled"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "autoClear": "true",
                "expr": "$fn.hasPartyDelegateRelationship($root.createdOrg,$current.settleOrg&&$current.settleOrg.isInventoryOrg&&$current.settleOrg,'InventoryPurchaseDelegateRelationship')",
                "field": "receiptOrg",
                "override": "true"
              }
            }
          ]
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/c610a6a7-6a26-4247-b286-df4ee7335768/inventory-field-project-relative-sync",
      "items": [
        {
          "id": "08b4c114-6392-4cd3-b506-b7882130b9bd",
          "description": "头体同步",
          "actions": [
            {
              "name": "ReactiveMasterToTables",
              "params": {
                "sourceValue": "$current.receiptOrg",
                "targets": [
                  {
                    "dataTable": "purOrderItems",
                    "field": "receiptOrg",
                    "viewName": "Initialized",
                    "when": "!$current.srcItemObjectId&&(!$current.product || $current.product && $current.product.productStandardType.id === 'ProductStandardType.quantity'&&!$current.product.isCost &&!$current.product.isService)"
                  }
                ],
                "when": "!$current.receiptOrg.$disabled&&(!$current.product || $current.product && $current.product.productStandardType.id === 'ProductStandardType.quantity'&&!$current.product.isCost &&!$current.product.isService)&&$root.receiptOrg"
              }
            }
          ]
        },
        {
          "id": "2f603889-c3a8-4025-9cec-8fc0a6d76c60",
          "description": "体头同步",
          "actions": [
            {
              "name": "ReactiveTablesToMaster",
              "params": {
                "aggregationMethod": "Equal",
                "clearFieldWhenDifferent": true,
                "disableFieldWhenDifferent": true,
                "field": "receiptOrg",
                "fireImmediately": "false",
                "sourceValues": [
                  {
                    "dataTable": "purOrderItems",
                    "expr": "$current.receiptOrg",
                    "viewName": "Initialized",
                    "when": "true"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": "86f11620-0b90-47b5-8783-e562110d65c3",
          "description": "表体初始化默认值",
          "reference": "purOrderItems",
          "conditions": [
            {
              "if": "!$current.srcItemObjectId&&!$current.receiptOrg&&$root.receiptOrg"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$root.receiptOrg",
                "field": "receiptOrg"
              }
            }
          ]
        }
      ],
      "variables": {
        "copyMode": "$context.mode == 'Copy'",
        "generateMode": "$context.mode == 'Generate'"
      }
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/84c8f7df-a699-41a0-9654-6aa745882329/inventory-field-project-relative-sync",
      "items": [
        {
          "id": "08b4c114-6392-4cd3-b506-b7882130b9bd",
          "description": "头体同步",
          "actions": [
            {
              "name": "ReactiveMasterToTables",
              "params": {
                "sourceValue": "$current.settleOrg",
                "targets": [
                  {
                    "dataTable": "purOrderItems",
                    "field": "settleOrg",
                    "viewName": "Initialized",
                    "when": "!$current.srcItemObjectId"
                  }
                ],
                "when": "!$current.settleOrg.$disabled&&$root.settleOrg"
              }
            }
          ]
        },
        {
          "id": "2f603889-c3a8-4025-9cec-8fc0a6d76c60",
          "description": "体头同步",
          "actions": [
            {
              "name": "ReactiveTablesToMaster",
              "params": {
                "aggregationMethod": "Equal",
                "clearFieldWhenDifferent": true,
                "disableFieldWhenDifferent": true,
                "field": "settleOrg",
                "fireImmediately": "false",
                "sourceValues": [
                  {
                    "dataTable": "purOrderItems",
                    "expr": "$current.settleOrg",
                    "viewName": "Initialized",
                    "when": "true"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": "86f11620-0b90-47b5-8783-e562110d65c3",
          "description": "表体初始化默认值",
          "reference": "purOrderItems",
          "conditions": [
            {
              "if": "!$current.srcItemObjectId&&!$current.settleOrg"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$root.settleOrg",
                "field": "settleOrg"
              }
            }
          ]
        }
      ],
      "variables": {
        "copyMode": "$context.mode == 'Copy'",
        "generateMode": "$context.mode == 'Generate'"
      }
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/b968d794-f35d-4561-8c48-f052ac039c60/inventory-field-project-relative-sync",
      "items": [
        {
          "id": "08b4c114-6392-4cd3-b506-b7882130b9bd",
          "description": "头体同步",
          "actions": [
            {
              "name": "ReactiveMasterToTables",
              "params": {
                "sourceValue": "$current.planArrivalDate",
                "targets": [
                  {
                    "dataTable": "purOrderItems",
                    "field": "planArrivalDate",
                    "viewName": "Initialized",
                    "when": "!$current.planArrivalDate.$disabled&&$root.planArrivalDate"
                  }
                ],
                "when": "$root.planArrivalDate&&!$current.planArrivalDate.$disabled"
              }
            }
          ]
        },
        {
          "id": "2f603889-c3a8-4025-9cec-8fc0a6d76c60",
          "description": "体头同步",
          "actions": [
            {
              "name": "ReactiveTablesToMaster",
              "params": {
                "aggregationMethod": "Equal",
                "clearFieldWhenDifferent": true,
                "disableFieldWhenDifferent": true,
                "field": "planArrivalDate",
                "fireImmediately": "false",
                "sourceValues": [
                  {
                    "dataTable": "purOrderItems",
                    "expr": "$current.planArrivalDate",
                    "viewName": "Initialized",
                    "when": "$root.planArrivalDate"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": "86f11620-0b90-47b5-8783-e562110d65c3",
          "description": "表体初始化默认值",
          "reference": "purOrderItems",
          "conditions": [
            {
              "if": "$root.planArrivalDate && !$current.planArrivalDate.$disabled &&!$current.planArrivalDate"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$root.planArrivalDate",
                "field": "planArrivalDate"
              }
            }
          ]
        }
      ],
      "variables": {
        "copyMode": "$context.mode == 'Copy'",
        "generateMode": "$context.mode == 'Generate'"
      }
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/fe74cce3-7100-4e85-990e-a622cb162f9d/0f817cd0-30af-44eb-98f1-57bdb874ace1",
      "items": [
        {
          "id": "a865d327-d957-4191-ac3f-4302b2e072f3",
          "description": "头体同步，有焦点时，覆盖所有匹配行",
          "actions": [
            {
              "name": "ReactiveMasterToTables",
              "params": {
                "sourceValue": "$current.project",
                "targets": [
                  {
                    "dataTable": "purOrderSettlementItems",
                    "field": "project",
                    "viewName": "Initialized",
                    "when": "!$current.srcItemObjectId"
                  },
                  {
                    "dataTable": "purOrderItems",
                    "field": "project",
                    "viewName": "Initialized",
                    "when": "!$current.srcItemObjectId"
                  }
                ],
                "when": "!$current.project.$disabled && $root.project"
              }
            }
          ]
        },
        {
          "id": "f267309f-8ffe-4180-a785-3c66d0f0ce6d",
          "description": "体头同步tableToMaster",
          "actions": [
            {
              "name": "ReactiveTablesToMaster",
              "params": {
                "aggregationMethod": "Equal",
                "clearFieldWhenDifferent": true,
                "disableFieldWhenDifferent": true,
                "field": "project",
                "fireImmediately": "false",
                "sourceValues": [
                  {
                    "dataTable": "purOrderSettlementItems",
                    "expr": "$current.project",
                    "viewName": "Initialized",
                    "when": "true"
                  },
                  {
                    "dataTable": "purOrderItems",
                    "expr": "$current.project",
                    "viewName": "Initialized",
                    "when": "true"
                  }
                ],
                "when": "true"
              }
            }
          ]
        },
        {
          "id": "1d13e762-0a22-41ec-9ef4-057098d72027",
          "description": "表体初始化默认值-计划行",
          "reference": "purOrderSettlementItems",
          "conditions": [
            {
              "if": "!$current.isChangeBill && $current.editFlag === 'add' && !$current.srcObject && !$current.project"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$root.project",
                "field": "project"
              }
            }
          ]
        },
        {
          "id": "7eed1dc0-dd35-4b0c-ae32-2f397da458e3",
          "description": "表体初始化默认值-明细",
          "reference": "purOrderItems",
          "conditions": [
            {
              "if": "!$current.isChangeBill && $current.editFlag === 'add' && !$current.srcObject && !$current.project"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$root.project",
                "field": "project"
              }
            }
          ]
        }
      ],
      "variables": {
        "isChangeBill": "$root.isChangeBill == true"
      }
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/1bb25b44-4d56-429a-80ce-0c1cb16ae808/0f817cd0-30af-44eb-98f1-57bdb874ace1",
      "items": [
        {
          "id": "a865d327-d957-4191-ac3f-4302b2e072f3",
          "description": "头体同步，有焦点时，覆盖所有匹配行",
          "actions": [
            {
              "name": "ReactiveMasterToTables",
              "params": {
                "sourceValue": "$current.projectOrg",
                "targets": [
                  {
                    "dataTable": "purOrderSettlementItems",
                    "field": "projectOrg",
                    "viewName": "Initialized",
                    "when": "!$current.srcItemObjectId"
                  },
                  {
                    "dataTable": "purOrderItems",
                    "field": "projectOrg",
                    "viewName": "Initialized",
                    "when": "!$current.srcItemObjectId"
                  }
                ],
                "when": "$root.projectOrg"
              }
            }
          ]
        },
        {
          "id": "f267309f-8ffe-4180-a785-3c66d0f0ce6d",
          "description": "体头同步tableToMaster",
          "actions": [
            {
              "name": "ReactiveTablesToMaster",
              "params": {
                "aggregationMethod": "Equal",
                "clearFieldWhenDifferent": true,
                "disableFieldWhenDifferent": true,
                "field": "projectOrg",
                "fireImmediately": "false",
                "sourceValues": [
                  {
                    "dataTable": "purOrderSettlementItems",
                    "expr": "$current.projectOrg",
                    "viewName": "Initialized",
                    "when": "true"
                  },
                  {
                    "dataTable": "purOrderItems",
                    "expr": "$current.projectOrg",
                    "viewName": "Initialized",
                    "when": "true"
                  }
                ],
                "when": "true"
              }
            }
          ]
        },
        {
          "id": "1d13e762-0a22-41ec-9ef4-057098d72027",
          "description": "表体初始化默认值-计划行",
          "reference": "purOrderSettlementItems",
          "conditions": [
            {
              "if": "!$current.isChangeBill && $current.editFlag === 'add' && !$current.srcObject && !$current.projectOrg"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$root.projectOrg",
                "field": "projectOrg"
              }
            }
          ]
        },
        {
          "id": "7eed1dc0-dd35-4b0c-ae32-2f397da458e3",
          "description": "表体初始化默认值-明细",
          "reference": "purOrderItems",
          "conditions": [
            {
              "if": "!$current.isChangeBill && $current.editFlag === 'add' && !$current.srcObject && !$current.projectOrg"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$root.projectOrg",
                "field": "projectOrg"
              }
            }
          ]
        }
      ],
      "variables": {
        "isChangeBill": "$root.isChangeBill == true"
      }
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/7f47c00d-a3a0-48f0-9c13-d24461cc0b54/0f817cd0-30af-44eb-98f1-57bdb874ace1",
      "items": [
        {
          "id": "a865d327-d957-4191-ac3f-4302b2e072f3",
          "description": "头体同步，有焦点时，覆盖所有匹配行",
          "actions": [
            {
              "name": "ReactiveMasterToTables",
              "params": {
                "sourceValue": "$current.projectStage",
                "targets": [
                  {
                    "dataTable": "purOrderSettlementItems",
                    "field": "projectStage",
                    "viewName": "Initialized",
                    "when": "!$current.srcItemObjectId"
                  },
                  {
                    "dataTable": "purOrderItems",
                    "field": "projectStage",
                    "viewName": "Initialized",
                    "when": "!$current.srcItemObjectId"
                  }
                ],
                "when": "!$current.projectStage.$disabled && $root.projectStage"
              }
            }
          ]
        },
        {
          "id": "f267309f-8ffe-4180-a785-3c66d0f0ce6d",
          "description": "体头同步tableToMaster",
          "actions": [
            {
              "name": "ReactiveTablesToMaster",
              "params": {
                "aggregationMethod": "Equal",
                "clearFieldWhenDifferent": true,
                "disableFieldWhenDifferent": true,
                "field": "projectStage",
                "fireImmediately": "false",
                "sourceValues": [
                  {
                    "dataTable": "purOrderSettlementItems",
                    "expr": "$current.projectStage",
                    "viewName": "Initialized",
                    "when": "true"
                  },
                  {
                    "dataTable": "purOrderItems",
                    "expr": "$current.projectStage",
                    "viewName": "Initialized",
                    "when": "true"
                  }
                ],
                "when": "true"
              }
            }
          ]
        },
        {
          "id": "1d13e762-0a22-41ec-9ef4-057098d72027",
          "description": "表体初始化默认值-计划行",
          "reference": "purOrderSettlementItems",
          "conditions": [
            {
              "if": "!$current.isChangeBill && $current.editFlag === 'add' && !$current.srcObject && !$current.projectStage"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$root.projectStage",
                "field": "projectStage"
              }
            }
          ]
        },
        {
          "id": "7eed1dc0-dd35-4b0c-ae32-2f397da458e3",
          "description": "表体初始化默认值-明细",
          "reference": "purOrderItems",
          "conditions": [
            {
              "if": "!$current.isChangeBill && $current.editFlag === 'add' && !$current.srcObject && !$current.projectStage"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$root.projectStage",
                "field": "projectStage"
              }
            }
          ]
        }
      ],
      "variables": {
        "isChangeBill": "$root.isChangeBill == true"
      }
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/d25f3f5b-eb53-4176-a31b-d39e8d679bb8/4e6969ae-afc5-4ef7-a727-fc691eb2bf54",
      "items": [
        {
          "id": "56b161ae-5e34-4ef7-8085-a9d628d2a4be",
          "description": "最小值校验",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldValidator",
              "params": {
                "effect": {
                  "fireImmediately": true,
                  "name": "min",
                  "params": {
                    "includeEquals": false,
                    "message": "订单行号必须大于0",
                    "min": 0
                  },
                  "when": "true"
                },
                "field": "rowNo"
              }
            }
          ]
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/65f00548-632b-4ad0-b3bd-9e0803a34ddc/4e6969ae-afc5-4ef7-a727-fc691eb2bf54",
      "items": [
        {
          "id": "56b161ae-5e34-4ef7-8085-a9d628d2a4be",
          "description": "最小值校验",
          "reference": "purOrderSettlementItems",
          "actions": [
            {
              "name": "ReactiveFieldValidator",
              "params": {
                "effect": {
                  "fireImmediately": true,
                  "name": "min",
                  "params": {
                    "includeEquals": false,
                    "message": "付款计划行号必须大于0",
                    "min": 0
                  },
                  "when": "true"
                },
                "field": "rowNo"
              }
            }
          ]
        }
      ]
    },
    {
      "id": "680cdfa4-98be-4eca-8ff6-0989a118b2e8/e4c689dd-1373-46cf-a584-605ba5a94a62/03bc94fd-763b-49ed-b81f-d84a8d0d9d79",
      "items": [
        {
          "id": "e4a6c779-546a-4ad1-b086-ae2302aa2f11",
          "description": "表头项目切换清空表体项目组织",
          "actions": [
            {
              "name": "ReactiveMasterToTables",
              "description": "表头项目切换清空表体项目组织",
              "params": {
                "sourceValue": "$current.projectOrg",
                "targets": [
                  {
                    "dataTable": "purOrderSettlementItems",
                    "field": "projectOrg",
                    "viewName": "Initialized",
                    "when": "true"
                  }
                ],
                "when": "$current.project.$focused && $current.projectOrg == undefined"
              }
            }
          ]
        }
      ]
    },
    {
      "id": "Calc-Internal-ED0D4901BE8A420/Calc-STQW",
      "items": [],
      "fns": [
        {
          "name": "getDblQtyParams",
          "description": "数量计算 参数装配",
          "value": "export default function (api) {\n  return function (currentField,bitFlagConst,qtySeqConst,calcBase,calcBaseHigh,cnvDirection,measureDef,valuatingQty,valuatingUom,baseQty,baseUom,auxQty,auxUom,baseUnitCnvType,auxToBaseRateNumerator,auxToBaseRateDenominator,auxToBaseRate,transQty,transUom,transAuxQty,transAuxUom,transUnitCnvType,transAuxToTransRateNumerator,transAuxToTransRateDenominator,transAuxToTransRate,trans2Qty,trans2Uom,trans2AuxQty,trans2AuxUom,trans2UnitCnvType,trans2AuxToTransRateNumerator,trans2AuxToTransRateDenominator,trans2AuxToTransRate) {\n    const result = {\n      currentField,\n      bitFlagConst,\n      qtySeqConst,\n      calcBase,\n      calcBaseHigh,\n      cnvDirection,\n      measureDef,\n      valuatingQty,\n      valuatingUom,\n      baseQty,\n      baseUom,\n      auxQty,\n      auxUom,\n      baseUnitCnvType,\n      auxToBaseRateNumerator,\n      auxToBaseRateDenominator,\n      auxToBaseRate,\n      transQty,\n      transUom,\n      transAuxQty,\n      transAuxUom,\n      transUnitCnvType,\n      transAuxToTransRateNumerator,\n      transAuxToTransRateDenominator,\n      transAuxToTransRate,\n      trans2Qty,\n      trans2Uom,\n      trans2AuxQty,\n      trans2AuxUom,\n      trans2UnitCnvType,\n      trans2AuxToTransRateNumerator,\n      trans2AuxToTransRateDenominator,\n      trans2AuxToTransRate\n    };\n    console.log('Calc Log: dblQty params',result);\n    return result;\n  }\n}\n",
          "declare": "(currentField:any,bitFlagConst:any,qtySeqConst:any,calcBase:any,calcBaseHigh:any,cnvDirection:any,measureDef:any,valuatingQty:any,valuatingUom:any,baseQty:any,baseUom:any,auxQty:any,auxUom:any,baseUnitCnvType:any,auxToBaseRateNumerator:any,auxToBaseRateDenominator:any,auxToBaseRate:any,transQty:any,transUom:any,transAuxQty:any,transAuxUom:any,transUnitCnvType:any,transAuxToTransRateNumerator:any,transAuxToTransRateDenominator:any,transAuxToTransRate:any,trans2Qty:any,trans2Uom:any,trans2AuxQty:any,trans2AuxUom:any,trans2UnitCnvType:any,trans2AuxToTransRateNumerator:any,trans2AuxToTransRateDenominator:any,trans2AuxToTransRate:any) => any"
        },
        {
          "name": "getValue",
          "description": "获取当前 field 的值",
          "value": "/**\n* @export\n* @param {API} api\n*/\nexport default function (api) {\n  return function (fieldName) {\n    if (!fieldName) {\n      return undefined;\n    }\n    if (fieldName.includes('$')) {\n      return fieldName;\n    }\n    return api.getNode().getValue(fieldName);\n  }\n}",
          "declare": "(fieldName:any) => any"
        },
        {
          "name": "getDblQtyValueTaxParams",
          "description": "量价计算 参数装配",
          "value": "/**\n* @export\n* @param {API} api\n*/\nexport default function (api) {\n  return function (currentField,bitFlagConst,offsetConst,calcBase,calcBaseHigh,currency,exchangeRate,taxRate,originPrice,price,originPriceWithoutTax,priceWithoutTax,originAmount,amount,originAmountWithoutTax,amountWithoutTax,originTaxAmount,taxAmount,baseQty,auxQty,transQty,transAuxQty,trans2Qty,trans2AuxQty,valuatingQty,valuatingUom,cnvDirection,unitCnvType) {\n    const isPriceWithTax = api.getNode().getValue('isPriceWithTax');\n    const id = api.getNode().getValue('id');\n    const src = api.getNode().getValue('srcObject');\n    const needUpgrade = !!id || !!src;\n    const result = {\n      currentField,\n      bitFlagConst,\n      offsetConst,\n      calcBase,\n      calcBaseHigh,\n      isPriceWithTax,\n      currency,\n      exchangeRate,\n      taxRate,\n      baseQty,\n      auxQty,\n      transQty,\n      transAuxQty,\n      trans2Qty,\n      trans2AuxQty,\n      valuatingQty,\n      valuatingUom,\n      originPrice,\n      price,\n      originPriceWithoutTax,\n      priceWithoutTax,\n      originAmount,\n      amount,\n      originAmountWithoutTax,\n      amountWithoutTax,\n      originTaxAmount,\n      taxAmount,\n      cnvDirection,\n      unitCnvType,\n      needUpgrade,\n    };\n    console.log('Calc Log: dblQtyValueTax params', result);\n    return result;\n  }\n}\n",
          "declare": "(currentField:any,bitFlagConst:any,offsetConst:any,calcBase:any,calcBaseHigh:any,currency:any,exchangeRate:any,taxRate:any,originPrice:any,price:any,originPriceWithoutTax:any,priceWithoutTax:any,originAmount:any,amount:any,originAmountWithoutTax:any,amountWithoutTax:any,originTaxAmount:any,taxAmount:any,baseQty:any,auxQty:any,transQty:any,transAuxQty:any,trans2Qty:any,trans2AuxQty:any,valuatingQty:any,valuatingUom:any,cnvDirection:any,unitCnvType:any) => any"
        }
      ],
      "mappings": [
        {
          "name": "trans2AuxToTransRate",
          "value": ""
        },
        {
          "name": "transAuxToTransRateDenominator",
          "value": "transCnvDenominator"
        },
        {
          "name": "isMultiUnit",
          "value": "product.isMultiUnit"
        },
        {
          "name": "cnvDenominator",
          "value": "product.cnvDenominator"
        },
        {
          "name": "trans2Uom",
          "value": ""
        },
        {
          "name": "transAuxQty",
          "value": "baseQty"
        },
        {
          "name": "valuatingUom",
          "value": "transUnit"
        },
        {
          "name": "valuatingQtyMeasureItemId",
          "value": "transQty"
        },
        {
          "name": "auxUom",
          "value": "auxUnit"
        },
        {
          "name": "calcBase",
          "value": "calcBase"
        },
        {
          "name": "cnvDirection",
          "value": "product.cnvDirection"
        },
        {
          "name": "trans2UnitCnvType",
          "value": ""
        },
        {
          "name": "valuatingQty",
          "value": "transQty"
        },
        {
          "name": "cnvNumerator",
          "value": "product.cnvNumerator"
        },
        {
          "name": "amountWithoutTax",
          "value": "amountWithoutTax"
        },
        {
          "name": "exchangeRate",
          "value": "exchangeRate"
        },
        {
          "name": "price",
          "value": "price"
        },
        {
          "name": "revenue",
          "value": ""
        },
        {
          "name": "baseUom",
          "value": "baseUnit"
        },
        {
          "name": "currency",
          "value": "currency"
        },
        {
          "name": "transUnitCnvType",
          "value": "transUnitCnvType"
        },
        {
          "name": "measureGroupId",
          "value": "originWorth"
        },
        {
          "name": "originAmountWithoutTax",
          "value": "originAmountWithoutTax"
        },
        {
          "name": "taxRate",
          "value": "taxRate"
        },
        {
          "name": "trans2AuxUom",
          "value": ""
        },
        {
          "name": "isDualUnitGroup",
          "value": "product.isDualUnitGroup"
        },
        {
          "name": "transAuxUom",
          "value": "baseUnit"
        },
        {
          "name": "amount",
          "value": "amount"
        },
        {
          "name": "auxQty",
          "value": "auxQty"
        },
        {
          "name": "auxToBaseRateDenominator",
          "value": "baseCnvDenominator"
        },
        {
          "name": "priceWithoutTax",
          "value": "priceWithoutTax"
        },
        {
          "name": "baseQty",
          "value": "baseQty"
        },
        {
          "name": "baseUnitCnvType",
          "value": "product.unitCnvType"
        },
        {
          "name": "calcBaseHigh",
          "value": "calcBaseHigh"
        },
        {
          "name": "originPrice",
          "value": "originPrice"
        },
        {
          "name": "trans2AuxToTransRateDenominator",
          "value": ""
        },
        {
          "name": "transQty",
          "value": "transQty"
        },
        {
          "name": "auxUnitGroup",
          "value": "product.auxUnitGroup"
        },
        {
          "name": "product",
          "value": "product"
        },
        {
          "name": "trans2Qty",
          "value": ""
        },
        {
          "name": "auxToBaseRateNumerator",
          "value": "baseCnvNumerator"
        },
        {
          "name": "baseUnitGroup",
          "value": "product.baseUnitGroup"
        },
        {
          "name": "originPriceWithoutTax",
          "value": "originPriceWithoutTax"
        },
        {
          "name": "transAuxToTransRateNumerator",
          "value": "transCnvNumerator"
        },
        {
          "name": "transUom",
          "value": "transUnit"
        },
        {
          "name": "localExchangeRate",
          "value": "$localExchangeRate"
        },
        {
          "name": "invMgtType",
          "value": "$ProductStandardType.quantity"
        },
        {
          "name": "isPriceWithTax",
          "value": "isPriceWithTax"
        },
        {
          "name": "originTaxAmount",
          "value": "originTaxAmount"
        },
        {
          "name": "reference",
          "value": "purOrderItems"
        },
        {
          "name": "trans2AuxToTransRateNumerator",
          "value": ""
        },
        {
          "name": "originAmount",
          "value": "originAmount"
        },
        {
          "name": "trans2AuxQty",
          "value": ""
        },
        {
          "name": "transAuxToTransRate",
          "value": "transToBaseRate"
        },
        {
          "name": "localCurrency",
          "value": "$localCurrencyId"
        },
        {
          "name": "auxToBaseRate",
          "value": "baseAuxToBaseRate"
        },
        {
          "name": "taxAmount",
          "value": "taxAmount"
        },
        {
          "name": "unitCnvType",
          "value": "product.unitCnvType"
        },
        {
          "name": "cost",
          "value": ""
        }
      ]
    },
    {
      "id": "Calc-Internal-ED0D4901BE8A420/Calc-STQW/6ba2a813-e48e-4ef9-93df-c7a0331f58dd/Calc-DblQty",
      "items": [
        {
          "id": "dblQty-input-cnvDirection",
          "description": "输入 换算方向",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.product.cnvDirection"
            }
          ],
          "conditions": [
            {
              "access": "'product.cnvDirection'",
              "if": "$current.product.cnvDirection.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyParams('cnvDirection', '', '', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, $variable.auxToBaseRateNumerator, $variable.auxToBaseRateDenominator, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, $variable.transAuxToTransRateNumerator, $variable.transAuxToTransRateDenominator, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, $variable.trans2AuxToTransRateNumerator, $variable.trans2AuxToTransRateDenominator, $variable.trans2AuxToTransRate)",
                "field": "$variable.dblQtyParams"
              }
            }
          ]
        },
        {
          "id": "dblQty-change-baseUom",
          "description": "修改 主单位",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.baseUnit"
            }
          ],
          "conditions": [
            {
              "access": "'baseUnit'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyParams('baseUom', '', 'ZERO', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, $variable.auxToBaseRateNumerator, $variable.auxToBaseRateDenominator, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, $variable.transAuxToTransRateNumerator, $variable.transAuxToTransRateDenominator, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, $variable.trans2AuxToTransRateNumerator, $variable.trans2AuxToTransRateDenominator, $variable.trans2AuxToTransRate)",
                "field": "$variable.dblQtyParams",
                "when": "$current.baseUnit.$focused"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyInitParams",
                "field": "$variable.dblQtyParams",
                "when": "!$current.baseUnit.$focused"
              }
            }
          ]
        },
        {
          "id": "dblQty-input-baseQty",
          "description": "输入 主数量",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.baseQty"
            }
          ],
          "conditions": [
            {
              "access": "'baseQty'",
              "if": "$current.baseQty.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyParams('baseQty', 'QTY', 'ZERO', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, $variable.auxToBaseRateNumerator, $variable.auxToBaseRateDenominator, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, $variable.transAuxToTransRateNumerator, $variable.transAuxToTransRateDenominator, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, $variable.trans2AuxToTransRateNumerator, $variable.trans2AuxToTransRateDenominator, $variable.trans2AuxToTransRate)",
                "field": "$variable.dblQtyParams"
              }
            }
          ]
        },
        {
          "id": "dblQty-output-baseQty",
          "description": "回写 主数量",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyResult.baseQty"
            }
          ],
          "conditions": [
            {
              "access": "'baseQty'",
              "if": "!$current.baseQty.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyResult.baseQty",
                "field": "baseQty",
                "when": "$current.baseQty !== $variable.dblQtyResult.baseQty"
              }
            }
          ]
        },
        {
          "id": "dblQty-change-auxUom",
          "description": "修改 辅单位",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.auxUnit"
            }
          ],
          "conditions": [
            {
              "access": "'auxUnit'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyParams('auxUom', '', 'ZERO', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, $variable.auxToBaseRateNumerator, $variable.auxToBaseRateDenominator, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, $variable.transAuxToTransRateNumerator, $variable.transAuxToTransRateDenominator, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, $variable.trans2AuxToTransRateNumerator, $variable.trans2AuxToTransRateDenominator, $variable.trans2AuxToTransRate)",
                "field": "$variable.dblQtyParams",
                "when": "$current.auxUnit.$focused"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyInitParams",
                "field": "$variable.dblQtyParams",
                "when": "!$current.auxUnit.$focused"
              }
            }
          ]
        },
        {
          "id": "dblQty-input-auxQty",
          "description": "输入 辅数量",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.auxQty"
            }
          ],
          "conditions": [
            {
              "access": "'auxQty'",
              "if": "$current.auxQty.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyParams('auxQty', 'QTY', 'ZERO', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, $variable.auxToBaseRateNumerator, $variable.auxToBaseRateDenominator, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, $variable.transAuxToTransRateNumerator, $variable.transAuxToTransRateDenominator, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, $variable.trans2AuxToTransRateNumerator, $variable.trans2AuxToTransRateDenominator, $variable.trans2AuxToTransRate)",
                "field": "$variable.dblQtyParams"
              }
            }
          ]
        },
        {
          "id": "dblQty-output-auxQty",
          "description": "回写 辅数量",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyResult.auxQty"
            }
          ],
          "conditions": [
            {
              "access": "'auxQty'",
              "if": "!$current.auxQty.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyResult.auxQty",
                "field": "auxQty",
                "when": "$current.auxQty !== $variable.dblQtyResult.auxQty"
              }
            }
          ]
        },
        {
          "id": "dblQty-output-baseUnitCnvType",
          "description": "回写 换算类型",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyResult.baseUnitCnvType"
            }
          ],
          "conditions": [
            {
              "access": "'product.unitCnvType'",
              "if": "$fn.isField('product.unitCnvType')"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyResult.baseUnitCnvType",
                "field": "product.unitCnvType",
                "when": "$variable.baseUnitCnvType !== $variable.dblQtyResult.baseUnitCnvType"
              }
            }
          ]
        },
        {
          "id": "dblQty-input-auxToBaseRateNumerator",
          "description": "输入 换算分子",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.baseCnvNumerator"
            }
          ],
          "conditions": [
            {
              "access": "'baseCnvNumerator'",
              "if": "$current.baseCnvNumerator.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyParams('auxToBaseRateNumerator', '', '', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, $variable.auxToBaseRateNumerator, $variable.auxToBaseRateDenominator, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, $variable.transAuxToTransRateNumerator, $variable.transAuxToTransRateDenominator, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, $variable.trans2AuxToTransRateNumerator, $variable.trans2AuxToTransRateDenominator, $variable.trans2AuxToTransRate)",
                "field": "$variable.dblQtyParams"
              }
            }
          ]
        },
        {
          "id": "dblQty-output-auxToBaseRateNumerator",
          "description": "回写 换算分子",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyResult.auxToBaseRateNumerator"
            }
          ],
          "conditions": [
            {
              "access": "'baseCnvNumerator'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyResult.auxToBaseRateNumerator",
                "field": "baseCnvNumerator",
                "when": "$current.baseCnvNumerator !== $variable.dblQtyResult.auxToBaseRateNumerator"
              }
            }
          ]
        },
        {
          "id": "dblQty-input-auxToBaseRateDenominator",
          "description": "输入 换算分母",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.baseCnvDenominator"
            }
          ],
          "conditions": [
            {
              "access": "'baseCnvDenominator'",
              "if": "$current.baseCnvDenominator.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyParams('auxToBaseRateDenominator', '', '', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, $variable.auxToBaseRateNumerator, $variable.auxToBaseRateDenominator, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, $variable.transAuxToTransRateNumerator, $variable.transAuxToTransRateDenominator, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, $variable.trans2AuxToTransRateNumerator, $variable.trans2AuxToTransRateDenominator, $variable.trans2AuxToTransRate)",
                "field": "$variable.dblQtyParams"
              }
            }
          ]
        },
        {
          "id": "dblQty-output-auxToBaseRateDenominator",
          "description": "回写 换算分母",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyResult.auxToBaseRateDenominator"
            }
          ],
          "conditions": [
            {
              "access": "'baseCnvDenominator'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyResult.auxToBaseRateDenominator",
                "field": "baseCnvDenominator",
                "when": "$current.baseCnvDenominator !== $variable.dblQtyResult.auxToBaseRateDenominator"
              }
            }
          ]
        },
        {
          "id": "dblQty-input-auxToBaseRate",
          "description": "输入 换算率",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.baseAuxToBaseRate"
            }
          ],
          "conditions": [
            {
              "access": "'baseAuxToBaseRate'",
              "if": "$current.baseAuxToBaseRate.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyParams('auxToBaseRate', 'CNV_RATE', 'ZERO', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, 0, 0, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, $variable.transAuxToTransRateNumerator, $variable.transAuxToTransRateDenominator, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, $variable.trans2AuxToTransRateNumerator, $variable.trans2AuxToTransRateDenominator, $variable.trans2AuxToTransRate)",
                "field": "$variable.dblQtyParams"
              }
            }
          ]
        },
        {
          "id": "dblQty-output-auxToBaseRate",
          "description": "回写 换算率",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyResult.auxToBaseRate"
            }
          ],
          "conditions": [
            {
              "access": "'baseAuxToBaseRate'",
              "if": "!$current.baseAuxToBaseRate.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyResult.auxToBaseRate",
                "field": "baseAuxToBaseRate",
                "when": "$current.baseAuxToBaseRate !== $variable.dblQtyResult.auxToBaseRate"
              }
            }
          ]
        },
        {
          "id": "dblQty-change-transUom",
          "description": "修改 交易单位",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.transUnit"
            }
          ],
          "conditions": [
            {
              "access": "'transUnit'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyParams('transUom', '', 'ONE', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, $variable.auxToBaseRateNumerator, $variable.auxToBaseRateDenominator, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, $variable.transAuxToTransRateNumerator, $variable.transAuxToTransRateDenominator, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, $variable.trans2AuxToTransRateNumerator, $variable.trans2AuxToTransRateDenominator, $variable.trans2AuxToTransRate)",
                "field": "$variable.dblQtyParams",
                "when": "$current.transUnit.$focused"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyInitParams",
                "field": "$variable.dblQtyParams",
                "when": "!$current.transUnit.$focused"
              }
            }
          ]
        },
        {
          "id": "dblQty-input-transQty",
          "description": "输入 交易数量",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.transQty"
            }
          ],
          "conditions": [
            {
              "access": "'transQty'",
              "if": "$current.transQty.$focused && 'transQty' !== 'baseQty'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyParams('transQty', 'QTY', 'ONE', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, $variable.auxToBaseRateNumerator, $variable.auxToBaseRateDenominator, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, $variable.transAuxToTransRateNumerator, $variable.transAuxToTransRateDenominator, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, $variable.trans2AuxToTransRateNumerator, $variable.trans2AuxToTransRateDenominator, $variable.trans2AuxToTransRate)",
                "field": "$variable.dblQtyParams"
              }
            }
          ]
        },
        {
          "id": "dblQty-output-transQty",
          "description": "回写 交易数量",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyResult.transQty"
            }
          ],
          "conditions": [
            {
              "access": "'transQty'",
              "if": "!$current.transQty.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyResult.transQty",
                "field": "transQty",
                "when": "$current.transQty !== $variable.dblQtyResult.transQty"
              }
            }
          ]
        },
        {
          "id": "dblQty-change-transAuxUom",
          "description": "修改 交易辅单位",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.baseUnit"
            }
          ],
          "conditions": [
            {
              "access": "'baseUnit'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyParams('transAuxUom', '', 'ONE', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, $variable.auxToBaseRateNumerator, $variable.auxToBaseRateDenominator, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, $variable.transAuxToTransRateNumerator, $variable.transAuxToTransRateDenominator, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, $variable.trans2AuxToTransRateNumerator, $variable.trans2AuxToTransRateDenominator, $variable.trans2AuxToTransRate)",
                "field": "$variable.dblQtyParams",
                "when": "$current.baseUnit.$focused"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyInitParams",
                "field": "$variable.dblQtyParams",
                "when": "!$current.baseUnit.$focused"
              }
            }
          ]
        },
        {
          "id": "dblQty-input-transAuxQty",
          "description": "输入 交易辅数量",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.baseQty"
            }
          ],
          "conditions": [
            {
              "access": "'baseQty'",
              "if": "$current.baseQty.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyParams('transAuxQty', 'QTY', 'ONE', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, $variable.auxToBaseRateNumerator, $variable.auxToBaseRateDenominator, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, $variable.transAuxToTransRateNumerator, $variable.transAuxToTransRateDenominator, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, $variable.trans2AuxToTransRateNumerator, $variable.trans2AuxToTransRateDenominator, $variable.trans2AuxToTransRate)",
                "field": "$variable.dblQtyParams"
              }
            }
          ]
        },
        {
          "id": "dblQty-output-transAuxQty",
          "description": "回写 交易辅数量",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyResult.transAuxQty"
            }
          ],
          "conditions": [
            {
              "access": "'baseQty'",
              "if": "!$current.baseQty.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyResult.transAuxQty",
                "field": "baseQty",
                "when": "$current.baseQty !== $variable.dblQtyResult.transAuxQty"
              }
            }
          ]
        },
        {
          "id": "dblQty-output-transUnitCnvType",
          "description": "回写 交易换算类型",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyResult.transUnitCnvType"
            }
          ],
          "conditions": [
            {
              "access": "'transUnitCnvType'",
              "if": "$fn.isField('transUnitCnvType')"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyResult.transUnitCnvType",
                "field": "transUnitCnvType",
                "when": "$variable.transUnitCnvType !== $variable.dblQtyResult.transUnitCnvType"
              }
            }
          ]
        },
        {
          "id": "dblQty-input-transAuxToTransRateNumerator",
          "description": "输入 交易换算分子",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.transCnvNumerator"
            }
          ],
          "conditions": [
            {
              "access": "'transCnvNumerator'",
              "if": "$current.transCnvNumerator.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyParams('transAuxToTransRateNumerator', '', '', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, $variable.auxToBaseRateNumerator, $variable.auxToBaseRateDenominator, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, $variable.transAuxToTransRateNumerator, $variable.transAuxToTransRateDenominator, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, $variable.trans2AuxToTransRateNumerator, $variable.trans2AuxToTransRateDenominator, $variable.trans2AuxToTransRate)",
                "field": "$variable.dblQtyParams"
              }
            }
          ]
        },
        {
          "id": "dblQty-output-transAuxToTransRateNumerator",
          "description": "回写 交易换算分子",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyResult.transAuxToTransRateNumerator"
            }
          ],
          "conditions": [
            {
              "access": "'transCnvNumerator'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyResult.transAuxToTransRateNumerator",
                "field": "transCnvNumerator",
                "when": "$current.transCnvNumerator !== $variable.dblQtyResult.transAuxToTransRateNumerator"
              }
            }
          ]
        },
        {
          "id": "dblQty-input-transAuxToTransRateDenominator",
          "description": "输入 交易换算分母",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.transCnvDenominator"
            }
          ],
          "conditions": [
            {
              "access": "'transCnvDenominator'",
              "if": "$current.transCnvDenominator.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyParams('transAuxToTransRateDenominator', '', '', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, $variable.auxToBaseRateNumerator, $variable.auxToBaseRateDenominator, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, $variable.transAuxToTransRateNumerator, $variable.transAuxToTransRateDenominator, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, $variable.trans2AuxToTransRateNumerator, $variable.trans2AuxToTransRateDenominator, $variable.trans2AuxToTransRate)",
                "field": "$variable.dblQtyParams"
              }
            }
          ]
        },
        {
          "id": "dblQty-output-transAuxToTransRateDenominator",
          "description": "回写 交易换算分母",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyResult.transAuxToTransRateDenominator"
            }
          ],
          "conditions": [
            {
              "access": "'transCnvDenominator'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyResult.transAuxToTransRateDenominator",
                "field": "transCnvDenominator",
                "when": "$current.transCnvDenominator !== $variable.dblQtyResult.transAuxToTransRateDenominator"
              }
            }
          ]
        },
        {
          "id": "dblQty-input-transAuxToTransRate",
          "description": "输入 交易换算率",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.transToBaseRate"
            }
          ],
          "conditions": [
            {
              "access": "'transToBaseRate'",
              "if": "$current.transToBaseRate.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyParams('transAuxToTransRate', 'CNV_RATE', 'ONE', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, $variable.auxToBaseRateNumerator, $variable.auxToBaseRateDenominator, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, 0, 0, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, $variable.trans2AuxToTransRateNumerator, $variable.trans2AuxToTransRateDenominator, $variable.trans2AuxToTransRate)",
                "field": "$variable.dblQtyParams"
              }
            }
          ]
        },
        {
          "id": "dblQty-output-transAuxToTransRate",
          "description": "回写 交易换算率",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyResult.transAuxToTransRate"
            }
          ],
          "conditions": [
            {
              "access": "'transToBaseRate'",
              "if": "!$current.transToBaseRate.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyResult.transAuxToTransRate",
                "field": "transToBaseRate",
                "when": "$current.transToBaseRate !== $variable.dblQtyResult.transAuxToTransRate"
              }
            }
          ]
        },
        {
          "id": "dblQty-change-trans2Uom",
          "description": "修改 交易2单位",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current."
            }
          ],
          "conditions": [
            {
              "access": "''"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyParams('trans2Uom', '', 'TWO', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, $variable.auxToBaseRateNumerator, $variable.auxToBaseRateDenominator, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, $variable.transAuxToTransRateNumerator, $variable.transAuxToTransRateDenominator, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, $variable.trans2AuxToTransRateNumerator, $variable.trans2AuxToTransRateDenominator, $variable.trans2AuxToTransRate)",
                "field": "$variable.dblQtyParams",
                "when": "$current..$focused"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyInitParams",
                "field": "$variable.dblQtyParams",
                "when": "!$current..$focused"
              }
            }
          ]
        },
        {
          "id": "dblQty-input-trans2Qty",
          "description": "输入 交易2数量",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current."
            }
          ],
          "conditions": [
            {
              "access": "''",
              "if": "$current..$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyParams('trans2Qty', 'QTY', 'TWO', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, $variable.auxToBaseRateNumerator, $variable.auxToBaseRateDenominator, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, $variable.transAuxToTransRateNumerator, $variable.transAuxToTransRateDenominator, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, $variable.trans2AuxToTransRateNumerator, $variable.trans2AuxToTransRateDenominator, $variable.trans2AuxToTransRate)",
                "field": "$variable.dblQtyParams"
              }
            }
          ]
        },
        {
          "id": "dblQty-output-trans2Qty",
          "description": "回写 交易2数量",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyResult.trans2Qty"
            }
          ],
          "conditions": [
            {
              "access": "''",
              "if": "!$current..$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyResult.trans2Qty",
                "field": "",
                "when": "$current. !== $variable.dblQtyResult.trans2Qty"
              }
            }
          ]
        },
        {
          "id": "dblQty-change-trans2AuxUom",
          "description": "修改 交易2辅单位",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current."
            }
          ],
          "conditions": [
            {
              "access": "''"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyParams('trans2AuxUom', '', 'TWO', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, $variable.auxToBaseRateNumerator, $variable.auxToBaseRateDenominator, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, $variable.transAuxToTransRateNumerator, $variable.transAuxToTransRateDenominator, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, $variable.trans2AuxToTransRateNumerator, $variable.trans2AuxToTransRateDenominator, $variable.trans2AuxToTransRate)",
                "field": "$variable.dblQtyParams",
                "when": "$current..$focused"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyInitParams",
                "field": "$variable.dblQtyParams",
                "when": "!$current..$focused"
              }
            }
          ]
        },
        {
          "id": "dblQty-input-trans2AuxQty",
          "description": "输入 交易2辅数量",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current."
            }
          ],
          "conditions": [
            {
              "access": "''",
              "if": "$current..$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyParams('trans2AuxQty', 'QTY', 'TWO', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, $variable.auxToBaseRateNumerator, $variable.auxToBaseRateDenominator, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, $variable.transAuxToTransRateNumerator, $variable.transAuxToTransRateDenominator, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, $variable.trans2AuxToTransRateNumerator, $variable.trans2AuxToTransRateDenominator, $variable.trans2AuxToTransRate)",
                "field": "$variable.dblQtyParams"
              }
            }
          ]
        },
        {
          "id": "dblQty-output-trans2AuxQty",
          "description": "回写 交易2辅数量",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyResult.trans2AuxQty"
            }
          ],
          "conditions": [
            {
              "access": "''",
              "if": "!$current..$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyResult.trans2AuxQty",
                "field": "",
                "when": "$current. !== $variable.dblQtyResult.trans2AuxQty"
              }
            }
          ]
        },
        {
          "id": "dblQty-output-trans2UnitCnvType",
          "description": "回写 交易2换算类型",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyResult.trans2UnitCnvType"
            }
          ],
          "conditions": [
            {
              "access": "''",
              "if": "$fn.isField('')"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyResult.trans2UnitCnvType",
                "field": "",
                "when": "$variable.trans2UnitCnvType !== $variable.dblQtyResult.trans2UnitCnvType"
              }
            }
          ]
        },
        {
          "id": "dblQty-input-trans2AuxToTransRateNumerator",
          "description": "输入 交易2换算分子",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current."
            }
          ],
          "conditions": [
            {
              "access": "''",
              "if": "$current..$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyParams('trans2AuxToTransRateNumerator', '', '', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, $variable.auxToBaseRateNumerator, $variable.auxToBaseRateDenominator, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, $variable.transAuxToTransRateNumerator, $variable.transAuxToTransRateDenominator, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, $variable.trans2AuxToTransRateNumerator, $variable.trans2AuxToTransRateDenominator, $variable.trans2AuxToTransRate)",
                "field": "$variable.dblQtyParams"
              }
            }
          ]
        },
        {
          "id": "dblQty-output-trans2AuxToTransRateNumerator",
          "description": "回写 交易2换算分子",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyResult.trans2AuxToTransRateNumerator"
            }
          ],
          "conditions": [
            {
              "access": "''"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyResult.trans2AuxToTransRateNumerator",
                "field": "",
                "when": "$current. !== $variable.dblQtyResult.trans2AuxToTransRateNumerator"
              }
            }
          ]
        },
        {
          "id": "dblQty-input-trans2AuxToTransRateDenominator",
          "description": "输入 交易2换算分母",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current."
            }
          ],
          "conditions": [
            {
              "access": "''",
              "if": "$current..$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyParams('trans2AuxToTransRateDenominator', '', '', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, $variable.auxToBaseRateNumerator, $variable.auxToBaseRateDenominator, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, $variable.transAuxToTransRateNumerator, $variable.transAuxToTransRateDenominator, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, $variable.trans2AuxToTransRateNumerator, $variable.trans2AuxToTransRateDenominator, $variable.trans2AuxToTransRate)",
                "field": "$variable.dblQtyParams"
              }
            }
          ]
        },
        {
          "id": "dblQty-output-trans2AuxToTransRateDenominator",
          "description": "回写 交易2换算分母",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyResult.trans2AuxToTransRateDenominator"
            }
          ],
          "conditions": [
            {
              "access": "''"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyResult.trans2AuxToTransRateDenominator",
                "field": "",
                "when": "$current. !== $variable.dblQtyResult.trans2AuxToTransRateDenominator"
              }
            }
          ]
        },
        {
          "id": "dblQty-input-trans2AuxToTransRate",
          "description": "输入 交易2换算率",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current."
            }
          ],
          "conditions": [
            {
              "access": "''",
              "if": "$current..$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyParams('trans2AuxToTransRate', 'CNV_RATE', 'TWO', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, $variable.auxToBaseRateNumerator, $variable.auxToBaseRateDenominator, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, $variable.transAuxToTransRateNumerator, $variable.transAuxToTransRateDenominator, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, 0, 0, $variable.trans2AuxToTransRate)",
                "field": "$variable.dblQtyParams"
              }
            }
          ]
        },
        {
          "id": "dblQty-output-trans2AuxToTransRate",
          "description": "回写 交易2换算率",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyResult.trans2AuxToTransRate"
            }
          ],
          "conditions": [
            {
              "access": "''",
              "if": "!$current..$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyResult.trans2AuxToTransRate",
                "field": "",
                "when": "$current. !== $variable.dblQtyResult.trans2AuxToTransRate"
              }
            }
          ]
        },
        {
          "id": "dblQty-input-calcBase",
          "description": "输入 计算标志位",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.calcBase"
            }
          ],
          "conditions": [
            {
              "access": "'calcBase'",
              "if": "$current.calcBase.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyInitParams",
                "field": "$variable.dblQtyParams"
              }
            }
          ]
        },
        {
          "id": "dblQty-output-calcBase",
          "description": "回写 计算标志位",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyResult.calcBase"
            }
          ],
          "conditions": [
            {
              "access": "'calcBase'",
              "if": "!$current.calcBase.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyResult.calcBase",
                "field": "calcBase",
                "when": "$current.calcBase !== $variable.dblQtyResult.calcBase"
              }
            }
          ]
        },
        {
          "id": "dblQty-change-valuatingQty",
          "description": "输入金额、单价 引起的计价数量更新",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.transQty"
            },
            {
              "event": "Change",
              "target": "$current.calcBase"
            }
          ],
          "conditions": [
            {
              "access": "'transQty'",
              "if": "!$current.transQty.$focused && $fn.valuatingQtyChange($current.calcBase)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "更新计价数量 执行计算 将计算结果写入变量",
              "params": {
                "expr": "$fn.qtyCalc($context.systemSettings, $variable.valuatingQtyCalcParams, $variable.valuatingQtyParams, true)",
                "field": "$variable.dblQtyResult",
                "isWhenTracked": false,
                "override": true,
                "when": "$fn.needWriteQtyResult($variable.valuatingQtyCalcParams)"
              }
            }
          ]
        },
        {
          "id": "dblQty-execute-calc",
          "description": "执行计算",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyParams"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "执行计算 将计算结果写入变量",
              "params": {
                "expr": "$fn.qtyCalc($context.systemSettings, $variable.dblQtyParams, $variable.valuatingQtyParams)",
                "field": "$variable.dblQtyResult",
                "isWhenTracked": false,
                "override": true,
                "when": "$fn.needWriteQtyResult($variable.dblQtyParams)"
              }
            }
          ]
        },
        {
          "id": "dblQty-execute-calc-automation",
          "description": "复制 自动执行计算",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Automation"
            }
          ],
          "conditions": [
            {
              "if": "$context.mode === 'Copy' && !!$variable.measureDef"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "复制 自动执行计算 将计算结果写入变量",
              "params": {
                "expr": "$fn.qtyCalc($context.systemSettings, $variable.dblQtyParams, $variable.valuatingQtyParams)",
                "field": "$variable.dblQtyResult",
                "override": true,
                "when": "$fn.needWriteQtyResult($variable.dblQtyParams)"
              }
            }
          ]
        }
      ],
      "variables": {
        "auxQty": "$fn.getValue('auxQty')",
        "auxToBaseRate": "$fn.getValue('baseAuxToBaseRate')",
        "auxToBaseRateDenominator": "$fn.getValue('baseCnvDenominator')",
        "auxToBaseRateNumerator": "$fn.getValue('baseCnvNumerator')",
        "auxUom": "$fn.getValue('auxUnit')",
        "baseQty": "$fn.getValue('baseQty')",
        "baseUnitCnvType": "$fn.getValue('product.unitCnvType')",
        "baseUom": "$fn.getValue('baseUnit')",
        "dblQtyInitParams": "$fn.getDblQtyParams('auto', '', '', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, $variable.auxToBaseRateNumerator, $variable.auxToBaseRateDenominator, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, $variable.transAuxToTransRateNumerator, $variable.transAuxToTransRateDenominator, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, $variable.trans2AuxToTransRateNumerator, $variable.trans2AuxToTransRateDenominator, $variable.trans2AuxToTransRate)",
        "dblQtyParams": "$variable.dblQtyInitParams",
        "dblQtyResult": "$variable.dblQtyInitParams",
        "measureDef": "$fn.getMeasureDef($current.product)",
        "trans2AuxQty": "$fn.getValue('')",
        "trans2AuxToTransRate": "$fn.getValue('')",
        "trans2AuxToTransRateDenominator": "$fn.getValue('')",
        "trans2AuxToTransRateNumerator": "$fn.getValue('')",
        "trans2AuxUom": "$fn.getValue('')",
        "trans2Qty": "$fn.getValue('')",
        "trans2UnitCnvType": "$fn.getValue('')",
        "trans2Uom": "$fn.getValue('')",
        "transAuxQty": "$fn.getValue('baseQty')",
        "transAuxToTransRate": "$fn.getValue('transToBaseRate')",
        "transAuxToTransRateDenominator": "$fn.getValue('transCnvDenominator')",
        "transAuxToTransRateNumerator": "$fn.getValue('transCnvNumerator')",
        "transAuxUom": "$fn.getValue('baseUnit')",
        "transQty": "$fn.getValue('transQty')",
        "transUnitCnvType": "$fn.getValue('transUnitCnvType')",
        "transUom": "$fn.getValue('transUnit')",
        "valuatingQty": "$fn.getValue('transQty')",
        "valuatingQtyCalcParams": "$fn.getDblQtyParams('auto', 'QTY', '', $current.calcBase, $current.calcBaseHigh, $current.product.cnvDirection, $variable.measureDef, $variable.valuatingQty, $variable.valuatingUom, $variable.baseQty, $variable.baseUom, $variable.auxQty, $variable.auxUom, $variable.baseUnitCnvType, $variable.auxToBaseRateNumerator, $variable.auxToBaseRateDenominator, $variable.auxToBaseRate, $variable.transQty, $variable.transUom, $variable.transAuxQty, $variable.transAuxUom, $variable.transUnitCnvType, $variable.transAuxToTransRateNumerator, $variable.transAuxToTransRateDenominator, $variable.transAuxToTransRate, $variable.trans2Qty, $variable.trans2Uom, $variable.trans2AuxQty, $variable.trans2AuxUom, $variable.trans2UnitCnvType, $variable.trans2AuxToTransRateNumerator, $variable.trans2AuxToTransRateDenominator, $variable.trans2AuxToTransRate)",
        "valuatingQtyParams": "$fn.getValuatingQtyParams('transQty', 'baseQty', 'auxQty', 'transQty', 'baseQty', '', '')",
        "valuatingUom": "$fn.getValue('transUnit')"
      },
      "fns": [
        {
          "name": "getDblQtyParams",
          "description": "数量计算 参数装配",
          "value": "export default function (api) {\n  return function (currentField,bitFlagConst,qtySeqConst,calcBase,calcBaseHigh,cnvDirection,measureDef,valuatingQty,valuatingUom,baseQty,baseUom,auxQty,auxUom,baseUnitCnvType,auxToBaseRateNumerator,auxToBaseRateDenominator,auxToBaseRate,transQty,transUom,transAuxQty,transAuxUom,transUnitCnvType,transAuxToTransRateNumerator,transAuxToTransRateDenominator,transAuxToTransRate,trans2Qty,trans2Uom,trans2AuxQty,trans2AuxUom,trans2UnitCnvType,trans2AuxToTransRateNumerator,trans2AuxToTransRateDenominator,trans2AuxToTransRate) {\n    const result = {\n      currentField,\n      bitFlagConst,\n      qtySeqConst,\n      calcBase,\n      calcBaseHigh,\n      cnvDirection,\n      measureDef,\n      valuatingQty,\n      valuatingUom,\n      baseQty,\n      baseUom,\n      auxQty,\n      auxUom,\n      baseUnitCnvType,\n      auxToBaseRateNumerator,\n      auxToBaseRateDenominator,\n      auxToBaseRate,\n      transQty,\n      transUom,\n      transAuxQty,\n      transAuxUom,\n      transUnitCnvType,\n      transAuxToTransRateNumerator,\n      transAuxToTransRateDenominator,\n      transAuxToTransRate,\n      trans2Qty,\n      trans2Uom,\n      trans2AuxQty,\n      trans2AuxUom,\n      trans2UnitCnvType,\n      trans2AuxToTransRateNumerator,\n      trans2AuxToTransRateDenominator,\n      trans2AuxToTransRate\n    };\n    console.log('Calc Log: dblQty params',result);\n    return result;\n  }\n}\n",
          "declare": "(currentField:any,bitFlagConst:any,qtySeqConst:any,calcBase:any,calcBaseHigh:any,cnvDirection:any,measureDef:any,valuatingQty:any,valuatingUom:any,baseQty:any,baseUom:any,auxQty:any,auxUom:any,baseUnitCnvType:any,auxToBaseRateNumerator:any,auxToBaseRateDenominator:any,auxToBaseRate:any,transQty:any,transUom:any,transAuxQty:any,transAuxUom:any,transUnitCnvType:any,transAuxToTransRateNumerator:any,transAuxToTransRateDenominator:any,transAuxToTransRate:any,trans2Qty:any,trans2Uom:any,trans2AuxQty:any,trans2AuxUom:any,trans2UnitCnvType:any,trans2AuxToTransRateNumerator:any,trans2AuxToTransRateDenominator:any,trans2AuxToTransRate:any) => any"
        },
        {
          "name": "getValue",
          "description": "获取当前 field 的值",
          "value": "/**\n* @export\n* @param {API} api\n*/\nexport default function (api) {\n  return function (fieldName) {\n    if (!fieldName) {\n      return undefined;\n    }\n    if (fieldName.includes('$')) {\n      return fieldName;\n    }\n    return api.getNode().getValue(fieldName);\n  }\n}",
          "declare": "(fieldName:any) => any"
        }
      ]
    },
    {
      "id": "Calc-Internal-ED0D4901BE8A420/Calc-STQW/36b4ed5e-dec2-40bb-898c-83d4de0a94fd/Calc-DblQtyValueTax",
      "items": [
        {
          "id": "dblQtyValueTax-change-currency",
          "description": "修改 币种",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.currency"
            }
          ],
          "conditions": [
            {
              "access": "'currency'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyValueTaxInitParams",
                "field": "$variable.dblQtyValueTaxParams"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-change-exchangeRate",
          "description": "修改 汇率",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.exchangeRate"
            }
          ],
          "conditions": [
            {
              "access": "'exchangeRate'",
              "if": "!$fn.writeExchangeRate($current.calcBaseHigh)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyValueTaxInitParams",
                "field": "$variable.dblQtyValueTaxParams"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-output-exchangeRate",
          "description": "回写 汇率",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'exchangeRate'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 汇率",
              "params": {
                "autoClear": true,
                "expr": "$variable.dblQtyValueTaxResult.exchangeRate",
                "field": "exchangeRate",
                "override": true,
                "when": "$fn.writeExchangeRate($current.calcBaseHigh)"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-change-taxRate",
          "description": "修改 税率",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.taxRate"
            }
          ],
          "conditions": [
            {
              "access": "'taxRate'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyValueTaxParams('taxRate', 'TAX_RATE', '', $current.calcBase, $current.calcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.baseQty, $variable.auxQty, $variable.transQty, $variable.transAuxQty, $variable.trans2Qty, $variable.trans2AuxQty, $variable.valuatingQty, $variable.valuatingUom, $current.product.cnvDirection, $variable.measureDef.unitCnvType)",
                "field": "$variable.dblQtyValueTaxParams"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-baseQty-calcBase",
          "description": "输入 主数量 计算标志位特殊处理",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Focus",
              "target": "$current.baseQty"
            }
          ],
          "conditions": [
            {
              "access": "'baseQty'",
              "if": "$current.baseQty.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "输入数量 计算标志位特殊处理",
              "params": {
                "expr": "$fn.getInputQtyBitFlagConst($current.calcBase, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax)",
                "field": "$variable.dblQtyPriceBitFlagConst"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-auxQty-calcBase",
          "description": "输入 辅数量 计算标志位特殊处理",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Focus",
              "target": "$current.auxQty"
            }
          ],
          "conditions": [
            {
              "access": "'auxQty'",
              "if": "$current.auxQty.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "输入数量 计算标志位特殊处理",
              "params": {
                "expr": "$fn.getInputQtyBitFlagConst($current.calcBase, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax)",
                "field": "$variable.dblQtyPriceBitFlagConst"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-transQty-calcBase",
          "description": "输入 交易数量 计算标志位特殊处理",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Focus",
              "target": "$current.transQty"
            }
          ],
          "conditions": [
            {
              "access": "'transQty'",
              "if": "$current.transQty.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "输入数量 计算标志位特殊处理",
              "params": {
                "expr": "$fn.getInputQtyBitFlagConst($current.calcBase, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax)",
                "field": "$variable.dblQtyPriceBitFlagConst"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-transAuxQty-calcBase",
          "description": "输入 交易辅数量 计算标志位特殊处理",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Focus",
              "target": "$current.baseQty"
            }
          ],
          "conditions": [
            {
              "access": "'baseQty'",
              "if": "$current.baseQty.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "输入数量 计算标志位特殊处理",
              "params": {
                "expr": "$fn.getInputQtyBitFlagConst($current.calcBase, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax)",
                "field": "$variable.dblQtyPriceBitFlagConst"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-trans2Qty-calcBase",
          "description": "输入 交易2数量 计算标志位特殊处理",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Focus",
              "target": "$current."
            }
          ],
          "conditions": [
            {
              "access": "''",
              "if": "$current..$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "输入数量 计算标志位特殊处理",
              "params": {
                "expr": "$fn.getInputQtyBitFlagConst($current.calcBase, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax)",
                "field": "$variable.dblQtyPriceBitFlagConst"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-trans2AuxQty-calcBase",
          "description": "输入 交易2辅数量 计算标志位特殊处理",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Focus",
              "target": "$current."
            }
          ],
          "conditions": [
            {
              "access": "''",
              "if": "$current..$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "输入数量 计算标志位特殊处理",
              "params": {
                "expr": "$fn.getInputQtyBitFlagConst($current.calcBase, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax)",
                "field": "$variable.dblQtyPriceBitFlagConst"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-input-qty",
          "description": "输入 数量",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.calcBase"
            },
            {
              "event": "Change",
              "target": "$current.transQty"
            }
          ],
          "conditions": [
            {
              "access": "'transQty'",
              "if": "$current.transQty.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyValueTaxParams('valuatingQty', 'QTY', $variable.valuatingQtyParams.qtySeqConst, $variable.dblQtyValueTaxTempCalcBase, $current.calcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.baseQty, $variable.auxQty, $variable.transQty, $variable.transAuxQty, $variable.trans2Qty, $variable.trans2AuxQty, $variable.valuatingQty, $variable.valuatingUom, $current.product.cnvDirection, $variable.measureDef.unitCnvType)",
                "field": "$variable.dblQtyValueTaxParams"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-output-qty",
          "description": "回写 数量",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'transQty'",
              "if": "$fn.writeQty($variable.dblQtyValueTaxResult.calcBase, $variable.dblQtyValueTaxResult.calcBaseHigh)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 数量",
              "params": {
                "autoClear": true,
                "expr": "$variable.dblQtyValueTaxResult.transQty",
                "field": "transQty",
                "override": true,
                "when": "$variable.dblQtyValueTaxResult.transQty !== $current.transQty"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-input-originPrice",
          "description": "输入 原币含税单价",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.originPrice"
            }
          ],
          "conditions": [
            {
              "access": "'originPrice'",
              "if": "$current.originPrice.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyValueTaxParams('originPrice', 'PRICE', 'ORIGIN_SEG_OFFSET', $current.calcBase, $current.calcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.baseQty, $variable.auxQty, $variable.transQty, $variable.transAuxQty, $variable.trans2Qty, $variable.trans2AuxQty, $variable.valuatingQty, $variable.valuatingUom, $current.product.cnvDirection, $variable.measureDef.unitCnvType)",
                "field": "$variable.dblQtyValueTaxParams"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "true",
                "field": "isPriceWithTax",
                "when": "'isPriceWithTax'"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-output-originPrice",
          "description": "回写 原币含税单价",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'originPrice'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 原币含税单价",
              "params": {
                "autoClear": true,
                "expr": "$variable.dblQtyValueTaxResult.originPrice",
                "field": "originPrice",
                "override": true,
                "when": "$variable.dblQtyValueTaxResult.originPrice !== $current.originPrice"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-input-price",
          "description": "输入 本币含税单价",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.price"
            }
          ],
          "conditions": [
            {
              "access": "'price'",
              "if": "$current.price.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyValueTaxParams('price', 'PRICE', 'LOCAL_SEG_OFFSET', $current.calcBase, $current.calcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.baseQty, $variable.auxQty, $variable.transQty, $variable.transAuxQty, $variable.trans2Qty, $variable.trans2AuxQty, $variable.valuatingQty, $variable.valuatingUom, $current.product.cnvDirection, $variable.measureDef.unitCnvType)",
                "field": "$variable.dblQtyValueTaxParams"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "true",
                "field": "isPriceWithTax",
                "when": "'isPriceWithTax'"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-output-price",
          "description": "回写 本币含税单价",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'price'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 本币含税单价",
              "params": {
                "autoClear": true,
                "expr": "$variable.dblQtyValueTaxResult.price",
                "field": "price",
                "override": true,
                "when": "$variable.dblQtyValueTaxResult.price !== $current.price"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-input-originPriceWithoutTax",
          "description": "输入 原币无税单价",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.originPriceWithoutTax"
            }
          ],
          "conditions": [
            {
              "access": "'originPriceWithoutTax'",
              "if": "$current.originPriceWithoutTax.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyValueTaxParams('originPriceWithoutTax', 'PRICE_WITHOUT_TAX', 'ORIGIN_SEG_OFFSET', $current.calcBase, $current.calcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.baseQty, $variable.auxQty, $variable.transQty, $variable.transAuxQty, $variable.trans2Qty, $variable.trans2AuxQty, $variable.valuatingQty, $variable.valuatingUom, $current.product.cnvDirection, $variable.measureDef.unitCnvType)",
                "field": "$variable.dblQtyValueTaxParams"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "false",
                "field": "isPriceWithTax",
                "when": "'isPriceWithTax'"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-output-originPriceWithoutTax",
          "description": "回写 原币无税单价",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'originPriceWithoutTax'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 原币无税单价",
              "params": {
                "autoClear": true,
                "expr": "$variable.dblQtyValueTaxResult.originPriceWithoutTax",
                "field": "originPriceWithoutTax",
                "override": true,
                "when": "$variable.dblQtyValueTaxResult.originPriceWithoutTax !== $current.originPriceWithoutTax"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-input-priceWithoutTax",
          "description": "输入 本币无税单价",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.priceWithoutTax"
            }
          ],
          "conditions": [
            {
              "access": "'priceWithoutTax'",
              "if": "$current.priceWithoutTax.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyValueTaxParams('priceWithoutTax', 'PRICE_WITHOUT_TAX', 'LOCAL_SEG_OFFSET', $current.calcBase, $current.calcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.baseQty, $variable.auxQty, $variable.transQty, $variable.transAuxQty, $variable.trans2Qty, $variable.trans2AuxQty, $variable.valuatingQty, $variable.valuatingUom, $current.product.cnvDirection, $variable.measureDef.unitCnvType)",
                "field": "$variable.dblQtyValueTaxParams"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "false",
                "field": "isPriceWithTax",
                "when": "'isPriceWithTax'"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-output-priceWithoutTax",
          "description": "回写 本币无税单价",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'priceWithoutTax'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 本币无税单价",
              "params": {
                "autoClear": true,
                "expr": "$variable.dblQtyValueTaxResult.priceWithoutTax",
                "field": "priceWithoutTax",
                "override": true,
                "when": "$variable.dblQtyValueTaxResult.priceWithoutTax !== $current.priceWithoutTax"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-input-originAmount",
          "description": "输入 原币价税合计",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.originAmount"
            }
          ],
          "conditions": [
            {
              "access": "'originAmount'",
              "if": "$current.originAmount.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyValueTaxParams('originAmount', 'AMOUNT', 'ORIGIN_SEG_OFFSET', $current.calcBase, $current.calcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.baseQty, $variable.auxQty, $variable.transQty, $variable.transAuxQty, $variable.trans2Qty, $variable.trans2AuxQty, $variable.valuatingQty, $variable.valuatingUom, $current.product.cnvDirection, $variable.measureDef.unitCnvType)",
                "field": "$variable.dblQtyValueTaxParams"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "true",
                "field": "isPriceWithTax",
                "when": "'isPriceWithTax'"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-output-originAmount",
          "description": "回写 原币价税合计",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'originAmount'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 原币价税合计",
              "params": {
                "autoClear": true,
                "expr": "$variable.dblQtyValueTaxResult.originAmount",
                "field": "originAmount",
                "override": true,
                "when": "$variable.dblQtyValueTaxResult.originAmount !== $current.originAmount"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-input-amount",
          "description": "输入 本币价税合计",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.amount"
            }
          ],
          "conditions": [
            {
              "access": "'amount'",
              "if": "$current.amount.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyValueTaxParams('amount', 'AMOUNT', 'LOCAL_SEG_OFFSET', $current.calcBase, $current.calcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.baseQty, $variable.auxQty, $variable.transQty, $variable.transAuxQty, $variable.trans2Qty, $variable.trans2AuxQty, $variable.valuatingQty, $variable.valuatingUom, $current.product.cnvDirection, $variable.measureDef.unitCnvType)",
                "field": "$variable.dblQtyValueTaxParams"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "true",
                "field": "isPriceWithTax",
                "when": "'isPriceWithTax'"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-output-amount",
          "description": "回写 本币价税合计",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'amount'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 本币价税合计",
              "params": {
                "autoClear": true,
                "expr": "$variable.dblQtyValueTaxResult.amount",
                "field": "amount",
                "override": true,
                "when": "$variable.dblQtyValueTaxResult.amount !== $current.amount"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-input-originAmountWithoutTax",
          "description": "输入 原币无税金额",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.originAmountWithoutTax"
            }
          ],
          "conditions": [
            {
              "access": "'originAmountWithoutTax'",
              "if": "$current.originAmountWithoutTax.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyValueTaxParams('originAmountWithoutTax', 'AMOUNT_WITHOUT_TAX', 'ORIGIN_SEG_OFFSET', $current.calcBase, $current.calcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.baseQty, $variable.auxQty, $variable.transQty, $variable.transAuxQty, $variable.trans2Qty, $variable.trans2AuxQty, $variable.valuatingQty, $variable.valuatingUom, $current.product.cnvDirection, $variable.measureDef.unitCnvType)",
                "field": "$variable.dblQtyValueTaxParams"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "false",
                "field": "isPriceWithTax",
                "when": "'isPriceWithTax'"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-output-originAmountWithoutTax",
          "description": "回写 原币无税金额",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'originAmountWithoutTax'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 原币无税金额",
              "params": {
                "autoClear": true,
                "expr": "$variable.dblQtyValueTaxResult.originAmountWithoutTax",
                "field": "originAmountWithoutTax",
                "override": true,
                "when": "$variable.dblQtyValueTaxResult.originAmountWithoutTax !== $current.originAmountWithoutTax"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-input-amountWithoutTax",
          "description": "输入 本币无税金额",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.amountWithoutTax"
            }
          ],
          "conditions": [
            {
              "access": "'amountWithoutTax'",
              "if": "$current.amountWithoutTax.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyValueTaxParams('amountWithoutTax', 'AMOUNT_WITHOUT_TAX', 'LOCAL_SEG_OFFSET', $current.calcBase, $current.calcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.baseQty, $variable.auxQty, $variable.transQty, $variable.transAuxQty, $variable.trans2Qty, $variable.trans2AuxQty, $variable.valuatingQty, $variable.valuatingUom, $current.product.cnvDirection, $variable.measureDef.unitCnvType)",
                "field": "$variable.dblQtyValueTaxParams"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "false",
                "field": "isPriceWithTax",
                "when": "'isPriceWithTax'"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-output-amountWithoutTax",
          "description": "回写 本币无税金额",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'amountWithoutTax'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 本币无税金额",
              "params": {
                "autoClear": true,
                "expr": "$variable.dblQtyValueTaxResult.amountWithoutTax",
                "field": "amountWithoutTax",
                "override": true,
                "when": "$variable.dblQtyValueTaxResult.amountWithoutTax !== $current.amountWithoutTax"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-input-originTaxAmount",
          "description": "输入 原币税额",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.originTaxAmount"
            }
          ],
          "conditions": [
            {
              "access": "'originTaxAmount'",
              "if": "$current.originTaxAmount.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyValueTaxParams('originTaxAmount', 'TAX', 'ORIGIN_SEG_OFFSET', $current.calcBase, $current.calcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.baseQty, $variable.auxQty, $variable.transQty, $variable.transAuxQty, $variable.trans2Qty, $variable.trans2AuxQty, $variable.valuatingQty, $variable.valuatingUom, $current.product.cnvDirection, $variable.measureDef.unitCnvType)",
                "field": "$variable.dblQtyValueTaxParams"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-output-originTaxAmount",
          "description": "回写 原币税额",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'originTaxAmount'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 原币税额",
              "params": {
                "autoClear": true,
                "expr": "$variable.dblQtyValueTaxResult.originTaxAmount",
                "field": "originTaxAmount",
                "override": true,
                "when": "$variable.dblQtyValueTaxResult.originTaxAmount !== $current.originTaxAmount"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-input-taxAmount",
          "description": "输入 本币税额",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.taxAmount"
            }
          ],
          "conditions": [
            {
              "access": "'taxAmount'",
              "if": "$current.taxAmount.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getDblQtyValueTaxParams('taxAmount', 'TAX', 'LOCAL_SEG_OFFSET', $current.calcBase, $current.calcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.baseQty, $variable.auxQty, $variable.transQty, $variable.transAuxQty, $variable.trans2Qty, $variable.trans2AuxQty, $variable.valuatingQty, $variable.valuatingUom, $current.product.cnvDirection, $variable.measureDef.unitCnvType)",
                "field": "$variable.dblQtyValueTaxParams"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-output-taxAmount",
          "description": "回写 本币税额",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'taxAmount'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 本币税额",
              "params": {
                "autoClear": true,
                "expr": "$variable.dblQtyValueTaxResult.taxAmount",
                "field": "taxAmount",
                "override": true,
                "when": "$variable.dblQtyValueTaxResult.taxAmount !== $current.taxAmount"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-input-calcBase",
          "description": "输入 计算标志位",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.calcBase"
            }
          ],
          "conditions": [
            {
              "access": "'calcBase'",
              "if": "$current.calcBase.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.dblQtyValueTaxInitParams",
                "field": "$variable.dblQtyValueTaxParams"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-output-calcBase",
          "description": "回写 计算标志位",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'calcBase'",
              "if": "!$current.calcBase.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 计算标志位",
              "params": {
                "autoClear": true,
                "expr": "$variable.dblQtyValueTaxResult.calcBase",
                "field": "calcBase",
                "override": true,
                "when": "$variable.dblQtyValueTaxResult.calcBase !== $current.calcBase"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-blur-originPrice-change-calcBase",
          "description": "原币含税单价 失焦 更新标志位",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Blur",
              "target": "$current.originPrice"
            }
          ],
          "conditions": [
            {
              "access": "'originPrice'",
              "if": "$fn.isBaseOnLockPrice($current.calcBase)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "autoClear": true,
                "expr": "$fn.clearLockPrice($current.calcBase)",
                "field": "calcBase",
                "override": true,
                "when": "!$variable.originPrice"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-blur-price-change-calcBase",
          "description": "本币含税单价 失焦 更新标志位",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Blur",
              "target": "$current.price"
            }
          ],
          "conditions": [
            {
              "access": "'price'",
              "if": "$fn.isBaseOnLockPrice($current.calcBase)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "autoClear": true,
                "expr": "$fn.clearLockPrice($current.calcBase)",
                "field": "calcBase",
                "override": true,
                "when": "!$variable.price"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-blur-originPriceWithoutTax-change-calcBase",
          "description": "原币无税单价 失焦 更新标志位",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Blur",
              "target": "$current.originPriceWithoutTax"
            }
          ],
          "conditions": [
            {
              "access": "'originPriceWithoutTax'",
              "if": "$fn.isBaseOnLockPrice($current.calcBase)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "autoClear": true,
                "expr": "$fn.clearLockPrice($current.calcBase)",
                "field": "calcBase",
                "override": true,
                "when": "!$variable.originPriceWithoutTax"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-blur-priceWithoutTax-change-calcBase",
          "description": "本币无税单价 失焦 更新标志位",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Blur",
              "target": "$current.priceWithoutTax"
            }
          ],
          "conditions": [
            {
              "access": "'priceWithoutTax'",
              "if": "$fn.isBaseOnLockPrice($current.calcBase)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "autoClear": true,
                "expr": "$fn.clearLockPrice($current.calcBase)",
                "field": "calcBase",
                "override": true,
                "when": "!$variable.priceWithoutTax"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-input-baseQty-change-valuatingQty",
          "description": "输入 主数量 计价数量更新",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.transQty"
            }
          ],
          "conditions": [
            {
              "access": "'baseQty'",
              "if": "'baseQty' !== 'transQty'"
            },
            {
              "access": "'baseQty'",
              "if": "$current.baseQty.$focused && !$current.transQty.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "更新计价数量 执行计算 将计算结果写入变量",
              "params": {
                "expr": "$fn.qtyValueTax($fn.currencyParamsResolver, $context.systemSettings, $variable.valuatingQtyCalcParams, $variable.valuatingQtyParams, true)",
                "field": "$variable.dblQtyValueTaxResult",
                "override": true,
                "when": "$fn.needCalc($variable.valuatingQtyCalcParams)"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-input-auxQty-change-valuatingQty",
          "description": "输入 辅数量 计价数量更新",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.transQty"
            }
          ],
          "conditions": [
            {
              "access": "'auxQty'",
              "if": "'auxQty' !== 'transQty'"
            },
            {
              "access": "'auxQty'",
              "if": "$current.auxQty.$focused && !$current.transQty.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "更新计价数量 执行计算 将计算结果写入变量",
              "params": {
                "expr": "$fn.qtyValueTax($fn.currencyParamsResolver, $context.systemSettings, $variable.valuatingQtyCalcParams, $variable.valuatingQtyParams, true)",
                "field": "$variable.dblQtyValueTaxResult",
                "override": true,
                "when": "$fn.needCalc($variable.valuatingQtyCalcParams)"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-input-transQty-change-valuatingQty",
          "description": "输入 交易数量 计价数量更新",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.transQty"
            }
          ],
          "conditions": [
            {
              "access": "'transQty'",
              "if": "'transQty' !== 'transQty'"
            },
            {
              "access": "'transQty'",
              "if": "$current.transQty.$focused && !$current.transQty.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "更新计价数量 执行计算 将计算结果写入变量",
              "params": {
                "expr": "$fn.qtyValueTax($fn.currencyParamsResolver, $context.systemSettings, $variable.valuatingQtyCalcParams, $variable.valuatingQtyParams, true)",
                "field": "$variable.dblQtyValueTaxResult",
                "override": true,
                "when": "$fn.needCalc($variable.valuatingQtyCalcParams)"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-input-transAuxQty-change-valuatingQty",
          "description": "输入 交易辅数量 计价数量更新",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.transQty"
            }
          ],
          "conditions": [
            {
              "access": "'baseQty'",
              "if": "'baseQty' !== 'transQty'"
            },
            {
              "access": "'baseQty'",
              "if": "$current.baseQty.$focused && !$current.transQty.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "更新计价数量 执行计算 将计算结果写入变量",
              "params": {
                "expr": "$fn.qtyValueTax($fn.currencyParamsResolver, $context.systemSettings, $variable.valuatingQtyCalcParams, $variable.valuatingQtyParams, true)",
                "field": "$variable.dblQtyValueTaxResult",
                "override": true,
                "when": "$fn.needCalc($variable.valuatingQtyCalcParams)"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-input-trans2Qty-change-valuatingQty",
          "description": "输入 交易2数量 计价数量更新",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.transQty"
            }
          ],
          "conditions": [
            {
              "access": "''",
              "if": "'' !== 'transQty'"
            },
            {
              "access": "''",
              "if": "$current..$focused && !$current.transQty.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "更新计价数量 执行计算 将计算结果写入变量",
              "params": {
                "expr": "$fn.qtyValueTax($fn.currencyParamsResolver, $context.systemSettings, $variable.valuatingQtyCalcParams, $variable.valuatingQtyParams, true)",
                "field": "$variable.dblQtyValueTaxResult",
                "override": true,
                "when": "$fn.needCalc($variable.valuatingQtyCalcParams)"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-input-trans2AuxQty-change-valuatingQty",
          "description": "输入 交易2辅数量 计价数量更新",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.transQty"
            }
          ],
          "conditions": [
            {
              "access": "''",
              "if": "'' !== 'transQty'"
            },
            {
              "access": "''",
              "if": "$current..$focused && !$current.transQty.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "更新计价数量 执行计算 将计算结果写入变量",
              "params": {
                "expr": "$fn.qtyValueTax($fn.currencyParamsResolver, $context.systemSettings, $variable.valuatingQtyCalcParams, $variable.valuatingQtyParams, true)",
                "field": "$variable.dblQtyValueTaxResult",
                "override": true,
                "when": "$fn.needCalc($variable.valuatingQtyCalcParams)"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-input-valuatingUom-change-valuatingQty",
          "description": "修改 计价单位 计价数量更新",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.transQty"
            }
          ],
          "conditions": [
            {
              "access": "'transUnit'",
              "if": "$current.transUnit.$focused && !$current.transQty.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "更新计价数量 执行计算 将计算结果写入变量",
              "params": {
                "expr": "$fn.qtyValueTax($fn.currencyParamsResolver, $context.systemSettings, $variable.valuatingQtyCalcParams, $variable.valuatingQtyParams, true)",
                "field": "$variable.dblQtyValueTaxResult",
                "override": true,
                "when": "$fn.needCalc($variable.valuatingQtyCalcParams)"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-execute-calc",
          "description": "执行计算",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.dblQtyValueTaxParams"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "执行计算 将计算结果写入变量",
              "params": {
                "expr": "$fn.qtyValueTax($fn.currencyParamsResolver, $context.systemSettings, $variable.dblQtyValueTaxParams, $variable.valuatingQtyParams)",
                "field": "$variable.dblQtyValueTaxResult",
                "override": true,
                "when": "$fn.needCalc($variable.dblQtyValueTaxParams)"
              }
            }
          ]
        },
        {
          "id": "dblQtyValueTax-execute-calc-automation",
          "description": "复制 自动执行计算",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Automation"
            }
          ],
          "conditions": [
            {
              "if": "$context.mode === 'Copy'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "执行计算 将计算结果写入变量",
              "params": {
                "expr": "$fn.qtyValueTax($fn.currencyParamsResolver, $context.systemSettings, $variable.dblQtyValueTaxParams, $variable.valuatingQtyParams)",
                "field": "$variable.dblQtyValueTaxResult",
                "override": true,
                "when": "$fn.needCalc($variable.dblQtyValueTaxParams)"
              }
            }
          ]
        }
      ],
      "variables": {
        "amount": "$fn.getValue('amount')",
        "amountWithoutTax": "$fn.getValue('amountWithoutTax')",
        "auxQty": "$fn.getValue('auxQty')",
        "baseQty": "$fn.getValue('baseQty')",
        "currency": "$fn.getValue('currency')",
        "dblQtyPriceBitFlagConst": "",
        "dblQtyValueTaxInitParams": "$fn.getDblQtyValueTaxParams('auto', '', '', $current.calcBase, $current.calcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.baseQty, $variable.auxQty, $variable.transQty, $variable.transAuxQty, $variable.trans2Qty, $variable.trans2AuxQty, $variable.valuatingQty, $variable.valuatingUom, $current.product.cnvDirection, $variable.measureDef.unitCnvType)",
        "dblQtyValueTaxParams": "$variable.dblQtyValueTaxInitParams",
        "dblQtyValueTaxResult": "$variable.dblQtyValueTaxInitParams",
        "dblQtyValueTaxTempCalcBase": "$fn.setPriceBitFlagConst($current.calcBase, $variable.dblQtyPriceBitFlagConst)",
        "exchangeRate": "$fn.getValue('exchangeRate')",
        "measureDef": "$fn.getMeasureDef($current.product)",
        "originAmount": "$fn.getValue('originAmount')",
        "originAmountWithoutTax": "$fn.getValue('originAmountWithoutTax')",
        "originPrice": "$fn.getValue('originPrice')",
        "originPriceWithoutTax": "$fn.getValue('originPriceWithoutTax')",
        "originTaxAmount": "$fn.getValue('originTaxAmount')",
        "price": "$fn.getValue('price')",
        "priceWithoutTax": "$fn.getValue('priceWithoutTax')",
        "taxAmount": "$fn.getValue('taxAmount')",
        "taxRate": "$fn.getValue('taxRate')",
        "trans2AuxQty": "$fn.getValue('')",
        "trans2Qty": "$fn.getValue('')",
        "transAuxQty": "$fn.getValue('baseQty')",
        "transQty": "$fn.getValue('transQty')",
        "valuatingQty": "$fn.getValue('transQty')",
        "valuatingQtyCalcParams": "$fn.getDblQtyValueTaxParams('auto', '', '', $variable.dblQtyValueTaxTempCalcBase, $current.calcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.baseQty, $variable.auxQty, $variable.transQty, $variable.transAuxQty, $variable.trans2Qty, $variable.trans2AuxQty, $variable.valuatingQty, $variable.valuatingUom, $current.product.cnvDirection, $variable.measureDef.unitCnvType)",
        "valuatingQtyParams": "$fn.getValuatingParams($current.product.baseUnitGroup, $current.product.auxUnitGroup, $variable.valuatingUom, 'transQty', 'baseQty', 'auxQty', 'transQty', 'baseQty', '', '')",
        "valuatingUom": "$fn.getValue('transUnit')"
      },
      "fns": [
        {
          "name": "getDblQtyValueTaxParams",
          "description": "量价计算 参数装配",
          "value": "/**\n* @export\n* @param {API} api\n*/\nexport default function (api) {\n  return function (currentField,bitFlagConst,offsetConst,calcBase,calcBaseHigh,currency,exchangeRate,taxRate,originPrice,price,originPriceWithoutTax,priceWithoutTax,originAmount,amount,originAmountWithoutTax,amountWithoutTax,originTaxAmount,taxAmount,baseQty,auxQty,transQty,transAuxQty,trans2Qty,trans2AuxQty,valuatingQty,valuatingUom,cnvDirection,unitCnvType) {\n    const isPriceWithTax = api.getNode().getValue('isPriceWithTax');\n    const id = api.getNode().getValue('id');\n    const src = api.getNode().getValue('srcObject');\n    const needUpgrade = !!id || !!src;\n    const result = {\n      currentField,\n      bitFlagConst,\n      offsetConst,\n      calcBase,\n      calcBaseHigh,\n      isPriceWithTax,\n      currency,\n      exchangeRate,\n      taxRate,\n      baseQty,\n      auxQty,\n      transQty,\n      transAuxQty,\n      trans2Qty,\n      trans2AuxQty,\n      valuatingQty,\n      valuatingUom,\n      originPrice,\n      price,\n      originPriceWithoutTax,\n      priceWithoutTax,\n      originAmount,\n      amount,\n      originAmountWithoutTax,\n      amountWithoutTax,\n      originTaxAmount,\n      taxAmount,\n      cnvDirection,\n      unitCnvType,\n      needUpgrade,\n    };\n    console.log('Calc Log: dblQtyValueTax params', result);\n    return result;\n  }\n}\n",
          "declare": "(currentField:any,bitFlagConst:any,offsetConst:any,calcBase:any,calcBaseHigh:any,currency:any,exchangeRate:any,taxRate:any,originPrice:any,price:any,originPriceWithoutTax:any,priceWithoutTax:any,originAmount:any,amount:any,originAmountWithoutTax:any,amountWithoutTax:any,originTaxAmount:any,taxAmount:any,baseQty:any,auxQty:any,transQty:any,transAuxQty:any,trans2Qty:any,trans2AuxQty:any,valuatingQty:any,valuatingUom:any,cnvDirection:any,unitCnvType:any) => any"
        },
        {
          "name": "getValue",
          "description": "获取当前 field 的值",
          "value": "/**\n* @export\n* @param {API} api\n*/\nexport default function (api) {\n  return function (fieldName) {\n    if (!fieldName) {\n      return undefined;\n    }\n    if (fieldName.includes('$')) {\n      return fieldName;\n    }\n    return api.getNode().getValue(fieldName);\n  }\n}",
          "declare": "(fieldName:any) => any"
        }
      ]
    },
    {
      "id": "DblQtyControl-Internal-6DB82DB194284F0/Internal-DblQtyControl",
      "items": [
        {
          "id": "29981ded-caba-45f4-947b-6cf0f3137ab6",
          "description": "设置 辅单位 字段只读",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.product"
            },
            {
              "event": "Automation"
            }
          ],
          "conditions": [
            {
              "access": "'auxUnit'"
            }
          ],
          "actions": [
            {
              "name": "FieldStatus",
              "params": {
                "expr": "true",
                "field": "auxUnit",
                "status": "Readonly",
                "when": "!$variable.measureDef.isDualUnitGroup && !$current.auxUnit"
              }
            }
          ]
        },
        {
          "id": "6249f459-5112-4360-9398-32df89026915",
          "description": "设置 辅数量 字段只读",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.product"
            },
            {
              "event": "Automation"
            }
          ],
          "conditions": [
            {
              "access": "'auxQty'"
            }
          ],
          "actions": [
            {
              "name": "FieldStatus",
              "params": {
                "expr": "true",
                "field": "auxQty",
                "status": "Readonly",
                "when": "!$variable.measureDef.isDualUnitGroup && !$current.auxUnit"
              }
            }
          ]
        },
        {
          "id": "fe91ef93-7ec1-4a3a-9a24-06ba864d26d5",
          "description": "设置 换算率 字段只读",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.product"
            },
            {
              "event": "Change",
              "target": "$current.product.unitCnvType"
            },
            {
              "event": "Automation"
            }
          ],
          "conditions": [
            {
              "access": "'baseAuxToBaseRate'"
            }
          ],
          "actions": [
            {
              "name": "FieldStatus",
              "params": {
                "expr": "true",
                "field": "baseAuxToBaseRate",
                "status": "Readonly",
                "when": "!$variable.measureDef.isDualUnitGroup || !$current.product.unitCnvType || $current.product.unitCnvType.id !== 'UnitCnvType.floating'"
              }
            }
          ]
        },
        {
          "id": "d37f23b8-df70-4fe5-aa7a-08a5c8395ab6",
          "description": "设置 交易辅单位 字段只读",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.product"
            },
            {
              "event": "Automation"
            }
          ],
          "conditions": [
            {
              "access": "'baseUnit'"
            }
          ],
          "actions": [
            {
              "name": "FieldStatus",
              "params": {
                "expr": "true",
                "field": "baseUnit",
                "status": "Readonly",
                "when": "!$variable.measureDef.isDualUnitGroup && !$current.baseUnit"
              }
            }
          ]
        },
        {
          "id": "8444f24c-04d0-46c1-9b01-196c949f9084",
          "description": "设置 交易辅数量 字段只读",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.product"
            },
            {
              "event": "Automation"
            }
          ],
          "conditions": [
            {
              "access": "'baseQty'"
            }
          ],
          "actions": [
            {
              "name": "FieldStatus",
              "params": {
                "expr": "true",
                "field": "baseQty",
                "status": "Readonly",
                "when": "!$variable.measureDef.isDualUnitGroup && !$current.baseUnit"
              }
            }
          ]
        },
        {
          "id": "b2a2cc6c-8709-4b87-9481-65399d81128e",
          "description": "设置 交易换算率 字段只读",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.product"
            },
            {
              "event": "Change",
              "target": "$current.transUnitCnvType"
            },
            {
              "event": "Automation"
            }
          ],
          "conditions": [
            {
              "access": "'transToBaseRate'"
            }
          ],
          "actions": [
            {
              "name": "FieldStatus",
              "params": {
                "expr": "true",
                "field": "transToBaseRate",
                "status": "Readonly",
                "when": "!$variable.measureDef.isDualUnitGroup || !$current.transUnitCnvType || $current.transUnitCnvType.id !== 'UnitCnvType.floating'"
              }
            }
          ]
        },
        {
          "id": "f94ad851-063f-424f-a7f1-41fad89937a4",
          "description": "设置 交易2辅单位 字段只读",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.product"
            },
            {
              "event": "Automation"
            }
          ],
          "conditions": [
            {
              "access": "''"
            }
          ],
          "actions": [
            {
              "name": "FieldStatus",
              "params": {
                "expr": "true",
                "field": "",
                "status": "Readonly",
                "when": "!$variable.measureDef.isDualUnitGroup && !$current."
              }
            }
          ]
        },
        {
          "id": "429504b9-cf3b-47ed-8e9d-bf3cfcfe4868",
          "description": "设置 交易2辅数量 字段只读",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.product"
            },
            {
              "event": "Automation"
            }
          ],
          "conditions": [
            {
              "access": "''"
            }
          ],
          "actions": [
            {
              "name": "FieldStatus",
              "params": {
                "expr": "true",
                "field": "",
                "status": "Readonly",
                "when": "!$variable.measureDef.isDualUnitGroup && !$current."
              }
            }
          ]
        },
        {
          "id": "ae01b62a-7778-43b7-804c-c215097fa5a9",
          "description": "设置 交易2换算率 字段只读",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.product"
            },
            {
              "event": "Change",
              "target": "$current."
            },
            {
              "event": "Automation"
            }
          ],
          "conditions": [
            {
              "access": "''"
            }
          ],
          "actions": [
            {
              "name": "FieldStatus",
              "params": {
                "expr": "true",
                "field": "",
                "status": "Readonly",
                "when": "!$variable.measureDef.isDualUnitGroup || !$current. || $current..id !== 'UnitCnvType.floating'"
              }
            }
          ]
        }
      ],
      "variables": {
        "measureDef": "$fn.getMeasureDef($current.product)",
        "skipBaseAux": "$fn.shouldSkipAux('baseQty', 'auxQty')",
        "skipTrans2Aux": "$fn.shouldSkipAux('', '')",
        "skipTransAux": "$fn.shouldSkipAux('transQty', 'baseQty')"
      },
      "mappings": [
        {
          "name": "baseQty",
          "value": "baseQty"
        },
        {
          "name": "transUnitCnvType",
          "value": "transUnitCnvType"
        },
        {
          "name": "calcBase",
          "value": "calcBase"
        },
        {
          "name": "revenue",
          "value": ""
        },
        {
          "name": "priceWithoutTax",
          "value": "priceWithoutTax"
        },
        {
          "name": "invMgtType",
          "value": "$ProductStandardType.quantity"
        },
        {
          "name": "reference",
          "value": ""
        },
        {
          "name": "transAuxToTransRateNumerator",
          "value": "transCnvNumerator"
        },
        {
          "name": "originAmountWithoutTax",
          "value": "originAmountWithoutTax"
        },
        {
          "name": "valuatingQtyMeasureItemId",
          "value": "transQty"
        },
        {
          "name": "taxRate",
          "value": "taxRate"
        },
        {
          "name": "price",
          "value": "price"
        },
        {
          "name": "trans2Qty",
          "value": ""
        },
        {
          "name": "transAuxUom",
          "value": "baseUnit"
        },
        {
          "name": "cnvNumerator",
          "value": "product.cnvNumerator"
        },
        {
          "name": "localCurrency",
          "value": "$localCurrencyId"
        },
        {
          "name": "amount",
          "value": "amount"
        },
        {
          "name": "auxToBaseRateDenominator",
          "value": "baseCnvDenominator"
        },
        {
          "name": "amountWithoutTax",
          "value": "amountWithoutTax"
        },
        {
          "name": "trans2AuxToTransRate",
          "value": ""
        },
        {
          "name": "valuatingUom",
          "value": "transUnit"
        },
        {
          "name": "isPriceWithTax",
          "value": "isPriceWithTax"
        },
        {
          "name": "originTaxAmount",
          "value": "originTaxAmount"
        },
        {
          "name": "transQty",
          "value": "transQty"
        },
        {
          "name": "auxQty",
          "value": "auxQty"
        },
        {
          "name": "trans2UnitCnvType",
          "value": ""
        },
        {
          "name": "calcBaseHigh",
          "value": "calcBaseHigh"
        },
        {
          "name": "cnvDirection",
          "value": "product.cnvDirection"
        },
        {
          "name": "auxUom",
          "value": "auxUnit"
        },
        {
          "name": "trans2AuxUom",
          "value": ""
        },
        {
          "name": "originPrice",
          "value": "originPrice"
        },
        {
          "name": "originPriceWithoutTax",
          "value": "originPriceWithoutTax"
        },
        {
          "name": "auxToBaseRateNumerator",
          "value": "baseCnvNumerator"
        },
        {
          "name": "transAuxQty",
          "value": "baseQty"
        },
        {
          "name": "transAuxToTransRate",
          "value": "transToBaseRate"
        },
        {
          "name": "isMultiUnit",
          "value": "product.isMultiUnit"
        },
        {
          "name": "transUom",
          "value": "transUnit"
        },
        {
          "name": "transAuxToTransRateDenominator",
          "value": "transCnvDenominator"
        },
        {
          "name": "localExchangeRate",
          "value": "$localExchangeRate"
        },
        {
          "name": "trans2AuxQty",
          "value": ""
        },
        {
          "name": "baseUom",
          "value": "baseUnit"
        },
        {
          "name": "isDualUnitGroup",
          "value": "product.isDualUnitGroup"
        },
        {
          "name": "measureGroupId",
          "value": "originWorth"
        },
        {
          "name": "auxToBaseRate",
          "value": "baseAuxToBaseRate"
        },
        {
          "name": "cnvDenominator",
          "value": "product.cnvDenominator"
        },
        {
          "name": "exchangeRate",
          "value": "exchangeRate"
        },
        {
          "name": "baseUnitCnvType",
          "value": "product.unitCnvType"
        },
        {
          "name": "originAmount",
          "value": "originAmount"
        },
        {
          "name": "product",
          "value": "product"
        },
        {
          "name": "currency",
          "value": "currency"
        },
        {
          "name": "taxAmount",
          "value": "taxAmount"
        },
        {
          "name": "unitCnvType",
          "value": "product.unitCnvType"
        },
        {
          "name": "baseUnitGroup",
          "value": "product.baseUnitGroup"
        },
        {
          "name": "auxUnitGroup",
          "value": "product.auxUnitGroup"
        },
        {
          "name": "valuatingQty",
          "value": "transQty"
        },
        {
          "name": "cost",
          "value": ""
        }
      ]
    },
    {
      "id": "Calc-Internal-A679E3F549C3489/Calc-SEQW",
      "items": [],
      "fns": [
        {
          "name": "getQtyValueTaxParams",
          "description": "量价计算 参数装配",
          "value": "/**\n* @export\n* @param {API} api\n*/\nexport default function (api) {\n  return function (currentField,bitFlagConst,offsetConst,calcBase,calcBaseHigh,currency,exchangeRate,taxRate,originPrice,price,originPriceWithoutTax,priceWithoutTax,originAmount,amount,originAmountWithoutTax,amountWithoutTax,originTaxAmount,taxAmount,valuatingQty,valuatingUom) {\n    const isPriceWithTax = api.getNode().getValue('isPriceWithTax');\n    const id = api.getNode().getValue('id');\n    const src = api.getNode().getValue('srcObject');\n    const needUpgrade = !!id || !!src;\n    const result = {\n      currentField,\n      bitFlagConst,\n      offsetConst,\n      calcBase,\n      calcBaseHigh,\n      isPriceWithTax,\n      currency,\n      exchangeRate,\n      taxRate,\n      originPrice,\n      price,\n      originPriceWithoutTax,\n      priceWithoutTax,\n      originAmount,\n      amount,\n      originAmountWithoutTax,\n      amountWithoutTax,\n      originTaxAmount,\n      taxAmount,\n      valuatingQty,\n      valuatingUom,\n      needUpgrade,\n    };\n    console.log('Calc Log: qtyValueTax params', result);\n    return result;\n  }\n}\n",
          "declare": "(currentField:any,bitFlagConst:any,offsetConst:any,calcBase:any,calcBaseHigh:any,currency:any,exchangeRate:any,taxRate:any,originPrice:any,price:any,originPriceWithoutTax:any,priceWithoutTax:any,originAmount:any,amount:any,originAmountWithoutTax:any,amountWithoutTax:any,originTaxAmount:any,taxAmount:any,valuatingQty:any,valuatingUom:any) => any"
        },
        {
          "name": "getValue",
          "description": "获取当前 field 的值",
          "value": "/**\n* @export\n* @param {API} api\n*/\nexport default function (api) {\n  return function (fieldName) {\n    if (!fieldName) {\n      return undefined;\n    }\n    if (fieldName.includes('$')) {\n      return fieldName;\n    }\n    return api.getNode().getValue(fieldName);\n  }\n}",
          "declare": "(fieldName:any) => any"
        }
      ],
      "mappings": [
        {
          "name": "originAmountWithoutTax",
          "value": "originAmountWithoutTax"
        },
        {
          "name": "transUom",
          "value": "baseUnit"
        },
        {
          "name": "revenue",
          "value": ""
        },
        {
          "name": "cost",
          "value": ""
        },
        {
          "name": "originPriceWithoutTax",
          "value": "originBasePriceWithoutTax"
        },
        {
          "name": "reference",
          "value": "purOrderItems"
        },
        {
          "name": "amount",
          "value": "amount"
        },
        {
          "name": "amountWithoutTax",
          "value": "amountWithoutTax"
        },
        {
          "name": "isPriceWithTax",
          "value": "isPriceWithTax"
        },
        {
          "name": "originTaxAmount",
          "value": "originTaxAmount"
        },
        {
          "name": "valuatingQtyMeasureItemId",
          "value": "transQty"
        },
        {
          "name": "localCurrency",
          "value": "$localCurrencyId"
        },
        {
          "name": "transQty",
          "value": "baseQty"
        },
        {
          "name": "measureGroupId",
          "value": "localWorth"
        },
        {
          "name": "originPrice",
          "value": "originBasePrice"
        },
        {
          "name": "valuatingQty",
          "value": "baseQty"
        },
        {
          "name": "localExchangeRate",
          "value": "$localExchangeRate"
        },
        {
          "name": "calcBase",
          "value": "coCalcBase"
        },
        {
          "name": "price",
          "value": "basePrice"
        },
        {
          "name": "taxAmount",
          "value": "taxAmount"
        },
        {
          "name": "invMgtType",
          "value": "$ProductStandardType.quantity"
        },
        {
          "name": "product",
          "value": "product"
        },
        {
          "name": "calcBaseHigh",
          "value": "coCalcBaseHigh"
        },
        {
          "name": "currency",
          "value": "currency"
        },
        {
          "name": "priceWithoutTax",
          "value": "basePriceWithoutTax"
        },
        {
          "name": "exchangeRate",
          "value": "exchangeRate"
        },
        {
          "name": "originAmount",
          "value": "originAmount"
        },
        {
          "name": "taxRate",
          "value": "taxRate"
        },
        {
          "name": "valuatingUom",
          "value": "baseUnit"
        }
      ]
    },
    {
      "id": "Calc-Internal-A679E3F549C3489/Calc-SEQW/4e408e40-67a4-459c-8320-b23dfa6cddc3/Calc-QtyValueTax",
      "items": [
        {
          "id": "qtyValueTax-change-currency",
          "description": "修改 币种",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.currency"
            }
          ],
          "conditions": [
            {
              "access": "'currency'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.qtyValueTaxInitParams",
                "field": "$variable.qtyValueTaxParams"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-change-exchangeRate",
          "description": "修改 汇率",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.exchangeRate"
            }
          ],
          "conditions": [
            {
              "access": "'exchangeRate'",
              "if": "!$fn.writeExchangeRate($current.coCalcBaseHigh)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.qtyValueTaxInitParams",
                "field": "$variable.qtyValueTaxParams"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-output-exchangeRate",
          "description": "回写 汇率",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.qtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'exchangeRate'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 汇率",
              "params": {
                "autoClear": true,
                "expr": "$variable.qtyValueTaxResult.exchangeRate",
                "field": "exchangeRate",
                "override": true,
                "when": "$fn.writeExchangeRate($current.coCalcBaseHigh)"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-change-taxRate",
          "description": "修改 税率",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.taxRate"
            }
          ],
          "conditions": [
            {
              "access": "'taxRate'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getQtyValueTaxParams('taxRate', 'TAX_RATE', '', $current.coCalcBase, $current.coCalcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.valuatingQty, $variable.valuatingUom)",
                "field": "$variable.qtyValueTaxParams"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-qty-calcBase",
          "description": "输入数量 计算标志位特殊处理",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Focus",
              "target": "$current.baseQty"
            }
          ],
          "conditions": [
            {
              "access": "'baseQty'",
              "if": "$current.baseQty.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "输入数量 计算标志位特殊处理",
              "params": {
                "expr": "$fn.getInputQtyBitFlagConst($current.coCalcBase, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax)",
                "field": "$variable.qtyValueTaxPriceBitFlagConst"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-input-qty",
          "description": "输入 数量",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.baseQty"
            }
          ],
          "conditions": [
            {
              "access": "'baseQty'",
              "if": "$current.baseQty.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getQtyValueTaxParams('valuatingQty', 'QTY', 'QTY_SEG_OFFSET', $variable.qtyValueTaxTempCalcBase, $current.coCalcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.valuatingQty, $variable.valuatingUom)",
                "field": "$variable.qtyValueTaxParams"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-change-qty",
          "description": "修改 数量",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.baseQty"
            }
          ],
          "conditions": [
            {
              "access": "'baseQty'",
              "if": "!$current.baseQty.$focused && $fn.isBaseOnQtyLock($current.coCalcBaseHigh)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.qtyValueTaxInitParams",
                "field": "$variable.qtyValueTaxParams"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-output-qty",
          "description": "回写 数量",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.qtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'baseQty'",
              "if": "$fn.writeQty($variable.qtyValueTaxResult.calcBase, $variable.qtyValueTaxResult.calcBaseHigh)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 数量",
              "params": {
                "autoClear": true,
                "expr": "$variable.qtyValueTaxResult.valuatingQty",
                "field": "baseQty",
                "override": true,
                "when": "$variable.qtyValueTaxResult.valuatingQty !== $current.baseQty"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-input-originPrice",
          "description": "输入 原币含税单价",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.originBasePrice"
            }
          ],
          "conditions": [
            {
              "access": "'originBasePrice'",
              "if": "$current.originBasePrice.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getQtyValueTaxParams('originPrice', 'PRICE', 'ORIGIN_SEG_OFFSET', $current.coCalcBase, $current.coCalcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.valuatingQty, $variable.valuatingUom)",
                "field": "$variable.qtyValueTaxParams"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "true",
                "field": "isPriceWithTax",
                "when": "'isPriceWithTax'"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-output-originPrice",
          "description": "回写 原币含税单价",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.qtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'originBasePrice'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 原币含税单价",
              "params": {
                "autoClear": true,
                "expr": "$variable.qtyValueTaxResult.originPrice",
                "field": "originBasePrice",
                "override": true,
                "when": "$variable.qtyValueTaxResult.originPrice !== $current.originBasePrice"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-input-price",
          "description": "输入 本币含税单价",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.basePrice"
            }
          ],
          "conditions": [
            {
              "access": "'basePrice'",
              "if": "$current.basePrice.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getQtyValueTaxParams('price', 'PRICE', 'LOCAL_SEG_OFFSET', $current.coCalcBase, $current.coCalcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.valuatingQty, $variable.valuatingUom)",
                "field": "$variable.qtyValueTaxParams"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "true",
                "field": "isPriceWithTax",
                "when": "'isPriceWithTax'"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-output-price",
          "description": "回写 本币含税单价",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.qtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'basePrice'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 本币含税单价",
              "params": {
                "autoClear": true,
                "expr": "$variable.qtyValueTaxResult.price",
                "field": "basePrice",
                "override": true,
                "when": "$variable.qtyValueTaxResult.price !== $current.basePrice"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-input-originPriceWithoutTax",
          "description": "输入 原币无税单价",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.originBasePriceWithoutTax"
            }
          ],
          "conditions": [
            {
              "access": "'originBasePriceWithoutTax'",
              "if": "$current.originBasePriceWithoutTax.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getQtyValueTaxParams('originPriceWithoutTax', 'PRICE_WITHOUT_TAX', 'ORIGIN_SEG_OFFSET', $current.coCalcBase, $current.coCalcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.valuatingQty, $variable.valuatingUom)",
                "field": "$variable.qtyValueTaxParams"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "false",
                "field": "isPriceWithTax",
                "when": "'isPriceWithTax'"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-output-originPriceWithoutTax",
          "description": "回写 原币无税单价",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.qtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'originBasePriceWithoutTax'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 原币无税单价",
              "params": {
                "autoClear": true,
                "expr": "$variable.qtyValueTaxResult.originPriceWithoutTax",
                "field": "originBasePriceWithoutTax",
                "override": true,
                "when": "$variable.qtyValueTaxResult.originPriceWithoutTax !== $current.originBasePriceWithoutTax"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-input-priceWithoutTax",
          "description": "输入 本币无税单价",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.basePriceWithoutTax"
            }
          ],
          "conditions": [
            {
              "access": "'basePriceWithoutTax'",
              "if": "$current.basePriceWithoutTax.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getQtyValueTaxParams('priceWithoutTax', 'PRICE_WITHOUT_TAX', 'LOCAL_SEG_OFFSET', $current.coCalcBase, $current.coCalcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.valuatingQty, $variable.valuatingUom)",
                "field": "$variable.qtyValueTaxParams"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "false",
                "field": "isPriceWithTax",
                "when": "'isPriceWithTax'"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-output-priceWithoutTax",
          "description": "回写 本币无税单价",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.qtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'basePriceWithoutTax'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 本币无税单价",
              "params": {
                "autoClear": true,
                "expr": "$variable.qtyValueTaxResult.priceWithoutTax",
                "field": "basePriceWithoutTax",
                "override": true,
                "when": "$variable.qtyValueTaxResult.priceWithoutTax !== $current.basePriceWithoutTax"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-input-originAmount",
          "description": "输入 原币价税合计",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.originAmount"
            }
          ],
          "conditions": [
            {
              "access": "'originAmount'",
              "if": "$current.originAmount.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getQtyValueTaxParams('originAmount', 'AMOUNT', 'ORIGIN_SEG_OFFSET', $current.coCalcBase, $current.coCalcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.valuatingQty, $variable.valuatingUom)",
                "field": "$variable.qtyValueTaxParams"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "true",
                "field": "isPriceWithTax",
                "when": "'isPriceWithTax'"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-change-originAmount",
          "description": "修改 原币价税合计",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.originAmount"
            }
          ],
          "conditions": [
            {
              "access": "'originAmount'",
              "if": "!$current.originAmount.$focused && $fn.isBaseOnAmountLock($current.coCalcBaseHigh)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.qtyValueTaxInitParams",
                "field": "$variable.qtyValueTaxParams"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-output-originAmount",
          "description": "回写 原币价税合计",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.qtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'originAmount'",
              "if": "!$fn.isBaseOnAmountLock($current.coCalcBaseHigh)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 原币价税合计",
              "params": {
                "autoClear": true,
                "expr": "$variable.qtyValueTaxResult.originAmount",
                "field": "originAmount",
                "override": true,
                "when": "$variable.qtyValueTaxResult.originAmount !== $current.originAmount"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-input-amount",
          "description": "输入 本币价税合计",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.amount"
            }
          ],
          "conditions": [
            {
              "access": "'amount'",
              "if": "$current.amount.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getQtyValueTaxParams('amount', 'AMOUNT', 'LOCAL_SEG_OFFSET', $current.coCalcBase, $current.coCalcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.valuatingQty, $variable.valuatingUom)",
                "field": "$variable.qtyValueTaxParams"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "true",
                "field": "isPriceWithTax",
                "when": "'isPriceWithTax'"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-change-amount",
          "description": "修改 本币价税合计",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.amount"
            }
          ],
          "conditions": [
            {
              "access": "'amount'",
              "if": "!$current.amount.$focused && $fn.isBaseOnAmountLock($current.coCalcBaseHigh)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.qtyValueTaxInitParams",
                "field": "$variable.qtyValueTaxParams"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-output-amount",
          "description": "回写 本币价税合计",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.qtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'amount'",
              "if": "!$fn.isBaseOnAmountLock($current.coCalcBaseHigh)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 本币价税合计",
              "params": {
                "autoClear": true,
                "expr": "$variable.qtyValueTaxResult.amount",
                "field": "amount",
                "override": true,
                "when": "$variable.qtyValueTaxResult.amount !== $current.amount"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-input-originAmountWithoutTax",
          "description": "输入 原币无税金额",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.originAmountWithoutTax"
            }
          ],
          "conditions": [
            {
              "access": "'originAmountWithoutTax'",
              "if": "$current.originAmountWithoutTax.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getQtyValueTaxParams('originAmountWithoutTax', 'AMOUNT_WITHOUT_TAX', 'ORIGIN_SEG_OFFSET', $current.coCalcBase, $current.coCalcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.valuatingQty, $variable.valuatingUom)",
                "field": "$variable.qtyValueTaxParams"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "false",
                "field": "isPriceWithTax",
                "when": "'isPriceWithTax'"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-change-originAmountWithoutTax",
          "description": "修改 原币无税金额",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.originAmountWithoutTax"
            }
          ],
          "conditions": [
            {
              "access": "'originAmountWithoutTax'",
              "if": "!$current.originAmountWithoutTax.$focused && $fn.isBaseOnAmountLock($current.coCalcBaseHigh)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.qtyValueTaxInitParams",
                "field": "$variable.qtyValueTaxParams"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-output-originAmountWithoutTax",
          "description": "回写 原币无税金额",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.qtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'originAmountWithoutTax'",
              "if": "!$fn.isBaseOnAmountLock($current.coCalcBaseHigh)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 原币无税金额",
              "params": {
                "autoClear": true,
                "expr": "$variable.qtyValueTaxResult.originAmountWithoutTax",
                "field": "originAmountWithoutTax",
                "override": true,
                "when": "$variable.qtyValueTaxResult.originAmountWithoutTax !== $current.originAmountWithoutTax"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-input-amountWithoutTax",
          "description": "输入 本币无税金额",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.amountWithoutTax"
            }
          ],
          "conditions": [
            {
              "access": "'amountWithoutTax'",
              "if": "$current.amountWithoutTax.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getQtyValueTaxParams('amountWithoutTax', 'AMOUNT_WITHOUT_TAX', 'LOCAL_SEG_OFFSET', $current.coCalcBase, $current.coCalcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.valuatingQty, $variable.valuatingUom)",
                "field": "$variable.qtyValueTaxParams"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "expr": "false",
                "field": "isPriceWithTax",
                "when": "'isPriceWithTax'"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-change-amountWithoutTax",
          "description": "修改 本币无税金额",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.amountWithoutTax"
            }
          ],
          "conditions": [
            {
              "access": "'amountWithoutTax'",
              "if": "!$current.amountWithoutTax.$focused && $fn.isBaseOnAmountLock($current.coCalcBaseHigh)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.qtyValueTaxInitParams",
                "field": "$variable.qtyValueTaxParams"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-output-amountWithoutTax",
          "description": "回写 本币无税金额",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.qtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'amountWithoutTax'",
              "if": "!$fn.isBaseOnAmountLock($current.coCalcBaseHigh)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 本币无税金额",
              "params": {
                "autoClear": true,
                "expr": "$variable.qtyValueTaxResult.amountWithoutTax",
                "field": "amountWithoutTax",
                "override": true,
                "when": "$variable.qtyValueTaxResult.amountWithoutTax !== $current.amountWithoutTax"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-input-originTaxAmount",
          "description": "输入 原币税额",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.originTaxAmount"
            }
          ],
          "conditions": [
            {
              "access": "'originTaxAmount'",
              "if": "$current.originTaxAmount.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getQtyValueTaxParams('originTaxAmount', 'TAX', 'ORIGIN_SEG_OFFSET', $current.coCalcBase, $current.coCalcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.valuatingQty, $variable.valuatingUom)",
                "field": "$variable.qtyValueTaxParams"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-output-originTaxAmount",
          "description": "回写 原币税额",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.qtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'originTaxAmount'",
              "if": "!$fn.isBaseOnAmountLock($current.coCalcBaseHigh)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 原币税额",
              "params": {
                "autoClear": true,
                "expr": "$variable.qtyValueTaxResult.originTaxAmount",
                "field": "originTaxAmount",
                "override": true,
                "when": "$variable.qtyValueTaxResult.originTaxAmount !== $current.originTaxAmount"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-input-taxAmount",
          "description": "输入 本币税额",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.taxAmount"
            }
          ],
          "conditions": [
            {
              "access": "'taxAmount'",
              "if": "$current.taxAmount.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$fn.getQtyValueTaxParams('taxAmount', 'TAX', 'LOCAL_SEG_OFFSET', $current.coCalcBase, $current.coCalcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.valuatingQty, $variable.valuatingUom)",
                "field": "$variable.qtyValueTaxParams"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-output-taxAmount",
          "description": "回写 本币税额",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.qtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'taxAmount'",
              "if": "!$fn.isBaseOnAmountLock($current.coCalcBaseHigh)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 本币税额",
              "params": {
                "autoClear": true,
                "expr": "$variable.qtyValueTaxResult.taxAmount",
                "field": "taxAmount",
                "override": true,
                "when": "$variable.qtyValueTaxResult.taxAmount !== $current.taxAmount"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-input-calcBase",
          "description": "输入 计算标志位",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.coCalcBase"
            }
          ],
          "conditions": [
            {
              "access": "'coCalcBase'",
              "if": "$current.coCalcBase.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$variable.qtyValueTaxInitParams",
                "field": "$variable.qtyValueTaxParams"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-output-calcBase",
          "description": "回写 计算标志位",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.qtyValueTaxResult"
            }
          ],
          "conditions": [
            {
              "access": "'coCalcBase'",
              "if": "!$current.coCalcBase.$focused"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "回写 计算标志位",
              "params": {
                "autoClear": true,
                "expr": "$variable.qtyValueTaxResult.calcBase",
                "field": "coCalcBase",
                "override": true,
                "when": "$variable.qtyValueTaxResult.calcBase !== $current.coCalcBase"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-blur-originPrice-change-calcBase",
          "description": "原币含税单价 失焦 更新标志位",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Blur",
              "target": "$current.originBasePrice"
            }
          ],
          "conditions": [
            {
              "access": "'originBasePrice'",
              "if": "$fn.isBaseOnLockPrice($current.coCalcBase)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "autoClear": true,
                "expr": "$fn.clearLockPrice($current.coCalcBase)",
                "field": "coCalcBase",
                "override": true,
                "when": "!$variable.originPrice"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-blur-price-change-calcBase",
          "description": "本币含税单价 失焦 更新标志位",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Blur",
              "target": "$current.basePrice"
            }
          ],
          "conditions": [
            {
              "access": "'basePrice'",
              "if": "$fn.isBaseOnLockPrice($current.coCalcBase)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "autoClear": true,
                "expr": "$fn.clearLockPrice($current.coCalcBase)",
                "field": "coCalcBase",
                "override": true,
                "when": "!$variable.price"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-blur-originPriceWithoutTax-change-calcBase",
          "description": "原币无税单价 失焦 更新标志位",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Blur",
              "target": "$current.originBasePriceWithoutTax"
            }
          ],
          "conditions": [
            {
              "access": "'originBasePriceWithoutTax'",
              "if": "$fn.isBaseOnLockPrice($current.coCalcBase)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "autoClear": true,
                "expr": "$fn.clearLockPrice($current.coCalcBase)",
                "field": "coCalcBase",
                "override": true,
                "when": "!$variable.originPriceWithoutTax"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-blur-priceWithoutTax-change-calcBase",
          "description": "本币无税单价 失焦 更新标志位",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Blur",
              "target": "$current.basePriceWithoutTax"
            }
          ],
          "conditions": [
            {
              "access": "'basePriceWithoutTax'",
              "if": "$fn.isBaseOnLockPrice($current.coCalcBase)"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "autoClear": true,
                "expr": "$fn.clearLockPrice($current.coCalcBase)",
                "field": "coCalcBase",
                "override": true,
                "when": "!$variable.priceWithoutTax"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-execute-calc",
          "description": "执行计算",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$variable.qtyValueTaxParams"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "执行计算 将计算结果写入变量",
              "params": {
                "expr": "$fn.qtyValueTax($fn.currencyParamsResolver, $context.systemSettings, $variable.qtyValueTaxParams)",
                "field": "$variable.qtyValueTaxResult",
                "override": true,
                "when": "$fn.needCalc($variable.qtyValueTaxParams)"
              }
            }
          ]
        },
        {
          "id": "qtyValueTax-execute-calc-automation",
          "description": "复制 自动执行计算",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Automation"
            }
          ],
          "conditions": [
            {
              "if": "$context.mode === 'Copy'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "执行计算 将计算结果写入变量",
              "params": {
                "expr": "$fn.qtyValueTax($fn.currencyParamsResolver, $context.systemSettings, $variable.qtyValueTaxParams)",
                "field": "$variable.qtyValueTaxResult",
                "override": true,
                "when": "$fn.needCalc($variable.qtyValueTaxParams)"
              }
            }
          ]
        }
      ],
      "variables": {
        "amount": "$fn.getValue('amount')",
        "amountWithoutTax": "$fn.getValue('amountWithoutTax')",
        "currency": "$fn.getValue('currency')",
        "exchangeRate": "$fn.getValue('exchangeRate')",
        "originAmount": "$fn.getValue('originAmount')",
        "originAmountWithoutTax": "$fn.getValue('originAmountWithoutTax')",
        "originPrice": "$fn.getValue('originBasePrice')",
        "originPriceWithoutTax": "$fn.getValue('originBasePriceWithoutTax')",
        "originTaxAmount": "$fn.getValue('originTaxAmount')",
        "price": "$fn.getValue('basePrice')",
        "priceWithoutTax": "$fn.getValue('basePriceWithoutTax')",
        "qtyValueTaxInitParams": "$fn.getQtyValueTaxParams('auto', '', '', $current.coCalcBase, $current.coCalcBaseHigh, $variable.currency, $variable.exchangeRate, $variable.taxRate, $variable.originPrice, $variable.price, $variable.originPriceWithoutTax, $variable.priceWithoutTax, $variable.originAmount, $variable.amount, $variable.originAmountWithoutTax, $variable.amountWithoutTax, $variable.originTaxAmount, $variable.taxAmount, $variable.valuatingQty, $variable.valuatingUom)",
        "qtyValueTaxParams": "$variable.qtyValueTaxInitParams",
        "qtyValueTaxPriceBitFlagConst": "",
        "qtyValueTaxResult": "$variable.qtyValueTaxInitParams",
        "qtyValueTaxTempCalcBase": "$fn.setPriceBitFlagConst($current.coCalcBase, $variable.qtyValueTaxPriceBitFlagConst)",
        "taxAmount": "$fn.getValue('taxAmount')",
        "taxRate": "$fn.getValue('taxRate')",
        "valuatingQty": "$fn.getValue('baseQty')",
        "valuatingUom": "$fn.getValue('baseUnit')"
      },
      "fns": [
        {
          "name": "getQtyValueTaxParams",
          "description": "量价计算 参数装配",
          "value": "/**\n* @export\n* @param {API} api\n*/\nexport default function (api) {\n  return function (currentField,bitFlagConst,offsetConst,calcBase,calcBaseHigh,currency,exchangeRate,taxRate,originPrice,price,originPriceWithoutTax,priceWithoutTax,originAmount,amount,originAmountWithoutTax,amountWithoutTax,originTaxAmount,taxAmount,valuatingQty,valuatingUom) {\n    const isPriceWithTax = api.getNode().getValue('isPriceWithTax');\n    const id = api.getNode().getValue('id');\n    const src = api.getNode().getValue('srcObject');\n    const needUpgrade = !!id || !!src;\n    const result = {\n      currentField,\n      bitFlagConst,\n      offsetConst,\n      calcBase,\n      calcBaseHigh,\n      isPriceWithTax,\n      currency,\n      exchangeRate,\n      taxRate,\n      originPrice,\n      price,\n      originPriceWithoutTax,\n      priceWithoutTax,\n      originAmount,\n      amount,\n      originAmountWithoutTax,\n      amountWithoutTax,\n      originTaxAmount,\n      taxAmount,\n      valuatingQty,\n      valuatingUom,\n      needUpgrade,\n    };\n    console.log('Calc Log: qtyValueTax params', result);\n    return result;\n  }\n}\n",
          "declare": "(currentField:any,bitFlagConst:any,offsetConst:any,calcBase:any,calcBaseHigh:any,currency:any,exchangeRate:any,taxRate:any,originPrice:any,price:any,originPriceWithoutTax:any,priceWithoutTax:any,originAmount:any,amount:any,originAmountWithoutTax:any,amountWithoutTax:any,originTaxAmount:any,taxAmount:any,valuatingQty:any,valuatingUom:any) => any"
        },
        {
          "name": "getValue",
          "description": "获取当前 field 的值",
          "value": "/**\n* @export\n* @param {API} api\n*/\nexport default function (api) {\n  return function (fieldName) {\n    if (!fieldName) {\n      return undefined;\n    }\n    if (fieldName.includes('$')) {\n      return fieldName;\n    }\n    return api.getNode().getValue(fieldName);\n  }\n}",
          "declare": "(fieldName:any) => any"
        }
      ]
    },
    {
      "id": "use-get-department-rule-b7fe766a-8f90-4f14-8ac6-e6f6887007a8/8b7a08ae-15c9-4288-b5a7-35fe072c0923",
      "items": [
        {
          "id": "40edb006-025c-4654-8fce-9ecb35869892",
          "description": "人员修改时，部门没值给部门赋值人员所属部门，有值不赋值",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.ownerUser"
            }
          ],
          "conditions": [
            {
              "if": "$current.ownerUser.$focused && $current.ownerUser && !current.department"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "expr": "$root.ownerUser.department",
                "field": "department"
              }
            }
          ]
        },
        {
          "id": "ae6daf09-5407-4bf6-a201-4336bf0ed4ae",
          "description": "部门过滤人员",
          "actions": [
            {
              "name": "ReactiveFieldComponentProps",
              "params": {
                "effect": {
                  "fireImmediately": true,
                  "isDestruct": true,
                  "props": {
                    "advanceReferProps.defaultCategory.id": "$current.department.id",
                    "advanceReferProps.defaultCategory.idPath": "$current.department.idPath"
                  },
                  "when": "$current.department"
                },
                "field": "ownerUser"
              }
            }
          ]
        }
      ]
    },
    {
      "id": "csSytdcccl6qe1j6901Cccl6qe1j6902 status by product760bb93b-84f2-42c7-9ead-229cdc7fca56/8d0eb086-5780-40e5-aa90-215bb2cb997a",
      "items": [
        {
          "id": "e254f377-c21f-4a3a-ac78-57ee284273b5",
          "description": "",
          "reference": "purOrderItems",
          "variables": {
            "isCharacEnable": "$fn.getCharacEnable($current.product, 'csSytdcccl6qe1j6901Cccl6qe1j6902')"
          },
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "description": "存货特征根据存货启用的特征范围进行状态控制",
              "params": {
                "effect": {
                  "expr": "!$fn.getCharacEnable($current.product, 'csSytdcccl6qe1j6901Cccl6qe1j6902')",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "true"
                },
                "field": "csSytdcccl6qe1j6901Cccl6qe1j6902"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "getCharacEnable",
          "description": "获取特征是否需要禁用",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (product, characFieldName) { \n    if (!product || !product.productCharacs || !product.productCharacs.length) return false;\n    const cFields = product.productCharacs.map(i=>i && i.charac && i.charac.customizedFieldName);\n    return cFields.includes(characFieldName);\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "csSytdcccl6qe1j6901Cccl6qe1j6902 visible by detail product6e266f7d-a1e0-463a-a6ff-9971b6eadff2/e1ac624b-c655-4a6b-9513-5bf29f7f0a9b",
      "items": [
        {
          "id": "826c28f6-453c-4399-8895-faab29dfb747",
          "description": "存货特征列根据存货是否显示-(web端列规则)",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "description": "存货特征列根据存货是否显示-(web端列规则)",
              "params": {
                "effect": {
                  "expr": "$fn.isNeedShowColumn('purOrderItems', 'csSytdcccl6qe1j6901Cccl6qe1j6902')",
                  "fireImmediately": true,
                  "status": "Visible",
                  "when": "true"
                },
                "field": "purOrderItems.csSytdcccl6qe1j6901Cccl6qe1j6902"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "isNeedShowColumn",
          "description": "根据明细行内容确定是否要显示当前列内容",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (items, characFieldName) {\n    return !!api.getView(items, 'Initialized').find(row => {\n      // const product = new Function('_', 'return _.' + productField)(row);\n      const product = row.product || (row.invAcctgObject && row.invAcctgObject.product);\n      if (!product || !product.productCharacs || !product.productCharacs.length) return false;\n      const cFields = product.productCharacs.map(i => i && i.charac && i.charac.customizedFieldName);\n      return cFields.includes(characFieldName);\n    });\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "csSytdcccl6qe1j6901Cccl6qe1j6902 criteria by product5ec8658f-34d5-4787-aaf7-29c5d6eacaa3/a814b144-096b-45f6-931b-63d847368264",
      "items": [
        {
          "id": "0bfd0771-6e5d-4302-b521-ad5c4b315b60",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveCriteria",
              "description": "存货特征档案受到存货特征过滤",
              "params": {
                "field": "csSytdcccl6qe1j6901Cccl6qe1j6902",
                "fragment": {
                  "autoClear": true,
                  "bindVars": {
                    "characId": "$fn.getCharacId($current.product, 'csSytdcccl6qe1j6901Cccl6qe1j6902')",
                    "productId": "$current.product.id"
                  },
                  "criteriaStr": "not exists(select 1 from Product where productCharacScopes.characId=:characId and id=:productId) or exists (select 1 from Product where  productCharacValues.characValueId=m.id and productCharacValues.characId=:characId and id=:productId)",
                  "fireImmediately": true,
                  "when": "$fn.getCharacId($current.product, 'csSytdcccl6qe1j6901Cccl6qe1j6902')"
                }
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "getProductCharacterIds",
          "description": "根据存货获取存货特征过滤范围",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (productData, featureFieldName) {\n    const cValues = productData.productCharacValues || [];\n    return cValues.map(cValue=>{\n      if (cValue.charac && cValue.charac.customizedFieldName && cValue.charac.customizedFieldName==featureFieldName) {\n        return cValue.characValue.id;\n      }\n    }).filter(i=>i);\n    \n  }\n}",
          "declare": "(params: any) => any"
        },
        {
          "name": "needCriteria",
          "description": "是否需要过滤, 如果没有设置, 那么默认不过滤",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (productData, featureFieldName) {\n    const cValues = productData.productCharacValues || [];\n    const range =  cValues.map(cValue=>{\n      if (cValue.charac && cValue.charac.customizedFieldName && cValue.charac.customizedFieldName==featureFieldName) {\n        return cValue.characValue.id;\n      }\n    }).filter(i=>i);\n    return !!(range.length)\n  }\n}",
          "declare": "(params: any) => any"
        },
        {
          "name": "getCharacId",
          "description": "获得当前存货特征id",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (product, characFiled) {\n    const charac = product.productCharacs;\n    let characData\n    if (charac.length) {\n      characData = charac.filter(item => {\n        if (item.charac.customizedFieldName === characFiled) {\n          return item\n        }\n      })\n    }\n    return characData.length ? characData[0].charac.id : undefined\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "sc-add-charac-rule-by-spec-ffac83c2-fb81-4b30-a996-0e9328563446/34a71133-7180-4360-a2a9-ccda885c8054",
      "items": [
        {
          "id": "7a77232b-e623-4d14-9f2d-7828aa962de1",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "description": "单据根据其他状态控制当前单据的状态",
              "params": {
                "effect": {
                  "expr": "$fn.getStatus('productSpec')",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "true"
                },
                "field": "csSytdcccl6qe1j6901Cccl6qe1j6902"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "getStatus",
          "description": "获取当前字段的状态",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (field) {\n    return api.getNode().resolve(field).node.disabled;\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "sc-add-charac-rule-by-scopes-44d471f3-cf3e-452e-9757-2bc41968f9a1/8e74193c-1f5a-40e1-8c56-2a4115b1dc12",
      "items": [
        {
          "id": "6fab5bb1-3910-4592-be85-0580d1410b87",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveAssignment",
              "params": {
                "effect": {
                  "autoClear": true,
                  "expr": "$fn.getPeoductCharacScopes($current.product, 'csSytdcccl6qe1j6901Cccl6qe1j6902', $current.csSytdcccl6qe1j6901Cccl6qe1j6902, $root.createdOrg) ? $current.csSytdcccl6qe1j6901Cccl6qe1j6902: undefined",
                  "fireImmediately": true,
                  "when": "$current.product && $current.csSytdcccl6qe1j6901Cccl6qe1j6902 && !$current.srcObject && ($fn.getIsManualAdd($context.entityName,$current.isManualAdd))"
                },
                "field": "csSytdcccl6qe1j6901Cccl6qe1j6902"
              }
            }
          ]
        }
      ],
      "fns": [
        {
          "name": "getPeoductCharacScopes",
          "description": "获得存货上存货特征的值范围",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (productData, characFieldName, charac, usedOrg) {\n    const cValues = productData.productCharacValues || [];\n    const ids = cValues.map(cValue => {\n      if (cValue.charac && cValue.charac.customizedFieldName && cValue.charac.customizedFieldName == characFieldName) {\n        return cValue.characValue.id;\n      }\n    }).filter(i => i);\n    if (!charac.usedOrg) {\n      return ids.length ? ids.includes(charac.id) : true;\n    } else {\n      return ids.length ? usedOrg.id ===charac.usedOrg.id && ids.includes(charac.id) : usedOrg.id ===charac.usedOrg.id ;\n    }\n    debugger\n  }\n}",
          "declare": "(params: any) => any"
        },
        {
          "name": "getIsManualAdd",
          "description": "获取是否是手动添加行（兼容盘点单获取库存的需求）",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (entityName, isManualAdd) {\n      if (entityName == 'PhysicalCount') {\n      return !!isManualAdd\n    }\n\n    return true\n\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "csYsccmutk1j5001Cccmutk1j5002 status by product2240834b-5d76-4cb6-a6b4-2bbf7036cb2a/8d0eb086-5780-40e5-aa90-215bb2cb997a",
      "items": [
        {
          "id": "e254f377-c21f-4a3a-ac78-57ee284273b5",
          "description": "",
          "reference": "purOrderItems",
          "variables": {
            "isCharacEnable": "$fn.getCharacEnable($current.product, 'csYsccmutk1j5001Cccmutk1j5002')"
          },
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "description": "存货特征根据存货启用的特征范围进行状态控制",
              "params": {
                "effect": {
                  "expr": "!$fn.getCharacEnable($current.product, 'csYsccmutk1j5001Cccmutk1j5002')",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "true"
                },
                "field": "csYsccmutk1j5001Cccmutk1j5002"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "getCharacEnable",
          "description": "获取特征是否需要禁用",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (product, characFieldName) { \n    if (!product || !product.productCharacs || !product.productCharacs.length) return false;\n    const cFields = product.productCharacs.map(i=>i && i.charac && i.charac.customizedFieldName);\n    return cFields.includes(characFieldName);\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "csYsccmutk1j5001Cccmutk1j5002 visible by detail product23b0b0db-6fe8-4a97-a808-1ca2a5993abe/e1ac624b-c655-4a6b-9513-5bf29f7f0a9b",
      "items": [
        {
          "id": "826c28f6-453c-4399-8895-faab29dfb747",
          "description": "存货特征列根据存货是否显示-(web端列规则)",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "description": "存货特征列根据存货是否显示-(web端列规则)",
              "params": {
                "effect": {
                  "expr": "$fn.isNeedShowColumn('purOrderItems', 'csYsccmutk1j5001Cccmutk1j5002')",
                  "fireImmediately": true,
                  "status": "Visible",
                  "when": "true"
                },
                "field": "purOrderItems.csYsccmutk1j5001Cccmutk1j5002"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "isNeedShowColumn",
          "description": "根据明细行内容确定是否要显示当前列内容",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (items, characFieldName) {\n    return !!api.getView(items, 'Initialized').find(row => {\n      // const product = new Function('_', 'return _.' + productField)(row);\n      const product = row.product || (row.invAcctgObject && row.invAcctgObject.product);\n      if (!product || !product.productCharacs || !product.productCharacs.length) return false;\n      const cFields = product.productCharacs.map(i => i && i.charac && i.charac.customizedFieldName);\n      return cFields.includes(characFieldName);\n    });\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "csYsccmutk1j5001Cccmutk1j5002 criteria by productd18ece17-5339-42d2-9275-6772e2a1b6fd/a814b144-096b-45f6-931b-63d847368264",
      "items": [
        {
          "id": "0bfd0771-6e5d-4302-b521-ad5c4b315b60",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveCriteria",
              "description": "存货特征档案受到存货特征过滤",
              "params": {
                "field": "csYsccmutk1j5001Cccmutk1j5002",
                "fragment": {
                  "autoClear": true,
                  "bindVars": {
                    "characId": "$fn.getCharacId($current.product, 'csYsccmutk1j5001Cccmutk1j5002')",
                    "productId": "$current.product.id"
                  },
                  "criteriaStr": "not exists(select 1 from Product where productCharacScopes.characId=:characId and id=:productId) or exists (select 1 from Product where  productCharacValues.characValueId=m.id and productCharacValues.characId=:characId and id=:productId)",
                  "fireImmediately": true,
                  "when": "$fn.getCharacId($current.product, 'csYsccmutk1j5001Cccmutk1j5002')"
                }
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "getProductCharacterIds",
          "description": "根据存货获取存货特征过滤范围",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (productData, featureFieldName) {\n    const cValues = productData.productCharacValues || [];\n    return cValues.map(cValue=>{\n      if (cValue.charac && cValue.charac.customizedFieldName && cValue.charac.customizedFieldName==featureFieldName) {\n        return cValue.characValue.id;\n      }\n    }).filter(i=>i);\n    \n  }\n}",
          "declare": "(params: any) => any"
        },
        {
          "name": "needCriteria",
          "description": "是否需要过滤, 如果没有设置, 那么默认不过滤",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (productData, featureFieldName) {\n    const cValues = productData.productCharacValues || [];\n    const range =  cValues.map(cValue=>{\n      if (cValue.charac && cValue.charac.customizedFieldName && cValue.charac.customizedFieldName==featureFieldName) {\n        return cValue.characValue.id;\n      }\n    }).filter(i=>i);\n    return !!(range.length)\n  }\n}",
          "declare": "(params: any) => any"
        },
        {
          "name": "getCharacId",
          "description": "获得当前存货特征id",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (product, characFiled) {\n    const charac = product.productCharacs;\n    let characData\n    if (charac.length) {\n      characData = charac.filter(item => {\n        if (item.charac.customizedFieldName === characFiled) {\n          return item\n        }\n      })\n    }\n    return characData.length ? characData[0].charac.id : undefined\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "sc-add-charac-rule-by-spec-5d1a3066-3090-49e8-bac8-7c56afec3bfe/34a71133-7180-4360-a2a9-ccda885c8054",
      "items": [
        {
          "id": "7a77232b-e623-4d14-9f2d-7828aa962de1",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "description": "单据根据其他状态控制当前单据的状态",
              "params": {
                "effect": {
                  "expr": "$fn.getStatus('productSpec')",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "true"
                },
                "field": "csYsccmutk1j5001Cccmutk1j5002"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "getStatus",
          "description": "获取当前字段的状态",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (field) {\n    return api.getNode().resolve(field).node.disabled;\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "sc-add-charac-rule-by-scopes-6dede499-cc1e-4bf2-b93c-4ff95d86d3dc/8e74193c-1f5a-40e1-8c56-2a4115b1dc12",
      "items": [
        {
          "id": "6fab5bb1-3910-4592-be85-0580d1410b87",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveAssignment",
              "params": {
                "effect": {
                  "autoClear": true,
                  "expr": "$fn.getPeoductCharacScopes($current.product, 'csYsccmutk1j5001Cccmutk1j5002', $current.csYsccmutk1j5001Cccmutk1j5002, $root.createdOrg) ? $current.csYsccmutk1j5001Cccmutk1j5002: undefined",
                  "fireImmediately": true,
                  "when": "$current.product && $current.csYsccmutk1j5001Cccmutk1j5002 && !$current.srcObject && ($fn.getIsManualAdd($context.entityName,$current.isManualAdd))"
                },
                "field": "csYsccmutk1j5001Cccmutk1j5002"
              }
            }
          ]
        }
      ],
      "fns": [
        {
          "name": "getPeoductCharacScopes",
          "description": "获得存货上存货特征的值范围",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (productData, characFieldName, charac, usedOrg) {\n    const cValues = productData.productCharacValues || [];\n    const ids = cValues.map(cValue => {\n      if (cValue.charac && cValue.charac.customizedFieldName && cValue.charac.customizedFieldName == characFieldName) {\n        return cValue.characValue.id;\n      }\n    }).filter(i => i);\n    if (!charac.usedOrg) {\n      return ids.length ? ids.includes(charac.id) : true;\n    } else {\n      return ids.length ? usedOrg.id ===charac.usedOrg.id && ids.includes(charac.id) : usedOrg.id ===charac.usedOrg.id ;\n    }\n    debugger\n  }\n}",
          "declare": "(params: any) => any"
        },
        {
          "name": "getIsManualAdd",
          "description": "获取是否是手动添加行（兼容盘点单获取库存的需求）",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (entityName, isManualAdd) {\n      if (entityName == 'PhysicalCount') {\n      return !!isManualAdd\n    }\n\n    return true\n\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "csCzccraah1jp002Cccraah1jp003 status by producta61802ce-6ab3-4dac-86eb-0f2fe0147443/8d0eb086-5780-40e5-aa90-215bb2cb997a",
      "items": [
        {
          "id": "e254f377-c21f-4a3a-ac78-57ee284273b5",
          "description": "",
          "reference": "purOrderItems",
          "variables": {
            "isCharacEnable": "$fn.getCharacEnable($current.product, 'csCzccraah1jp002Cccraah1jp003')"
          },
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "description": "存货特征根据存货启用的特征范围进行状态控制",
              "params": {
                "effect": {
                  "expr": "!$fn.getCharacEnable($current.product, 'csCzccraah1jp002Cccraah1jp003')",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "true"
                },
                "field": "csCzccraah1jp002Cccraah1jp003"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "getCharacEnable",
          "description": "获取特征是否需要禁用",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (product, characFieldName) { \n    if (!product || !product.productCharacs || !product.productCharacs.length) return false;\n    const cFields = product.productCharacs.map(i=>i && i.charac && i.charac.customizedFieldName);\n    return cFields.includes(characFieldName);\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "csCzccraah1jp002Cccraah1jp003 visible by detail product42e4af63-990b-4975-91d3-4c04dfb809b7/e1ac624b-c655-4a6b-9513-5bf29f7f0a9b",
      "items": [
        {
          "id": "826c28f6-453c-4399-8895-faab29dfb747",
          "description": "存货特征列根据存货是否显示-(web端列规则)",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "description": "存货特征列根据存货是否显示-(web端列规则)",
              "params": {
                "effect": {
                  "expr": "$fn.isNeedShowColumn('purOrderItems', 'csCzccraah1jp002Cccraah1jp003')",
                  "fireImmediately": true,
                  "status": "Visible",
                  "when": "true"
                },
                "field": "purOrderItems.csCzccraah1jp002Cccraah1jp003"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "isNeedShowColumn",
          "description": "根据明细行内容确定是否要显示当前列内容",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (items, characFieldName) {\n    return !!api.getView(items, 'Initialized').find(row => {\n      // const product = new Function('_', 'return _.' + productField)(row);\n      const product = row.product || (row.invAcctgObject && row.invAcctgObject.product);\n      if (!product || !product.productCharacs || !product.productCharacs.length) return false;\n      const cFields = product.productCharacs.map(i => i && i.charac && i.charac.customizedFieldName);\n      return cFields.includes(characFieldName);\n    });\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "csCzccraah1jp002Cccraah1jp003 criteria by product6774c49c-fc0f-4f14-9b29-96e0977f1fde/a814b144-096b-45f6-931b-63d847368264",
      "items": [
        {
          "id": "0bfd0771-6e5d-4302-b521-ad5c4b315b60",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveCriteria",
              "description": "存货特征档案受到存货特征过滤",
              "params": {
                "field": "csCzccraah1jp002Cccraah1jp003",
                "fragment": {
                  "autoClear": true,
                  "bindVars": {
                    "characId": "$fn.getCharacId($current.product, 'csCzccraah1jp002Cccraah1jp003')",
                    "productId": "$current.product.id"
                  },
                  "criteriaStr": "not exists(select 1 from Product where productCharacScopes.characId=:characId and id=:productId) or exists (select 1 from Product where  productCharacValues.characValueId=m.id and productCharacValues.characId=:characId and id=:productId)",
                  "fireImmediately": true,
                  "when": "$fn.getCharacId($current.product, 'csCzccraah1jp002Cccraah1jp003')"
                }
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "getProductCharacterIds",
          "description": "根据存货获取存货特征过滤范围",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (productData, featureFieldName) {\n    const cValues = productData.productCharacValues || [];\n    return cValues.map(cValue=>{\n      if (cValue.charac && cValue.charac.customizedFieldName && cValue.charac.customizedFieldName==featureFieldName) {\n        return cValue.characValue.id;\n      }\n    }).filter(i=>i);\n    \n  }\n}",
          "declare": "(params: any) => any"
        },
        {
          "name": "needCriteria",
          "description": "是否需要过滤, 如果没有设置, 那么默认不过滤",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (productData, featureFieldName) {\n    const cValues = productData.productCharacValues || [];\n    const range =  cValues.map(cValue=>{\n      if (cValue.charac && cValue.charac.customizedFieldName && cValue.charac.customizedFieldName==featureFieldName) {\n        return cValue.characValue.id;\n      }\n    }).filter(i=>i);\n    return !!(range.length)\n  }\n}",
          "declare": "(params: any) => any"
        },
        {
          "name": "getCharacId",
          "description": "获得当前存货特征id",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (product, characFiled) {\n    const charac = product.productCharacs;\n    let characData\n    if (charac.length) {\n      characData = charac.filter(item => {\n        if (item.charac.customizedFieldName === characFiled) {\n          return item\n        }\n      })\n    }\n    return characData.length ? characData[0].charac.id : undefined\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "sc-add-charac-rule-by-spec-fb69a259-8bd3-43be-b4a8-2070b8f142c7/34a71133-7180-4360-a2a9-ccda885c8054",
      "items": [
        {
          "id": "7a77232b-e623-4d14-9f2d-7828aa962de1",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "description": "单据根据其他状态控制当前单据的状态",
              "params": {
                "effect": {
                  "expr": "$fn.getStatus('productSpec')",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "true"
                },
                "field": "csCzccraah1jp002Cccraah1jp003"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "getStatus",
          "description": "获取当前字段的状态",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (field) {\n    return api.getNode().resolve(field).node.disabled;\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "sc-add-charac-rule-by-scopes-8d79611f-ff08-4d00-9c0c-b8495ef61dc3/8e74193c-1f5a-40e1-8c56-2a4115b1dc12",
      "items": [
        {
          "id": "6fab5bb1-3910-4592-be85-0580d1410b87",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveAssignment",
              "params": {
                "effect": {
                  "autoClear": true,
                  "expr": "$fn.getPeoductCharacScopes($current.product, 'csCzccraah1jp002Cccraah1jp003', $current.csCzccraah1jp002Cccraah1jp003, $root.createdOrg) ? $current.csCzccraah1jp002Cccraah1jp003: undefined",
                  "fireImmediately": true,
                  "when": "$current.product && $current.csCzccraah1jp002Cccraah1jp003 && !$current.srcObject && ($fn.getIsManualAdd($context.entityName,$current.isManualAdd))"
                },
                "field": "csCzccraah1jp002Cccraah1jp003"
              }
            }
          ]
        }
      ],
      "fns": [
        {
          "name": "getPeoductCharacScopes",
          "description": "获得存货上存货特征的值范围",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (productData, characFieldName, charac, usedOrg) {\n    const cValues = productData.productCharacValues || [];\n    const ids = cValues.map(cValue => {\n      if (cValue.charac && cValue.charac.customizedFieldName && cValue.charac.customizedFieldName == characFieldName) {\n        return cValue.characValue.id;\n      }\n    }).filter(i => i);\n    if (!charac.usedOrg) {\n      return ids.length ? ids.includes(charac.id) : true;\n    } else {\n      return ids.length ? usedOrg.id ===charac.usedOrg.id && ids.includes(charac.id) : usedOrg.id ===charac.usedOrg.id ;\n    }\n    debugger\n  }\n}",
          "declare": "(params: any) => any"
        },
        {
          "name": "getIsManualAdd",
          "description": "获取是否是手动添加行（兼容盘点单获取库存的需求）",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (entityName, isManualAdd) {\n      if (entityName == 'PhysicalCount') {\n      return !!isManualAdd\n    }\n\n    return true\n\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "csTljbccl6q81j6902Cccl6q81j6903 status by product40657bf5-91f4-480f-afdb-c3f0136a1390/8d0eb086-5780-40e5-aa90-215bb2cb997a",
      "items": [
        {
          "id": "e254f377-c21f-4a3a-ac78-57ee284273b5",
          "description": "",
          "reference": "purOrderItems",
          "variables": {
            "isCharacEnable": "$fn.getCharacEnable($current.product, 'csTljbccl6q81j6902Cccl6q81j6903')"
          },
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "description": "存货特征根据存货启用的特征范围进行状态控制",
              "params": {
                "effect": {
                  "expr": "!$fn.getCharacEnable($current.product, 'csTljbccl6q81j6902Cccl6q81j6903')",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "true"
                },
                "field": "csTljbccl6q81j6902Cccl6q81j6903"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "getCharacEnable",
          "description": "获取特征是否需要禁用",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (product, characFieldName) { \n    if (!product || !product.productCharacs || !product.productCharacs.length) return false;\n    const cFields = product.productCharacs.map(i=>i && i.charac && i.charac.customizedFieldName);\n    return cFields.includes(characFieldName);\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "csTljbccl6q81j6902Cccl6q81j6903 visible by detail productb03e6116-ac55-4d0b-87dd-9421ab656562/e1ac624b-c655-4a6b-9513-5bf29f7f0a9b",
      "items": [
        {
          "id": "826c28f6-453c-4399-8895-faab29dfb747",
          "description": "存货特征列根据存货是否显示-(web端列规则)",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "description": "存货特征列根据存货是否显示-(web端列规则)",
              "params": {
                "effect": {
                  "expr": "$fn.isNeedShowColumn('purOrderItems', 'csTljbccl6q81j6902Cccl6q81j6903')",
                  "fireImmediately": true,
                  "status": "Visible",
                  "when": "true"
                },
                "field": "purOrderItems.csTljbccl6q81j6902Cccl6q81j6903"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "isNeedShowColumn",
          "description": "根据明细行内容确定是否要显示当前列内容",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (items, characFieldName) {\n    return !!api.getView(items, 'Initialized').find(row => {\n      // const product = new Function('_', 'return _.' + productField)(row);\n      const product = row.product || (row.invAcctgObject && row.invAcctgObject.product);\n      if (!product || !product.productCharacs || !product.productCharacs.length) return false;\n      const cFields = product.productCharacs.map(i => i && i.charac && i.charac.customizedFieldName);\n      return cFields.includes(characFieldName);\n    });\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "csTljbccl6q81j6902Cccl6q81j6903 criteria by productb4ff000e-466f-4268-9b57-bf36e5493843/a814b144-096b-45f6-931b-63d847368264",
      "items": [
        {
          "id": "0bfd0771-6e5d-4302-b521-ad5c4b315b60",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveCriteria",
              "description": "存货特征档案受到存货特征过滤",
              "params": {
                "field": "csTljbccl6q81j6902Cccl6q81j6903",
                "fragment": {
                  "autoClear": true,
                  "bindVars": {
                    "characId": "$fn.getCharacId($current.product, 'csTljbccl6q81j6902Cccl6q81j6903')",
                    "productId": "$current.product.id"
                  },
                  "criteriaStr": "not exists(select 1 from Product where productCharacScopes.characId=:characId and id=:productId) or exists (select 1 from Product where  productCharacValues.characValueId=m.id and productCharacValues.characId=:characId and id=:productId)",
                  "fireImmediately": true,
                  "when": "$fn.getCharacId($current.product, 'csTljbccl6q81j6902Cccl6q81j6903')"
                }
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "getProductCharacterIds",
          "description": "根据存货获取存货特征过滤范围",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (productData, featureFieldName) {\n    const cValues = productData.productCharacValues || [];\n    return cValues.map(cValue=>{\n      if (cValue.charac && cValue.charac.customizedFieldName && cValue.charac.customizedFieldName==featureFieldName) {\n        return cValue.characValue.id;\n      }\n    }).filter(i=>i);\n    \n  }\n}",
          "declare": "(params: any) => any"
        },
        {
          "name": "needCriteria",
          "description": "是否需要过滤, 如果没有设置, 那么默认不过滤",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (productData, featureFieldName) {\n    const cValues = productData.productCharacValues || [];\n    const range =  cValues.map(cValue=>{\n      if (cValue.charac && cValue.charac.customizedFieldName && cValue.charac.customizedFieldName==featureFieldName) {\n        return cValue.characValue.id;\n      }\n    }).filter(i=>i);\n    return !!(range.length)\n  }\n}",
          "declare": "(params: any) => any"
        },
        {
          "name": "getCharacId",
          "description": "获得当前存货特征id",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (product, characFiled) {\n    const charac = product.productCharacs;\n    let characData\n    if (charac.length) {\n      characData = charac.filter(item => {\n        if (item.charac.customizedFieldName === characFiled) {\n          return item\n        }\n      })\n    }\n    return characData.length ? characData[0].charac.id : undefined\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "sc-add-charac-rule-by-spec-9b4b06ba-2a8b-4f23-88f3-3d1720109a04/34a71133-7180-4360-a2a9-ccda885c8054",
      "items": [
        {
          "id": "7a77232b-e623-4d14-9f2d-7828aa962de1",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "description": "单据根据其他状态控制当前单据的状态",
              "params": {
                "effect": {
                  "expr": "$fn.getStatus('productSpec')",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "true"
                },
                "field": "csTljbccl6q81j6902Cccl6q81j6903"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "getStatus",
          "description": "获取当前字段的状态",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (field) {\n    return api.getNode().resolve(field).node.disabled;\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "sc-add-charac-rule-by-scopes-ac9af2f3-111e-4e63-81b3-9fc2636920bb/8e74193c-1f5a-40e1-8c56-2a4115b1dc12",
      "items": [
        {
          "id": "6fab5bb1-3910-4592-be85-0580d1410b87",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveAssignment",
              "params": {
                "effect": {
                  "autoClear": true,
                  "expr": "$fn.getPeoductCharacScopes($current.product, 'csTljbccl6q81j6902Cccl6q81j6903', $current.csTljbccl6q81j6902Cccl6q81j6903, $root.createdOrg) ? $current.csTljbccl6q81j6902Cccl6q81j6903: undefined",
                  "fireImmediately": true,
                  "when": "$current.product && $current.csTljbccl6q81j6902Cccl6q81j6903 && !$current.srcObject && ($fn.getIsManualAdd($context.entityName,$current.isManualAdd))"
                },
                "field": "csTljbccl6q81j6902Cccl6q81j6903"
              }
            }
          ]
        }
      ],
      "fns": [
        {
          "name": "getPeoductCharacScopes",
          "description": "获得存货上存货特征的值范围",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (productData, characFieldName, charac, usedOrg) {\n    const cValues = productData.productCharacValues || [];\n    const ids = cValues.map(cValue => {\n      if (cValue.charac && cValue.charac.customizedFieldName && cValue.charac.customizedFieldName == characFieldName) {\n        return cValue.characValue.id;\n      }\n    }).filter(i => i);\n    if (!charac.usedOrg) {\n      return ids.length ? ids.includes(charac.id) : true;\n    } else {\n      return ids.length ? usedOrg.id ===charac.usedOrg.id && ids.includes(charac.id) : usedOrg.id ===charac.usedOrg.id ;\n    }\n    debugger\n  }\n}",
          "declare": "(params: any) => any"
        },
        {
          "name": "getIsManualAdd",
          "description": "获取是否是手动添加行（兼容盘点单获取库存的需求）",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (entityName, isManualAdd) {\n      if (entityName == 'PhysicalCount') {\n      return !!isManualAdd\n    }\n\n    return true\n\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "csCmccmuu21j5002Cccmuu21j5003 status by product04d766b1-3962-41f7-8073-1c3f41ae0103/8d0eb086-5780-40e5-aa90-215bb2cb997a",
      "items": [
        {
          "id": "e254f377-c21f-4a3a-ac78-57ee284273b5",
          "description": "",
          "reference": "purOrderItems",
          "variables": {
            "isCharacEnable": "$fn.getCharacEnable($current.product, 'csCmccmuu21j5002Cccmuu21j5003')"
          },
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "description": "存货特征根据存货启用的特征范围进行状态控制",
              "params": {
                "effect": {
                  "expr": "!$fn.getCharacEnable($current.product, 'csCmccmuu21j5002Cccmuu21j5003')",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "true"
                },
                "field": "csCmccmuu21j5002Cccmuu21j5003"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "getCharacEnable",
          "description": "获取特征是否需要禁用",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (product, characFieldName) { \n    if (!product || !product.productCharacs || !product.productCharacs.length) return false;\n    const cFields = product.productCharacs.map(i=>i && i.charac && i.charac.customizedFieldName);\n    return cFields.includes(characFieldName);\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "csCmccmuu21j5002Cccmuu21j5003 visible by detail product409aa184-b0b7-4819-b17d-fe6a09ad7032/e1ac624b-c655-4a6b-9513-5bf29f7f0a9b",
      "items": [
        {
          "id": "826c28f6-453c-4399-8895-faab29dfb747",
          "description": "存货特征列根据存货是否显示-(web端列规则)",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "description": "存货特征列根据存货是否显示-(web端列规则)",
              "params": {
                "effect": {
                  "expr": "$fn.isNeedShowColumn('purOrderItems', 'csCmccmuu21j5002Cccmuu21j5003')",
                  "fireImmediately": true,
                  "status": "Visible",
                  "when": "true"
                },
                "field": "purOrderItems.csCmccmuu21j5002Cccmuu21j5003"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "isNeedShowColumn",
          "description": "根据明细行内容确定是否要显示当前列内容",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (items, characFieldName) {\n    return !!api.getView(items, 'Initialized').find(row => {\n      // const product = new Function('_', 'return _.' + productField)(row);\n      const product = row.product || (row.invAcctgObject && row.invAcctgObject.product);\n      if (!product || !product.productCharacs || !product.productCharacs.length) return false;\n      const cFields = product.productCharacs.map(i => i && i.charac && i.charac.customizedFieldName);\n      return cFields.includes(characFieldName);\n    });\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "csCmccmuu21j5002Cccmuu21j5003 criteria by product3b649cc0-1e5e-456f-ba34-f8ac99760607/a814b144-096b-45f6-931b-63d847368264",
      "items": [
        {
          "id": "0bfd0771-6e5d-4302-b521-ad5c4b315b60",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveCriteria",
              "description": "存货特征档案受到存货特征过滤",
              "params": {
                "field": "csCmccmuu21j5002Cccmuu21j5003",
                "fragment": {
                  "autoClear": true,
                  "bindVars": {
                    "characId": "$fn.getCharacId($current.product, 'csCmccmuu21j5002Cccmuu21j5003')",
                    "productId": "$current.product.id"
                  },
                  "criteriaStr": "not exists(select 1 from Product where productCharacScopes.characId=:characId and id=:productId) or exists (select 1 from Product where  productCharacValues.characValueId=m.id and productCharacValues.characId=:characId and id=:productId)",
                  "fireImmediately": true,
                  "when": "$fn.getCharacId($current.product, 'csCmccmuu21j5002Cccmuu21j5003')"
                }
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "getProductCharacterIds",
          "description": "根据存货获取存货特征过滤范围",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (productData, featureFieldName) {\n    const cValues = productData.productCharacValues || [];\n    return cValues.map(cValue=>{\n      if (cValue.charac && cValue.charac.customizedFieldName && cValue.charac.customizedFieldName==featureFieldName) {\n        return cValue.characValue.id;\n      }\n    }).filter(i=>i);\n    \n  }\n}",
          "declare": "(params: any) => any"
        },
        {
          "name": "needCriteria",
          "description": "是否需要过滤, 如果没有设置, 那么默认不过滤",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (productData, featureFieldName) {\n    const cValues = productData.productCharacValues || [];\n    const range =  cValues.map(cValue=>{\n      if (cValue.charac && cValue.charac.customizedFieldName && cValue.charac.customizedFieldName==featureFieldName) {\n        return cValue.characValue.id;\n      }\n    }).filter(i=>i);\n    return !!(range.length)\n  }\n}",
          "declare": "(params: any) => any"
        },
        {
          "name": "getCharacId",
          "description": "获得当前存货特征id",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (product, characFiled) {\n    const charac = product.productCharacs;\n    let characData\n    if (charac.length) {\n      characData = charac.filter(item => {\n        if (item.charac.customizedFieldName === characFiled) {\n          return item\n        }\n      })\n    }\n    return characData.length ? characData[0].charac.id : undefined\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "sc-add-charac-rule-by-spec-6efd197c-8a15-428e-9eb3-cb6a9792e1de/34a71133-7180-4360-a2a9-ccda885c8054",
      "items": [
        {
          "id": "7a77232b-e623-4d14-9f2d-7828aa962de1",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "description": "单据根据其他状态控制当前单据的状态",
              "params": {
                "effect": {
                  "expr": "$fn.getStatus('productSpec')",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "true"
                },
                "field": "csCmccmuu21j5002Cccmuu21j5003"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "getStatus",
          "description": "获取当前字段的状态",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (field) {\n    return api.getNode().resolve(field).node.disabled;\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "sc-add-charac-rule-by-scopes-dafe78df-9e75-4b4e-a70e-175ac52f9628/8e74193c-1f5a-40e1-8c56-2a4115b1dc12",
      "items": [
        {
          "id": "6fab5bb1-3910-4592-be85-0580d1410b87",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveAssignment",
              "params": {
                "effect": {
                  "autoClear": true,
                  "expr": "$fn.getPeoductCharacScopes($current.product, 'csCmccmuu21j5002Cccmuu21j5003', $current.csCmccmuu21j5002Cccmuu21j5003, $root.createdOrg) ? $current.csCmccmuu21j5002Cccmuu21j5003: undefined",
                  "fireImmediately": true,
                  "when": "$current.product && $current.csCmccmuu21j5002Cccmuu21j5003 && !$current.srcObject && ($fn.getIsManualAdd($context.entityName,$current.isManualAdd))"
                },
                "field": "csCmccmuu21j5002Cccmuu21j5003"
              }
            }
          ]
        }
      ],
      "fns": [
        {
          "name": "getPeoductCharacScopes",
          "description": "获得存货上存货特征的值范围",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (productData, characFieldName, charac, usedOrg) {\n    const cValues = productData.productCharacValues || [];\n    const ids = cValues.map(cValue => {\n      if (cValue.charac && cValue.charac.customizedFieldName && cValue.charac.customizedFieldName == characFieldName) {\n        return cValue.characValue.id;\n      }\n    }).filter(i => i);\n    if (!charac.usedOrg) {\n      return ids.length ? ids.includes(charac.id) : true;\n    } else {\n      return ids.length ? usedOrg.id ===charac.usedOrg.id && ids.includes(charac.id) : usedOrg.id ===charac.usedOrg.id ;\n    }\n    debugger\n  }\n}",
          "declare": "(params: any) => any"
        },
        {
          "name": "getIsManualAdd",
          "description": "获取是否是手动添加行（兼容盘点单获取库存的需求）",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (entityName, isManualAdd) {\n      if (entityName == 'PhysicalCount') {\n      return !!isManualAdd\n    }\n\n    return true\n\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "sc-add-product-feature-dynamic-refer-rule-0257ab24-9cb3-43f5-8248-33dacc3a9183/e7d6ecba-eac9-4844-89f5-dc63bcaafa88",
      "items": [
        {
          "id": "5bcf7f1d-2424-47b3-84ca-e9163a4fc4df",
          "description": "",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveAssignment",
              "description": "库存customizedFields2初始化",
              "params": {
                "effect": {
                  "expr": "$fn.getEmptyObj()",
                  "fireImmediately": true,
                  "override": true,
                  "when": "$current.product && $current.product.id && $current._entryMode === 'Create'"
                },
                "field": "customizedFields2"
              }
            }
          ],
          "forbiddenImperativeTransform": true
        }
      ],
      "fns": [
        {
          "name": "getEmptyObj",
          "description": "return empty obj",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (params) {\n    return {}\n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "Inventory-product-assign-to-items-base-trans-inv",
      "items": [
        {
          "id": "Inventory-product-assign-to-items-base-trans-invc625be3b-173a-4ba3-89b3-0215910dcc82",
          "description": "",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Automation"
            }
          ],
          "conditions": [
            {
              "if": "$context.scenario == 'BatchInsert'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "description": "现存量参照赋值到明细行可用量（主单位）",
              "params": {
                "autoClear": true,
                "expr": "$current.invCtrlLedger && $current.invCtrlLedger.availBaseQty",
                "field": "availBaseQty",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "现存量参照赋值到明细行可用量（辅单位）",
              "params": {
                "autoClear": true,
                "expr": "$current.invCtrlLedger && $current.invCtrlLedger.availAuxQty",
                "field": "availAuxQty",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "现存量参照赋值到明细行现存量（主单位）",
              "params": {
                "autoClear": true,
                "expr": "$current.invCtrlLedger && $current.invCtrlLedger.onHandBaseQty",
                "field": "onHandBaseQty",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "现存量参照赋值到明细行现存量（辅单位）",
              "params": {
                "autoClear": true,
                "expr": "$current.invCtrlLedger && $current.invCtrlLedger.onHandAuxQty",
                "field": "onHandAuxQty",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "存货计量单位赋值到明细行",
              "params": {
                "autoClear": true,
                "expr": "$current.product.unit",
                "field": "baseUnit",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "存货辅单位赋值到明细行",
              "params": {
                "autoClear": true,
                "expr": "$current.product && $current.product.auxUnit",
                "field": "auxUnit",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "存货库存单位赋值到明细行",
              "params": {
                "autoClear": true,
                "expr": "$current.product && $current.product.invUnit || $current.product.unit",
                "field": "invBaseUnit",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "存货库存辅单位赋值到明细行存货辅单位",
              "params": {
                "autoClear": true,
                "expr": "$current.product && $current.product.auxUnit",
                "field": "invAuxUnit",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "存货采购单位赋值到明细行(其他方向单据可能需要更改)",
              "params": {
                "autoClear": true,
                "expr": "$current.product && $current.product.purUnit || $current.product.unit",
                "field": "transUnit",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "存货换算方向赋值到明细行",
              "params": {
                "autoClear": true,
                "expr": "$current.product && $current.product.cnvDirection",
                "field": "cnvDirection",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "存货换算分子赋值到明细行",
              "params": {
                "autoClear": true,
                "expr": "$current.product && $current.product.cnvNumerator",
                "field": "baseCnvNumerator",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "存货换算分母赋值到明细行",
              "params": {
                "autoClear": true,
                "expr": "$current.product && $current.product.cnvDenominator",
                "field": "baseCnvDenominator",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "taxRate",
                "expr": "$current.product && $current.product.taxRate.rate",
                "when": "true"
              }
            }
          ]
        },
        {
          "id": "Inventory-product-assign-to-items-base-trans-invc625be3b-173a-4ba3-89b3-0215910dcc69",
          "description": "",
          "reference": "purOrderItems",
          "triggers": [
            {
              "event": "Change",
              "target": "$current.product"
            }
          ],
          "conditions": [
            {
              "if": "$context.scenario != 'SourcePicking' && $context.scenario != 'CopyRow'"
            }
          ],
          "actions": [
            {
              "name": "Assignment",
              "params": {
                "field": "availBaseQty",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "availAuxQty",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "onHandBaseQty",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "onHandAuxQty",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "unReceiptTransQty",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "unReceiptBaseQty",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "unInvoiceTransQty",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "unInvoiceBaseQty",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "originBalancePaymentAmount",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "balancePaymentAmount",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "originNotPayedAmountForAp",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "notPayedAmountForAp",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "originApPaymentOutAmount",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "apPaymentOutAmount",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "isFreeGift",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "baseQty",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "auxQty",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "transQty",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "calcBase",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "calcBaseHigh",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "transUnit",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "priceWithoutTax",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "price",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "originPriceWithoutTax",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "originAmountWithoutTax",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "originTaxAmount",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "originAmount",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "amountWithoutTax",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "taxAmount",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "amount",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "baseUnit",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "originBasePrice",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "basePriceWithoutTax",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "basePrice",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "isPriceWithTax",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "isOverMaxPrice",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "priceSourceObject",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "receiptTransQty",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "receiptBaseQty",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "redReceiptTransQty",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "redReceiptBaseQty",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "netReceiptTransQty",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "netReceiptBaseQty",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "invoiceTransQty",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "originInvoiceAmount",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "invoiceAmount",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "originPayedPaymentAppAmount",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "payedPaymentAppAmount",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "originPaymentAppAmount",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "paymentAppAmount",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "originPrice",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "originBasePriceWithoutTax",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "invoiceBaseQty",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "originPayedAmount",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "payedAmount",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "auxUnit",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "originApAmount",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "apAmount",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "originReverseAmount",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "reverseAmount",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "transUnitCnvType",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "netReceiptAuxQty",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "priceSourceObjectTypeObject",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "priceSourceType",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "priceSourceItemObject",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "priceSourceItemObjectTypeObject",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "priceSourceObjectVenProductPrice",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "originNetReceiptAmount",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "netReceiptAmount",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "priceSourceItemObjectPurOrderItem",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "priceSourceItemObjectPurReceiptItem",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "priceSourceItemObjectPurchaseInvoiceItem",
                "expr": "undefined",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "存货计量单位赋值到明细行",
              "params": {
                "autoClear": true,
                "expr": "$current.product.unit",
                "field": "baseUnit",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "存货辅单位赋值到明细行",
              "params": {
                "autoClear": true,
                "expr": "$current.product && $current.product.auxUnit",
                "field": "auxUnit",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "存货库存单位赋值到明细行",
              "params": {
                "autoClear": true,
                "expr": "$current.product && $current.product.invUnit || $current.product.unit",
                "field": "invBaseUnit",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "存货库存辅单位赋值到明细行存货辅单位",
              "params": {
                "autoClear": true,
                "expr": "$current.product && $current.product.auxUnit",
                "field": "invAuxUnit",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "存货采购单位赋值到明细行(其他方向单据可能需要更改)",
              "params": {
                "autoClear": true,
                "expr": "$current.product && $current.product.purUnit || $current.product.unit",
                "field": "transUnit",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "存货换算方向赋值到明细行",
              "params": {
                "autoClear": true,
                "expr": "$current.product && $current.product.cnvDirection",
                "field": "cnvDirection",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "存货换算分子赋值到明细行",
              "params": {
                "autoClear": true,
                "expr": "$current.product && $current.product.cnvNumerator",
                "field": "baseCnvNumerator",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "description": "存货换算分母赋值到明细行",
              "params": {
                "autoClear": true,
                "expr": "$current.product && $current.product.cnvDenominator",
                "field": "baseCnvDenominator",
                "when": "true"
              }
            },
            {
              "name": "Assignment",
              "params": {
                "field": "taxRate",
                "expr": "$current.product && $current.product.taxRate.rate",
                "when": "true"
              }
            }
          ]
        }
      ],
      "variables": {
        "batchInsert": "$variable.scenario == 'BatchInsert'",
        "copyRow": "$variable.scenario == 'CopyRow'",
        "fireImmediately": "$variable.copyRow ||  $variable.batchInsert ",
        "mode": "$context.mode",
        "scenario": "$context.scenario",
        "sourcePicking": "$variable.scenario == 'SourcePicking'"
      },
      "fns": [
        {
          "name": "getRealUnitCnvType",
          "description": "获取单位的换算率类型(product上只存储了主辅单位之间的换算率类型, 所以其他的换算率类型需要去获取) 默认认为是 与 baseUnitGroup 的关系",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (targetUnit, baseUnitGroup,auxUnitGroup,defaultCnvType) {\n    // 默认没有主或者辅单位组, 直接返回默认\n    if (!auxUnitGroup || auxUnitGroup.length) return defaultCnvType;\n    if (!baseUnitGroup || baseUnitGroup.length) return defaultCnvType;\n\n    // 如果都在主单位组, 那么就是固定换算\n    const isBaseGroup = !!baseUnitGroup.unitGroupItems.find(item=>(item.unit&&item.unit.id)===targetUnit.id);\n    const isAuxGroup = !!auxUnitGroup.unitGroupItems.find(item=>(item.unit&&item.unit.id)===targetUnit.id);\n    if (isBaseGroup) {\n      return {\n        id: \"UnitCnvType.fixed\"\n      }\n    }\n    if (isAuxGroup)  {\n      return defaultCnvType\n    }\n    return defaultCnvType\n  }\n}",
          "declare": "(params: any) => any"
        }
      ],
      "mappings": [
        {
          "name": "auxUnit",
          "value": "auxUnit"
        },
        {
          "name": "baseCnvDenominator",
          "value": "baseCnvDenominator"
        },
        {
          "name": "baseCnvNumerator",
          "value": "baseCnvNumerator"
        },
        {
          "name": "baseUnit",
          "value": "baseUnit"
        },
        {
          "name": "cnvDenominator",
          "value": "cnvDenominator"
        },
        {
          "name": "cnvDirection",
          "value": "cnvDirection"
        },
        {
          "name": "cnvNumerator",
          "value": "cnvNumerator"
        },
        {
          "name": "invAuxUnit",
          "value": "invAuxUnit"
        },
        {
          "name": "invBaseUnit",
          "value": "invBaseUnit"
        },
        {
          "name": "items",
          "value": ""
        },
        {
          "name": "productTransUnit",
          "value": ""
        },
        {
          "name": "transUnit",
          "value": "transUnit"
        },
        {
          "name": "unit",
          "value": "unit"
        },
        {
          "name": "unitCnvType",
          "value": "unitCnvType"
        }
      ]
    },
    {
      "id": "Inventory-items-unit-status0cdb58e2-52d6-4936-8f9e-fa9d89b9b7b2/Inventory-items-unit-status",
      "items": [
        {
          "id": "0737b3fc-dd8e-423c-ad24-4424bb363ea5",
          "description": "根据存货设置单位的只读状态",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "description": "未启用多计量主单位只读",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "!$current.product.isMultiUnit"
                },
                "field": "baseUnit"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "未启用双单位组辅单位只读",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "!$current.product.isDualUnitGroup"
                },
                "field": "auxUnit"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "未启用多计量库存单位只读",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "!$current.product.isMultiUnit"
                },
                "field": "invBaseUnit"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "未启用双单位组库存辅单位只读",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "!$current.product.isDualUnitGroup"
                },
                "field": "invAuxUnit"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "未启用多计量交易单位只读",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "!$current.product.isMultiUnit"
                },
                "field": "transUnit"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "未启用多计量库存单位换算率只读",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "!$current.product.isMultiUnit"
                },
                "field": "invAuxToBaseRate"
              }
            }
          ]
        },
        {
          "id": "09d3a2b8-efba-44fa-bee8-328c6fb66c4e",
          "description": "根据存货设置数量相关的只读状态",
          "reference": "purOrderItems",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "description": "未启用双单位组辅数量只读",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "!$current.product.isDualUnitGroup"
                },
                "field": "auxQty"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "未启用双单位组库存辅数量只读",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Readonly",
                  "when": "!$current.product.isDualUnitGroup"
                },
                "field": "invAuxQty"
              }
            }
          ]
        },
        {
          "id": "51eda97b-5f28-4e15-8fb7-052729a99bbd",
          "description": "单位根据存货进行是否必填控制",
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "description": "启用双单位组, 辅单位必填",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Required",
                  "when": "$current.product.isDualUnitGroup"
                },
                "field": "auxUnit"
              }
            },
            {
              "name": "ReactiveFieldStatus",
              "description": "启用双单位组, 库存辅单位必填",
              "params": {
                "effect": {
                  "expr": "true",
                  "fireImmediately": true,
                  "status": "Required",
                  "when": "$current.product.isDualUnitGroup"
                },
                "field": "invAuxUnit"
              }
            }
          ]
        }
      ],
      "variables": {
        "batchInsert": "$variable.scenario == 'BatchInsert'",
        "copyRow": "$variable.scenario == 'CopyRow'",
        "fireImmediately": "$variable.CopyRow ||  $variable.batchInsert ",
        "mode": "$context.mode",
        "scenario": "$context.scenario",
        "sourcePicking": "$variable.scenario == 'SourcePicking'"
      }
    },
    {
      "id": "field-auth-is-sensitive/30078136-7606-4b6b-bffd-b82d0f31d483",
      "items": [
        {
          "id": "19dcb83f-caca-42a6-bf79-b64463b03994",
          "description": "外键携带字段，根据外键控制敏感属性",
          "reference": "purOrderItems",
          "conditions": [
            {
              "access": "'Sensitive'=='Sensitive'"
            }
          ],
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effect": {
                  "expr": "!$fn.isCarryFieldVisible('code', $current.product)",
                  "fireImmediately": "true",
                  "status": "Sensitive"
                },
                "field": "product.code"
              }
            }
          ]
        },
        {
          "id": "0cf0f560-b9cf-44ca-a533-ad74d0c4646f",
          "description": "外键携带字段，根据外键控制敏感属性",
          "reference": "purOrderItems",
          "conditions": [
            {
              "access": "'Sensitive'=='Visible'"
            }
          ],
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effect": {
                  "expr": "$fn.isCarryFieldVisible('code', $current.product)",
                  "fireImmediately": "true",
                  "status": "Visible"
                },
                "field": "product.code"
              }
            }
          ]
        }
      ],
      "fns": [
        {
          "name": "isCarryFieldVisible",
          "description": "敏感字段规则",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (property, data) {\n    if (!data || !data._ctrlViewMethod || !data._ctrlViewFields ){\n      return true\n    }\n    if(data._ctrlViewMethod === 'unavaliable') {\n      return !data._ctrlViewFields.hasOwnProperty(property);\n    } else if(data._ctrlViewMethod === 'avaliable')  {\n      return data._ctrlViewFields.hasOwnProperty(property);\n    }\n    return true\n    \n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    },
    {
      "id": "field-auth-is-sensitive/30078136-7606-4b6b-bffd-b82d0f31d483",
      "items": [
        {
          "id": "19dcb83f-caca-42a6-bf79-b64463b03994",
          "description": "外键携带字段，根据外键控制敏感属性",
          "reference": "purOrderItems",
          "conditions": [
            {
              "access": "'Sensitive'=='Sensitive'"
            }
          ],
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effect": {
                  "expr": "!$fn.isCarryFieldVisible('spec', $current.product)",
                  "fireImmediately": "true",
                  "status": "Sensitive"
                },
                "field": "product.spec"
              }
            }
          ]
        },
        {
          "id": "0cf0f560-b9cf-44ca-a533-ad74d0c4646f",
          "description": "外键携带字段，根据外键控制敏感属性",
          "reference": "purOrderItems",
          "conditions": [
            {
              "access": "'Sensitive'=='Visible'"
            }
          ],
          "actions": [
            {
              "name": "ReactiveFieldStatus",
              "params": {
                "effect": {
                  "expr": "$fn.isCarryFieldVisible('spec', $current.product)",
                  "fireImmediately": "true",
                  "status": "Visible"
                },
                "field": "product.spec"
              }
            }
          ]
        }
      ],
      "fns": [
        {
          "name": "isCarryFieldVisible",
          "description": "敏感字段规则",
          "value": "/**\n* @export\n* @param {API} api\n* @return {(params: any) => any}\n*/\nexport default function (api) {\n  return function (property, data) {\n    if (!data || !data._ctrlViewMethod || !data._ctrlViewFields ){\n      return true\n    }\n    if(data._ctrlViewMethod === 'unavaliable') {\n      return !data._ctrlViewFields.hasOwnProperty(property);\n    } else if(data._ctrlViewMethod === 'avaliable')  {\n      return data._ctrlViewFields.hasOwnProperty(property);\n    }\n    return true\n    \n  }\n}",
          "declare": "(params: any) => any"
        }
      ]
    }
  ],
  "useImperativeTransformer": false
}